

import Foundation

public class PlatformClient {
    public let config: PlatformConfig

    public let auditTrail: AuditTrail

    public let billing: Billing

    public let catalog: Catalog

    public let common: Common

    public let communication: Communication

    public let companyProfile: CompanyProfile

    public let configuration: Configuration

    public let content: Content

    public let discount: Discount

    public let fileStorage: FileStorage

    public let finance: Finance

    public let inventory: Inventory

    public let lead: Lead

    public let serviceability: Serviceability

    public let order: Order

    public let payment: Payment

    public let theme: Theme

    public let webhook: Webhook

    public init(config: PlatformConfig) {
        self.config = config
        
        auditTrail = AuditTrail(config: config)
        
        billing = Billing(config: config)
        
        catalog = Catalog(config: config)
        
        common = Common(config: config)
        
        communication = Communication(config: config)
        
        companyProfile = CompanyProfile(config: config)
        
        configuration = Configuration(config: config)
        
        content = Content(config: config)
        
        discount = Discount(config: config)
        
        fileStorage = FileStorage(config: config)
        
        finance = Finance(config: config)
        
        inventory = Inventory(config: config)
        
        lead = Lead(config: config)
        
        serviceability = Serviceability(config: config)
        
        order = Order(config: config)
        
        payment = Payment(config: config)
        
        theme = Theme(config: config)
        
        webhook = Webhook(config: config)
        
    }
    public func setLocationDetails(details: PlatformConfig.LocationDetails?){
        config.locationDetails = details
    }
    public func applicationClient(id: String) -> ApplicationClient {
        return ApplicationClient(applicationId: id, config: config)
    }

    public class ApplicationClient {
        var config: PlatformConfig
        var companyId: String
        var applicationId: String

        
        public let cart: Cart
        
        public let catalog: Catalog
        
        public let communication: Communication
        
        public let configuration: Configuration
        
        public let content: Content
        
        public let fileStorage: FileStorage
        
        public let lead: Lead
        
        public let serviceability: Serviceability
        
        public let order: Order
        
        public let partner: Partner
        
        public let payment: Payment
        
        public let rewards: Rewards
        
        public let share: Share
        
        public let theme: Theme
        
        public let user: User
        
        
        public init(applicationId: String, config: PlatformConfig) {
            self.config = config
            self.companyId = config.companyId
            self.applicationId = applicationId

            
            cart = Cart(config: config, applicationId: applicationId)
            
            catalog = Catalog(config: config, applicationId: applicationId)
            
            communication = Communication(config: config, applicationId: applicationId)
            
            configuration = Configuration(config: config, applicationId: applicationId)
            
            content = Content(config: config, applicationId: applicationId)
            
            fileStorage = FileStorage(config: config, applicationId: applicationId)
            
            lead = Lead(config: config, applicationId: applicationId)
            
            serviceability = Serviceability(config: config, applicationId: applicationId)
            
            order = Order(config: config, applicationId: applicationId)
            
            partner = Partner(config: config, applicationId: applicationId)
            
            payment = Payment(config: config, applicationId: applicationId)
            
            rewards = Rewards(config: config, applicationId: applicationId)
            
            share = Share(config: config, applicationId: applicationId)
            
            theme = Theme(config: config, applicationId: applicationId)
            
            user = User(config: config, applicationId: applicationId)
            
        }

        
            
        public class Cart {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Retrieve available coupons.
            * Description: Retrieve a list of available coupons for use in the shopping cart.
            **/
            public func getCoupons(
                pageNo: Int?,
                pageSize: Int?,
                isArchived: Bool?,
                title: String?,
                isPublic: Bool?,
                isDisplay: Bool?,
                typeSlug: String?,
                code: String?,
                
                onResponse: @escaping (_ response: CouponsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = isArchived {
    
    xQuery["is_archived"] = value
    
}


if let value = title {
    
    xQuery["title"] = value
    
}


if let value = isPublic {
    
    xQuery["is_public"] = value
    
}


if let value = isDisplay {
    
    xQuery["is_display"] = value
    
}


if let value = typeSlug {
    
    xQuery["type_slug"] = value
    
}


if let value = code {
    
    xQuery["code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a new coupon.
            * Description: Generate and add a new coupon to the cart.
            **/
            public func createCoupon(
                body: CouponAdd,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get coupon details by ID.
            * Description: Retrieve detailed information about a specific coupon using its unique ID.
            **/
            public func getCouponById(
                id: String,
                
                onResponse: @escaping (_ response: CouponUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a coupon.
            * Description: Modify the details and settings of an existing coupon in the cart system.
            **/
            public func updateCoupon(
                id: String,
                body: CouponUpdate,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Partially update a coupon.
            * Description: Make partial modifications to the settings of an existing coupon in the cart system.
            **/
            public func updateCouponPartially(
                id: String,
                body: CouponPartialUpdate,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve available promotions.
            * Description: Retrieve a list of available promotions to apply to the cart.
            **/
            public func getPromotions(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                promoGroup: String?,
                promotionType: String?,
                fpPanel: String?,
                promotionId: String?,
                
                onResponse: @escaping (_ response: PromotionsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = promoGroup {
    
    xQuery["promo_group"] = value
    
}


if let value = promotionType {
    
    xQuery["promotion_type"] = value
    
}


if let value = fpPanel {
    
    xQuery["fp_panel"] = value
    
}


if let value = promotionId {
    
    xQuery["promotion_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a new promotion.
            * Description: Generate and add a new promotion to the cart system 
            **/
            public func createPromotion(
                body: PromotionAdd,
                onResponse: @escaping (_ response: PromotionAdd?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get promotion details by ID.
            * Description: Retrieve detailed information about a specific promotion using its unique ID.
            **/
            public func getPromotionById(
                id: String,
                
                onResponse: @escaping (_ response: PromotionUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a promotion.
            * Description: Modify the details and settings of an existing promotion in the cart system.
            **/
            public func updatePromotion(
                id: String,
                body: PromotionUpdate,
                onResponse: @escaping (_ response: PromotionUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Partially update a promotion.
            * Description: Make partial modifications to the settings of an existing promotion in the cart system.
            **/
            public func updatePromotionPartially(
                id: String,
                body: PromotionPartialUpdate,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get promotion and coupon configuration.
            * Description: Retrieve configuration settings for promotions and coupons.
            **/
            public func getPromosCouponConfig(
                entityType: String?,
                isHidden: Bool?,
                
                onResponse: @escaping (_ response: ActivePromosResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = entityType {
    
    xQuery["entity_type"] = value
    
}


if let value = isHidden {
    
    xQuery["is_hidden"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promo-coupons",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ActivePromosResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart metadata configuration.
            * Description: Modify the configuration settings for cart metadata.
            **/
            public func updateCartMetaConfig(
                cartMetaId: String,
                body: CartMetaConfigUpdate,
                onResponse: @escaping (_ response: CartMetaConfigUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cartConfiguration/\(cartMetaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch cart meta configuration
            * Description: Fetch cart meta configuration
            **/
            public func fetchCartMetaConfig(
                
                onResponse: @escaping (_ response: CartMetaConfigAdd?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create new cart meta configuration
            * Description: Create new cart meta configuration
            **/
            public func createCartMetaConfig(
                body: CartMetaConfigAdd,
                onResponse: @escaping (_ response: CartMetaConfigAdd?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update price adjustments.
            * Description: Modify price adjustments for items in the cart.
            **/
            public func updatePriceAdjustment(
                id: String,
                body: PriceAdjustmentUpdate,
                onResponse: @escaping (_ response: PriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/priceAdjustment/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove price adjustments.
            * Description: Remove price adjustments applied to items in the cart.
            **/
            public func removePriceAdjustment(
                id: String,
                
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/priceAdjustment/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add price adjustments.
            * Description: Apply price adjustments to items in the cart.
            **/
            public func addPriceAdjustment(
                body: PriceAdjustmentAdd,
                onResponse: @escaping (_ response: PriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch and validate cart items.
            * Description: Retrieve and validate items currently in the cart.
            **/
            public func fetchAndvalidateCartItems(
                body: OpenapiCartDetailsRequest,
                onResponse: @escaping (_ response: OpenapiCartDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenapiCartDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check cart serviceability.
            * Description: Verify if the items in the cart are serviceable.
            **/
            public func checkCartServiceability(
                body: OpenApiCartServiceabilityRequest,
                onResponse: @escaping (_ response: OpenApiCartServiceabilityResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/serviceability",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCartServiceabilityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Proceed to cart checkout.
            * Description: Initiate the checkout process for the items in the cart.
            **/
            public func checkoutCart(
                body: OpenApiPlatformCheckoutReq,
                onResponse: @escaping (_ response: OpenApiCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/checkout",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve abandoned carts.
            * Description: Retrieve abandoned carts for analysis and potential recovery.
            **/
            public func getAbandonedCart(
                pageNo: Int?,
                pageSize: Int?,
                fromDate: String?,
                toDate: String?,
                anonymousCart: Bool?,
                lastId: String?,
                sortOn: String?,
                
                onResponse: @escaping (_ response: AbandonedCartResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = fromDate {
    
    xQuery["from_date"] = value
    
}


if let value = toDate {
    
    xQuery["to_date"] = value
    
}


if let value = anonymousCart {
    
    xQuery["anonymous_cart"] = value
    
}


if let value = lastId {
    
    xQuery["last_id"] = value
    
}


if let value = sortOn {
    
    xQuery["sort_on"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AbandonedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get abandoned cart details.
            * Description: Retrieve detailed information about a specific abandoned cart.
            **/
            public func getAbandonedCartDetails(
                id: String?,
                i: Bool?,
                b: Bool?,
                c: Bool?,
                
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = c {
    
    xQuery["c"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/cart/detail",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add items to the cart.
            * Description: Add items to the shopping cart 
            **/
            public func addItems(
                cartId: String,
                b: Bool?,
                body: AddCartRequest,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = b {
    
    xQuery["b"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart items.
            * Description: Modify items and their quantities in the shopping cart.
            **/
            public func updateCart(
                cartId: String,
                b: Bool?,
                body: UpdateCartRequest,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = b {
    
    xQuery["b"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get coupon option values.
            * Description: Retrieve available values for coupon options.
            **/
            public func getCouponOptionValues(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_options",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check if a coupon code exists.
            * Description: Verify the existence of a specific coupon code.
            **/
            public func getCouponCodeExists(
                code: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = code {
    
    xQuery["code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check if a promotion code exists.
            * Description: Verify the existence of a specific promotion code.
            **/
            public func getPromotionCodeExists(
                code: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = code {
    
    xQuery["code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Override the cart.
            * Description: Override the current cart with a new configuration.
            **/
            public func overrideCart(
                body: OverrideCheckoutReq,
                onResponse: @escaping (_ response: OverrideCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout/over-ride",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OverrideCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Generate token for sharing the cart
            * Description: Use this API to generate a shared cart snapshot and return a shortlink token. The link can be shared with other users for getting the same items in their cart.
            **/
            public func getCartShareLink(
                body: GetShareCartLinkRequest,
                onResponse: @escaping (_ response: GetShareCartLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetShareCartLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get items shared via a cart link.
            * Description: Retrieve the items shared with you via a cart link.
            **/
            public func getCartSharedItems(
                token: String,
                
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shareCart/\(token)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart with shared items.
            * Description: Modify your cart by adding shared items from a cart link.
            **/
            public func updateCartWithSharedItems(
                token: String,
                action: String,
                cartId: String?,
                
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shareCart/\(token)/\(action)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve a list of carts.
            * Description: Retrieve a list of saved shopping carts.
            **/
            public func getCartList(
                fromDate: String?,
                toDate: String?,
                filterOn: String?,
                
                onResponse: @escaping (_ response: MultiCartResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = fromDate {
    
    xQuery["from_date"] = value
    
}


if let value = toDate {
    
    xQuery["to_date"] = value
    
}


if let value = filterOn {
    
    xQuery["filter_on"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart-list",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MultiCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart user details.
            * Description: Modify user-related details for a shopping cart.
            **/
            public func updateCartUser(
                id: String?,
                body: UpdateUserCartMapping,
                onResponse: @escaping (_ response: UserCartMappingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/update-user",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserCartMappingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get cart details.
            * Description: Retrieve detailed information about a shopping cart.
            **/
            public func getCart(
                id: String?,
                userId: String?,
                i: Bool?,
                b: Bool?,
                assignCardId: Int?,
                buyNow: Bool?,
                
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = userId {
    
    xQuery["user_id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = assignCardId {
    
    xQuery["assign_card_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add items via platform integration.
            * Description: Add items to the cart through platform integration.
            **/
            public func platformAddItems(
                i: Bool?,
                b: Bool?,
                buyNow: Bool?,
                id: String?,
                body: PlatformAddCartRequest,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update items in the customer 's cart using cart id
            * Description: Use this API to update items added to the cart with the help of a request object containing attributes like item_quantity and item_size. These attributes will be fetched from the following APIs operation Operation for current api call. update_item for update items. remove_item for removing items.item_id "/platform/content/v1/products/" item_size "/platform/content/v1/products/:slug/sizes/" quantity  item quantity (must be greater than or equal to 1) article_id "/content​/v1​/products​/:identifier​/sizes​/price​/" item_index item position in the cart (must be greater than or equal to 0)
            **/
            public func platformUpdateCart(
                id: String?,
                i: Bool?,
                b: Bool?,
                buyNow: Bool?,
                body: PlatformUpdateCartRequest,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a cart.
            * Description: Delete a specific shopping cart from the system.
            **/
            public func deleteCart(
                id: String?,
                body: DeleteCartRequest,
                onResponse: @escaping (_ response: DeleteCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_archive",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get the item count in a cart.
            * Description: Retrieve the total number of items in a shopping cart.
            **/
            public func getItemCount(
                id: String?,
                buyNow: Bool?,
                
                onResponse: @escaping (_ response: CartItemCountResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/basic",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartItemCountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get app-specific coupons.
            * Description: Retrieve coupons specific to the mobile app.
            **/
            public func getAppCoupons(
                id: String?,
                buyNow: Bool?,
                slug: String?,
                storeId: String?,
                
                onResponse: @escaping (_ response: GetCouponResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = slug {
    
    xQuery["slug"] = value
    
}


if let value = storeId {
    
    xQuery["store_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCouponResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Apply a coupon to the cart.
            * Description: Apply a selected coupon to the items in the shopping cart.
            **/
            public func applyCoupon(
                i: Bool?,
                b: Bool?,
                p: Bool?,
                id: String?,
                buyNow: Bool?,
                body: ApplyCouponRequest,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = p {
    
    xQuery["p"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove a coupon from the cart.
            * Description: Remove a coupon from the items in the shopping cart.
            **/
            public func removeCoupon(
                uid: String?,
                buyNow: Bool?,
                
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = uid {
    
    xQuery["uid"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch address
            * Description: Use this API to get all the addresses associated with an account. If successful, returns a Address resource in the response body specified in GetAddressesResponse.attibutes listed below are optional uid address_id  mobile_no checkout_mode tags default
            **/
            public func getAddresses(
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                onResponse: @escaping (_ response: PlatformGetAddressesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = mobileNo {
    
    xQuery["mobile_no"] = value
    
}


if let value = checkoutMode {
    
    xQuery["checkout_mode"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = isDefault {
    
    xQuery["is_default"] = value
    
}


if let value = userId {
    
    xQuery["user_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformGetAddressesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add a new user address.
            * Description: Create and add a new user address for cart checkout.
            **/
            public func addAddress(
                body: PlatformAddress,
                onResponse: @escaping (_ response: SaveAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SaveAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch a single address by its ID
            * Description: Use this API to get an addresses using its ID. If successful, returns a Address resource in the response body specified in `PlatformAddress`. Attibutes listed below are optional mobile_no checkout_mode tags default
            **/
            public func getAddressById(
                id: String,
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                onResponse: @escaping (_ response: PlatformAddress?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = mobileNo {
    
    xQuery["mobile_no"] = value
    
}


if let value = checkoutMode {
    
    xQuery["checkout_mode"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = isDefault {
    
    xQuery["is_default"] = value
    
}


if let value = userId {
    
    xQuery["user_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformAddress.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update address.
            * Description: Modify the shipping address for an order.
            **/
            public func updateAddress(
                id: String,
                body: PlatformAddress,
                onResponse: @escaping (_ response: UpdateAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove a user address.
            * Description: Delete an existing user address from the system.
            **/
            public func removeAddress(
                id: String,
                userId: String?,
                
                onResponse: @escaping (_ response: DeleteAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = userId {
    
    xQuery["user_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select an address from available addresses
            * Description: Select Address from all addresses associated with the account in order to ship the cart items to that address, otherwise default address will be selected implicitly. See `PlatformSelectCartAddressRequest` in schema of request body for the list of attributes needed to select Address from account. On successful request, this API returns a Cart object. Below address attributes are required. address_id billing_address_id uid
            **/
            public func selectAddress(
                cartId: String?,
                buyNow: Bool?,
                i: Bool?,
                b: Bool?,
                body: PlatformSelectCartAddressRequest,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/select-address",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get delivery date and options before checkout
            * Description: Use this API to get shipment details, expected delivery date, items and price breakup of the shipment.
            **/
            public func getShipments(
                pickAtStoreUid: Int?,
                orderingStoreId: Int?,
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pickAtStoreUid {
    
    xQuery["pick_at_store_uid"] = value
    
}


if let value = orderingStoreId {
    
    xQuery["ordering_store_id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = p {
    
    xQuery["p"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = addressId {
    
    xQuery["address_id"] = value
    
}


if let value = areaCode {
    
    xQuery["area_code"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update shipment details.
            * Description: Modify the details and settings of cart shipments.
            **/
            public func updateShipments(
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                body: UpdateCartShipmentRequest,
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = i {
    
    xQuery["i"] = value
    
}


if let value = p {
    
    xQuery["p"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = addressId {
    
    xQuery["address_id"] = value
    
}


if let value = areaCode {
    
    xQuery["area_code"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart metadata.
            * Description: Modify the metadata associated with the shopping cart.
            **/
            public func updateCartMeta(
                id: String?,
                buyNow: Bool?,
                body: PlatformCartMetaRequest,
                onResponse: @escaping (_ response: CartMetaResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/meta",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Platform-specific cart checkout.
            * Description: Initiate cart checkout through platform-specific integration.
            **/
            public func platformCheckoutCart(
                id: String?,
                body: PlatformCartCheckoutDetailRequest,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get available delivery modes.
            * Description: Retrieve a list of available delivery modes for cart checkout.
            **/
            public func getAvailableDeliveryModes(
                areaCode: String,
                id: String?,
                
                onResponse: @escaping (_ response: CartDeliveryModesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["area_code"] = areaCode



if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/available-delivery-mode",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDeliveryModesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get store address by UID.
            * Description: Retrieve the store address using a unique identifier (UID).
            **/
            public func getStoreAddressByUid(
                storeUid: Int,
                
                onResponse: @escaping (_ response: StoreDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["store_uid"] = storeUid



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/store-address",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select a payment mode.
            * Description: Choose a payment mode for cart checkout.
            **/
            public func selectPaymentMode(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequest,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Validate a coupon for payment.
            * Description:  Verify the validity of a coupon code for the payment process.
            **/
            public func validateCouponForPayment(
                id: String?,
                buyNow: Bool?,
                addressId: String?,
                paymentMode: String?,
                paymentIdentifier: String?,
                aggregatorName: String?,
                merchantCode: String?,
                
                onResponse: @escaping (_ response: PaymentCouponValidate?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = addressId {
    
    xQuery["address_id"] = value
    
}


if let value = paymentMode {
    
    xQuery["payment_mode"] = value
    
}


if let value = paymentIdentifier {
    
    xQuery["payment_identifier"] = value
    
}


if let value = aggregatorName {
    
    xQuery["aggregator_name"] = value
    
}


if let value = merchantCode {
    
    xQuery["merchant_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment/validate/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCouponValidate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Platform-specific cart checkout v2.
            * Description: Initiate cart checkout through an updated platform-specific integration.
            **/
            public func platformCheckoutCartV2(
                id: String?,
                body: PlatformCartCheckoutDetailV2Request,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select a payment mode v2.
            * Description: Choose a payment mode for cart checkout in the updated platform integration.
            **/
            public func selectPaymentModeV2(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequestV2,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Catalog {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get catalog insights.
            * Description: Retrieve the count of catalog related data like products, brands, departments and categories that have been made live as per configuration of the application.
            **/
            public func getCatalogInsights(
                brand: String?,
                
                onResponse: @escaping (_ response: CatalogInsightResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = brand {
    
    xQuery["brand"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/analytics/insights/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CatalogInsightResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application brand listing.
            * Description: Retrieve brand listings related to the application. A brand is the name under which a product is being sold
            **/
            public func getApplicationBrandListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrandListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandListingPaginator(
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrandListing(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application brand.
            * Description: Modify data associated to a item custom meta.
            **/
            public func updateAppBrand(
                brandUid: String,
                body: ApplicationBrandJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand/\(brandUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application brands.
            * Description: List all the brands. A brand is the name under which a product is being sold. 
            **/
            public func getApplicationBrands(
                department: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?,
                
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = department {
    
    xQuery["department"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = brandId {
    
    xQuery["brand_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brands",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrands
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandsPaginator(
                department: String?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?
                
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrands(
                            
                            department: department,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q,
                            brandId: brandId
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get categories.
            * Description: Retrieve a list of categories. Optionally pass filter the brands by the department.
            **/
            public func getCategories(
                department: String?,
                
                onResponse: @escaping (_ response: CategoryListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = department {
    
    xQuery["department"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/categories",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CategoryListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application category listing.
            * Description: Retrieve category listings related to the application. A brand is the name under which a product is being sold.
            **/
            public func getApplicationCategoryListing(
                departmentId: Int?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = departmentId {
    
    xQuery["department_id"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationCategoryListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationCategoryListingPaginator(
                departmentId: Int?,
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationCategoryListing(
                            
                            departmentId: departmentId,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application category.
            * Description: Modify category data related to the application. Helps to update data associated to a item custom meta.
            **/
            public func updateAppCategory(
                categoryUid: String,
                body: ApplicationCategoryJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category/\(categoryUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve all collections.
            * Description: A Collection allows you to organize your products into hierarchical groups.
            **/
            public func getAllCollections(
                q: String?,
                scheduleStatus: String?,
                type: String?,
                tags: [String]?,
                isActive: Bool?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: GetCollectionListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = scheduleStatus {
    
    xQuery["schedule_status"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAllCollections
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAllCollectionsPaginator(
                q: String?,
                scheduleStatus: String?,
                type: String?,
                tags: [String]?,
                isActive: Bool?,
                pageSize: Int?
                
                ) -> Paginator<GetCollectionListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<GetCollectionListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAllCollections(
                            
                            q: q,
                            scheduleStatus: scheduleStatus,
                            type: type,
                            tags: tags,
                            isActive: isActive,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Add a Collection
            * Description: Create a collection to the catalog.
            **/
            public func createCollection(
                body: CreateCollection,
                onResponse: @escaping (_ response: CollectionCreateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CollectionCreateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get values of the selected value for the filter options.
            * Description: Get query filters keys to configure a collection
            **/
            public func getApplicationFilterValues(
                filterKey: String,
                c: String?,
                collectionId: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: GetQueryFiltersValuesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = c {
    
    xQuery["c"] = value
    
}


if let value = collectionId {
    
    xQuery["collection_id"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filterOptions/\(filterKey)/values",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersValuesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get filters keys of the filter options.
            * Description: Get query filters keys to configure a collection
            **/
            public func getApplicationFilterKeys(
                c: String?,
                
                onResponse: @escaping (_ response: GetQueryFiltersKeysResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = c {
    
    xQuery["c"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filter-options/keys",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersKeysResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve query filters.
            * Description: Retrieve query filters to configure a collection
            **/
            public func getQueryFilters(
                
                onResponse: @escaping (_ response: GetQueryFiltersResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/query-options/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a collection.
            * Description: Delete a collection by it's id. Returns an object that tells whether the collection was deleted successfully
            **/
            public func deleteCollection(
                id: String,
                
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a collection
            * Description: Update a collection by it's id. On successful request, returns the updated collection
            **/
            public func updateCollection(
                id: String,
                body: UpdateCollection,
                onResponse: @escaping (_ response: UpdateCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get the items for a collection
            * Description: Get items from a collection specified by its `id`.
            **/
            public func getCollectionItems(
                id: String,
                sortOn: String?,
                pageId: String?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: GetCollectionItemsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = sortOn {
    
    xQuery["sort_on"] = value
    
}


if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionItemsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add items to a collection
            * Description: Adds items to a collection specified by its `id`. See `CollectionItemRequest` for the list of attributes needed to add items to an collection.
            **/
            public func addCollectionItems(
                id: String,
                body: CollectionItemUpdateSchema,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get collection details.
            * Description: Get the details of a collection by its slug.
            **/
            public func getCollectionDetail(
                slug: String,
                
                onResponse: @escaping (_ response: GetCollectionDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(slug)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application department listing.
            * Description: Retrieve department listings related to the application. Departments are a way to categorise similar products. A product can lie in multiple departments.
            **/
            public func getApplicationDepartmentListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: ApplicationDepartmentListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDepartmentListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationDepartmentListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationDepartmentListingPaginator(
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<ApplicationDepartmentListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationDepartmentListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationDepartmentListing(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application department.
            * Description: Modify department data related to the application.
            **/
            public func updateAppDepartment(
                departmentUid: String,
                body: ApplicationDepartmentJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department/\(departmentUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get departments.
            * Description: Retrieve a list of departments. Departments are a way to categorise similar products. A product can lie in multiple departments.
            **/
            public func getDepartments(
                
                onResponse: @escaping (_ response: DepartmentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/departments",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DepartmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application inventory.
            * Description: Retrieve inventory data related to the application. Retrieve the available Inventory of the products. Use this API to get the Inventory status of products with the filters of timestamp, store_ids, brand_ids, item_id, Items, Pagination
            **/
            public func getAppInventory(
                itemIds: [Int]?,
                storeIds: [Int]?,
                brandIds: [Int]?,
                sellerIdentifiers: [String]?,
                timestamp: String?,
                pageSize: Int?,
                pageId: String?,
                
                onResponse: @escaping (_ response: InventoryStockResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


if let value = storeIds {
    
    xQuery["store_ids"] = value
    
}


if let value = brandIds {
    
    xQuery["brand_ids"] = value
    
}


if let value = sellerIdentifiers {
    
    xQuery["seller_identifiers"] = value
    
}


if let value = timestamp {
    
    xQuery["timestamp"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageId {
    
    xQuery["page_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/inventory/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventoryStockResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application locations.
            * Description: Retrieve locations specific to the application. View all the locations asscoiated to a application.
            **/
            public func getAppLocations(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageNo: Int?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                
                onResponse: @escaping (_ response: LocationListSerializer?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = storeType {
    
    xQuery["store_type"] = value
    
}


if let value = uid {
    
    xQuery["uid"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = stage {
    
    xQuery["stage"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = storeTypes {
    
    xQuery["store_types"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/locations",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LocationListSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppLocations
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppLocationsPaginator(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?
                
                ) -> Paginator<LocationListSerializer> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<LocationListSerializer>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppLocations(
                            
                            storeType: storeType,
                            uid: uid,
                            q: q,
                            stage: stage,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            tags: tags,
                            storeTypes: storeTypes
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Retrieve configurations.
            * Description: Retrieve a configured details for catalog.
            **/
            public func getConfigurations(
                
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create configuration for product listing.
            * Description: Add configuration for products & listing.
            **/
            public func createConfigurationProductListing(
                body: AppConfiguration,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve catalog configuration.
            * Description: Retrieve configuration meta details for the catalog.
            **/
            public func getCatalogConfiguration(
                
                onResponse: @escaping (_ response: GetCatalogConfigurationMetaData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/metadata/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCatalogConfigurationMetaData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve configuration by type.
            * Description: Retrieve configuration details based on a specific type in the catalog.
            **/
            public func getConfigurationByType(
                type: String,
                
                onResponse: @escaping (_ response: GetAppCatalogEntityConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(type)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogEntityConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create configuration by type.
            * Description: Add configuration for categories & brands.
            **/
            public func createConfigurationByType(
                type: String,
                body: AppConfiguration,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(type)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve application product data.
            * Description: Products are the core resource of an application. If successful, returns a Company Application Product resource in the response body depending upon filter sent.
            **/
            public func getAppProduct(
                itemId: String,
                
                onResponse: @escaping (_ response: OwnerAppItemResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OwnerAppItemResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application product data.
            * Description: Allows to update data associated to a item custom meta.
            **/
            public func updateAppProduct(
                itemId: String,
                body: ApplicationItemMeta,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application products.
            * Description: Retrieve products associated with the application. List all the products associated with a brand, collection or category in a requested sort order.
            **/
            public func getAppicationProducts(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageId: String?,
                pageSize: Int?,
                pageNo: Int?,
                pageType: String?,
                itemIds: [Int]?,
                
                onResponse: @escaping (_ response: ApplicationProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = f {
    
    xQuery["f"] = value
    
}


if let value = c {
    
    xQuery["c"] = value
    
}


if let value = filters {
    
    xQuery["filters"] = value
    
}


if let value = isDependent {
    
    xQuery["is_dependent"] = value
    
}


if let value = sortOn {
    
    xQuery["sort_on"] = value
    
}


if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageType {
    
    xQuery["page_type"] = value
    
}


if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppicationProducts
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppicationProductsPaginator(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageSize: Int?,
                itemIds: [Int]?
                
                ) -> Paginator<ApplicationProductListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationProductListingResponse>(pageSize: pageSize, type: "cursor")
                paginator.onPage = {
                    self.getAppicationProducts(
                            
                            q: q,
                            f: f,
                            c: c,
                            filters: filters,
                            isDependent: isDependent,
                            sortOn: sortOn,
                            pageId: paginator.pageId
                            ,
                            pageSize: paginator.pageSize
                            ,
                            pageNo: paginator.pageNo
                            ,
                            pageType: paginator.type
                            ,
                            itemIds: itemIds
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageId = response.page.nextId
                            
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get discounted inventory by size identifier.
            * Description: Allows to retrieve Inventory data for particular company grouped by size and store.
            **/
            public func getDiscountedInventoryBySizeIdentifier(
                itemId: Int,
                sizeIdentifier: String,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                locationIds: [Int]?,
                
                onResponse: @escaping (_ response: InventorySellerIdentifierResponsePaginated?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = locationIds {
    
    xQuery["location_ids"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(itemId)/inventory/\(sizeIdentifier)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventorySellerIdentifierResponsePaginated.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getDiscountedInventoryBySizeIdentifier
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getDiscountedInventoryBySizeIdentifierPaginator(
                itemId: Int,
                sizeIdentifier: String,
                pageSize: Int?,
                q: String?,
                locationIds: [Int]?
                
                ) -> Paginator<InventorySellerIdentifierResponsePaginated> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<InventorySellerIdentifierResponsePaginated>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getDiscountedInventoryBySizeIdentifier(
                            
                            itemId: itemId,
                            sizeIdentifier: sizeIdentifier,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q,
                            locationIds: locationIds
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get product details by slug.
            * Description: Retrieve detailed product information using a product slug. Products are the core resource of an application. Products can be associated by categories, collections, brands and more.
            **/
            public func getProductDetailBySlug(
                slug: String,
                
                onResponse: @escaping (_ response: ProductDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application products.
            * Description: Retrieve products specific to the application. Products are the core resource of an application. Products can be associated by categories, collections, brands and more.
            **/
            public func getAppProducts(
                brandIds: [Int]?,
                categoryIds: [Int]?,
                departmentIds: [Int]?,
                tags: [String]?,
                itemIds: [Int]?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: RawProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = brandIds {
    
    xQuery["brand_ids"] = value
    
}


if let value = categoryIds {
    
    xQuery["category_ids"] = value
    
}


if let value = departmentIds {
    
    xQuery["department_ids"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/raw-products/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RawProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppProducts
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppProductsPaginator(
                brandIds: [Int]?,
                categoryIds: [Int]?,
                departmentIds: [Int]?,
                tags: [String]?,
                itemIds: [Int]?,
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<RawProductListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<RawProductListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppProducts(
                            
                            brandIds: brandIds,
                            categoryIds: categoryIds,
                            departmentIds: departmentIds,
                            tags: tags,
                            itemIds: itemIds,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get Return configuration level set for an application
            * Description: Get Product Return configuration set at an application level
            **/
            public func getAppReturnConfiguration(
                
                onResponse: @escaping (_ response: AppReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Return configuration level set for an application
            * Description: Create Return configuration level set for an application.
            **/
            public func createAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Return configuration level set for an application
            * Description: Update Return configuration level set for an application.
            **/
            public func updateAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete Category level Application Return Configuration setttings
            * Description: Delete Category level Application Return Configuration setttings
            **/
            public func deleteAppCategoryReturnConfiguration(
                body: DeleteAppCategoryReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all category level configuration level set for an application
            * Description: Get all category level configuration level set for an application.
            **/
            public func getAppCategoryReturnConfig(
                
                onResponse: @escaping (_ response: BaseAppCategoryReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BaseAppCategoryReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Category level Application Return Configuration setttings
            * Description: Create Category level Application Return Configuration setttings
            **/
            public func createAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Category level Application Return Configuration setttings
            * Description: Update Category level Application Return Configuration setttings
            **/
            public func updateAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get autocomplete configuration.
            * Description: Custom Autocomplete Keyword allows you to map conditions with keywords to give you the ultimate results
            **/
            public func getAutocompleteConfig(
                
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom autocomplete rules.
            * Description: Generate and add custom autocomplete rules to the catalog.
            **/
            public func createCustomAutocompleteRule(
                body: CreateAutocompleteKeyword,
                onResponse: @escaping (_ response: CreateAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete autocomplete keywords.
            * Description: Delete a keywords by it's id. Returns an object that tells whether the keywords was deleted successfully
            **/
            public func deleteAutocompleteKeyword(
                id: String,
                
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get autocomplete keyword details.
            * Description: Retrieve detailed information about a specific autocomplete keyword.
            **/
            public func getAutocompleteKeywordDetail(
                id: String,
                
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update autocomplete keywords.
            * Description: Update a mapping by it's id. On successful request, returns the updated Keyword mapping
            **/
            public func updateAutocompleteKeyword(
                id: String,
                body: CreateAutocompleteKeyword,
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete Search Configuration
            * Description: Delete search configuration in the catalog.
            **/
            public func deleteSearchConfiguration(
                
                onResponse: @escaping (_ response: DeleteSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Search Configuration
            * Description: Get search configuration in the catalog.
            **/
            public func getSearchConfiguration(
                
                onResponse: @escaping (_ response: GetSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create search configuration
            * Description: Create search configuration for the catalog.
            **/
            public func createSearchConfiguration(
                body: CreateSearchConfigurationRequest,
                onResponse: @escaping (_ response: CreateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update search configuration for an application
            * Description: This view allows you to modify searchable attributes for an application
            **/
            public func updateSearchConfiguration(
                body: UpdateSearchConfigurationRequest,
                onResponse: @escaping (_ response: UpdateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all search keywords.
            * Description: Custom Search Keyword allows you to map conditions with keywords to give you the ultimate results
            **/
            public func getAllSearchKeyword(
                
                onResponse: @escaping (_ response: GetSearchWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom search keywords.
            * Description: Create a Custom Search Keywords. 
            **/
            public func createCustomKeyword(
                body: CreateSearchKeyword,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete search keywords.
            * Description: Delete a keywords by it's id. Returns an object that tells whether the keywords was deleted successfully
            **/
            public func deleteSearchKeywords(
                id: String,
                
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve search keywords.
            * Description: Retrieve a list of search keywords from the catalog.
            **/
            public func getSearchKeywords(
                id: String,
                
                onResponse: @escaping (_ response: GetSearchWordsDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update search keywords.
            * Description: Update Search Keyword by its id. On successful request, returns the updated collection
            **/
            public func updateSearchKeywords(
                id: String,
                body: CreateSearchKeyword,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application location.
            * Description: Modify location data related to the application. Helps to update data associated to a item custom meta
            **/
            public func updateAppLocation(
                storeUid: String,
                body: ApplicationStoreJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/store/\(storeUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update 'Allow Single' setting.
            * Description: Modify allow single flag for filters of the application.
            **/
            public func updateAllowSingle(
                body: AllowSingleRequest,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/filter/allow_single",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update default sorting.
            * Description: Modify the default sort key configuration for the application.
            **/
            public func updateDefaultSort(
                body: DefaultKeyRequest,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/sort/default_key",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve listing configurations.
            * Description: Retrieve the details of the application configured configurations of listing config types.
            **/
            public func getListingConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                
                onResponse: @escaping (_ response: GetConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create listing configuration.
            * Description: Add configuration for catalog listing.
            **/
            public func createListingConfiguration(
                configType: String,
                body: AppConfigurationsSort,
                onResponse: @escaping (_ response: AppConfigurationsSort?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsSort.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve group configurations.
            * Description: Retrieve the details of the application configured configurations of group config types.
            **/
            public func getGroupConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                templateSlug: String?,
                
                onResponse: @escaping (_ response: GetConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


if let value = templateSlug {
    
    xQuery["template_slug"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create group configuration.
            * Description: Create configuration for group configuration types.
            **/
            public func createGroupConfiguration(
                configType: String,
                body: AppConfigurationDetail,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete group configuration.
            * Description: Delete configuration of the product config type of the application.
            **/
            public func deleteGroupConfiguration(
                configType: String,
                groupSlug: String,
                
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update group configuration.
            * Description: Modify the group configurations for the application.
            **/
            public func updateGroupConfiguration(
                configType: String,
                groupSlug: String,
                body: AppConfigurationDetail,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete listing configuration.
            * Description: Remove a specific listing configuration from the catalog.
            **/
            public func deleteListingConfiguration(
                configType: String,
                configId: String,
                
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/item/\(configId)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update listing configuration.
            * Description: Modify the details and settings of an existing listing configuration.
            **/
            public func updateListingConfiguration(
                configType: String,
                configId: String,
                body: AppConfigurationsSort,
                onResponse: @escaping (_ response: AppConfigurationsSort?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/item/\(configId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsSort.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve configuration metadata.
            * Description: Retrieve the configuraion metadata details for catalog.
            **/
            public func getConfigurationMetadata(
                configType: String,
                templateSlug: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: GetConfigMetadataResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = templateSlug {
    
    xQuery["template_slug"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/metadata/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigMetadataResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }
        
        
            
        public class Communication {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get application providers.
            * Description: Retrieve a list of providers associated with the platform.
            **/
            public func getAppProviders(
                
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/get-provider",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application providers.
            * Description: Modify provider information for the platform.
            **/
            public func updateAppProviders(
                body: AppProviderReq,
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/update-provider",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get global providers.
            * Description: Retrieve a list of global communication providers.
            **/
            public func getGlobalProviders(
                
                onResponse: @escaping (_ response: GlobalProviders?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/global-providers",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email providers.
            * Description: Retrieve a list of email communication providers.
            **/
            public func getEmailProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: EmailProviders?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create email provider.
            * Description: Generate and add a new email communication provider.
            **/
            public func createEmailProvider(
                body: EmailProviderReq,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email provider by ID.
            * Description: Retrieve detailed information about a specific email communication provider.
            **/
            public func getEmailProviderById(
                id: String,
                
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update email provider by ID.
            * Description: Modify the settings of a specific email communication provider.
            **/
            public func updateEmailProviderById(
                id: String,
                body: EmailProviderReq,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete email provider by ID.
            * Description: Remove a specific email communication provider from the platform.
            **/
            public func deleteEmailProviderById(
                id: String,
                
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS providers.
            * Description: Retrieve a list of SMS communication providers.
            **/
            public func getSmsProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create SMS provider.
            * Description: Add a new SMS communication provider.
            **/
            public func createSmsProvider(
                body: SmsProviderReq,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default SMS providers.
            * Description: Retrieve the default SMS communication providers.
            **/
            public func getDefaultSmsProviders(
                
                onResponse: @escaping (_ response: [DefaultSmsProviders]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/default-providers",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DefaultSmsProviders].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS provider by ID.
            * Description: Retrieve detailed information about a specific SMS communication provider.
            **/
            public func getSmsProviderById(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update SMS provider by ID.
            * Description: Modify specific SMS communication provider.
            **/
            public func updateSmsProviderById(
                id: String,
                body: SmsProviderReq,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete SMS provider by ID.
            * Description: Remove a specific SMS communication provider.
            **/
            public func deleteSmsProviderById(
                id: String,
                
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get campaigns.
            * Description: Retrieve a list of communication campaigns.
            **/
            public func getCampaigns(
                query: [String: Any]?,
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                
                onResponse: @escaping (_ response: Campaigns?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = query {
    
    xQuery["query"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaigns.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create campaign.
            * Description: Add a new communication campaign.
            **/
            public func createCampaign(
                body: CampaignReq,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get campaign by ID.
            * Description: Retrieve detailed information about a specific communication campaign.
            **/
            public func getCampaignById(
                id: String,
                
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update campaign by ID.
            * Description: Modify the settings of a specific communication campaign.
            **/
            public func updateCampaignById(
                id: String,
                body: CampaignReq,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get campaign statistics by ID.
            * Description: Retrieve statistical data for a specific communication campaign.
            **/
            public func getStatsOfCampaignById(
                id: String,
                
                onResponse: @escaping (_ response: GetStats?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/getStats/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStats.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get BigQuery row count by ID.
            * Description: Retrieve big query row count by id
            **/
            public func getBigQueryRowCountById(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigqueryRowCount/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create BigQuery row count.
            * Description: Create big query row count
            **/
            public func createBigQueryRowCount(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-row-count",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get BigQuery headers by ID.
            * Description: Retrieve header information from BigQuery for a specific campaign.
            **/
            public func getBigQueryHeadersById(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigqueryHeaders/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create BigQuery N-count.
            * Description: Create big query n count
            **/
            public func createBigQueryNCount(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-n-records",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create BigQuery headers.
            * Description: Create big query headers
            **/
            public func createBigQueryHeaders(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-headers",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get system audiences.
            * Description: Retrieve system-defined audiences for communication.
            **/
            public func getSystemAudiences(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/system-datasources",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get audiences.
            * Description: Audience is used to import CSV files containing emails, phone numbers, and other variables in order to populate email/SMS templates for bulk delivery via a Campaign.
            **/
            public func getAudiences(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: Audiences?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audiences.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create audience.
            * Description: Add audience which is used to import CSV files containing emails, phone numbers, and other variables in order to populate email/SMS templates for bulk delivery via a Campaign. 
            **/
            public func createAudience(
                body: AudienceReq,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get audience by ID.
            * Description: Retrieve detailed information about a specific custom communication audience.
            **/
            public func getAudienceById(
                id: String,
                
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update audience by ID.
            * Description: Modify the settings of a specific custom communication audience.
            **/
            public func updateAudienceById(
                id: String,
                body: AudienceReq,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete audience by ID.
            * Description: Remove a specific custom communication audience.
            **/
            public func deleteAudienceById(
                id: String,
                body: AudienceReq,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get dummy data sources.
            * Description: Retrieve a list of dummy data sources for testing.
            **/
            public func getDummyDatasources(
                
                onResponse: @escaping (_ response: [DummyDatasources]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/dummy-data-sources",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DummyDatasources].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get dummy data sources metadata.
            * Description: Retrieve metadata information about dummy data sources.
            **/
            public func getDummyDatasourcesMeta(
                id: Int,
                
                onResponse: @escaping (_ response: DummyDatasourcesMeta?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/dummyDataSourcesMeta/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyDatasourcesMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get N sample records in CSV 
            * Description: Retrieve a specified number of sample records from a CSV data source using a GET request.
            **/
            public func getNSampleRecordsFromCsvByGet(
                
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get N sample records from CSV.
            * Description: Retrieve a specified number of sample records from a CSV data source.
            **/
            public func getNSampleRecordsFromCsv(
                body: GetNRecordsCsvReq,
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email templates.
            * Description: Retrieve a list of available email communication templates.
            **/
            public func getEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: EmailTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create email template.
            * Description: Generate and add a new email communication template.
            **/
            public func createEmailTemplate(
                body: EmailTemplateReq,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get system email templates.
            * Description: Retrieve system-defined email communication templates.
            **/
            public func getSystemEmailTemplates(
                
                onResponse: @escaping (_ response: SystemEmailTemplates?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/system-templates",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SystemEmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email template by ID.
            * Description: Retrieve detailed information about a specific email communication template.
            **/
            public func getEmailTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update email template by ID.
            * Description: Modify the content and settings of a specific email communication template.
            **/
            public func updateEmailTemplateById(
                id: String,
                body: EmailTemplateReq,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete email template by ID.
            * Description: Email templates are predefined formats linked to various events for delivering messages to users. Remove a specific email communication template by its ID.
            **/
            public func deleteEmailTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get subscribed email templates.
            * Description: Retrieve email communication templates that are subscribed to.
            **/
            public func getSubscribedEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: EmailTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS templates.
            * Description: Retrieve a list of available SMS communication templates.
            **/
            public func getSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: SmsTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create SMS template.
            * Description: Add a new SMS communication template.
            **/
            public func createSmsTemplate(
                body: SmsTemplateReq,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get system SMS templates.
            * Description: Retrieve system-defined SMS communication templates.
            **/
            public func getSystemSmsTemplates(
                
                onResponse: @escaping (_ response: [SystemSmsTemplates]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/system-templates",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([SystemSmsTemplates].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS template by ID.
            * Description: Retrieve detailed information about a specific SMS communication template.
            **/
            public func getSmsTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update SMS template by ID.
            * Description: Modify the content and settings of a specific SMS communication template.
            **/
            public func updateSmsTemplateById(
                id: String,
                body: SmsTemplateReq,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete SMS template by ID.
            * Description: Remove a specific SMS communication template.
            **/
            public func deleteSmsTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get subscribed SMS templates.
            * Description: Retrieve SMS communication templates that are subscribed to.
            **/
            public func getSubscribedSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: SmsTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Send communication synchronously.
            * Description: Initiate and send communication in real-time.
            **/
            public func sendCommunicationSynchronously(
                body: EngineRequest,
                onResponse: @escaping (_ response: EngineResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-instant",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EngineResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Send communication asynchronously.
            * Description: Initiate and send communication with the option for asynchronous processing.
            **/
            public func sendCommunicationAsynchronously(
                body: EngineRequest,
                onResponse: @escaping (_ response: EngineResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-async",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EngineResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get event subscriptions.
            * Description: Retrieve a list of event subscriptions related to communication.
            **/
            public func getEventSubscriptions(
                pageNo: Int?,
                pageSize: Int?,
                populate: String?,
                
                onResponse: @escaping (_ response: EventSubscriptions?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = populate {
    
    xQuery["populate"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptions.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func createEventSubscriptions(
                body: SubscriptionsObject,
                onResponse: @escaping (_ response: EventSubscriptionsBulkUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptionsBulkUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get event subscriptions by id
            * Description: Get event subscriptions by id
            **/
            public func getEventSubscriptionsById(
                id: String,
                populate: String?,
                
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = populate {
    
    xQuery["populate"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/eventSubscriptions/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func editEventSubscriptions(
                id: String,
                body: SubscriptionsObject,
                onResponse: @escaping (_ response: EventSubscriptionsBulkUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/eventSubscriptions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptionsBulkUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func deleteEventSubscriptionsById(
                id: String,
                
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/eventSubscriptions/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions by bulk
            * Description: Create event subscriptions by bulk
            **/
            public func createEventSubscriptionsByBulk(
                body: EventSubscriptionsBulkUpdateRequest,
                onResponse: @escaping (_ response: [EventSubscriptionsBulkUpdateResponse]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/bulkUpdate",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([EventSubscriptionsBulkUpdateResponse].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get global variables.
            * Description: Retrieve global variables used in communication.
            **/
            public func getGlobalVariables(
                
                onResponse: @escaping (_ response: GlobalVariablesGetResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Post global variables.
            * Description: Update and post global variables for communication.
            **/
            public func postGlobalVariables(
                body: GlobalVariablesReq,
                onResponse: @escaping (_ response: GlobalVariablesPostResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesPostResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get jobs.
            * Description: Retrieve a list of communication jobs.
            **/
            public func getJobs(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: Jobs?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Jobs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create jobs
            * Description: Create jobs
            **/
            public func createJobs(
                body: CreateJobsReq,
                onResponse: @escaping (_ response: CreateJobsRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateJobsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Trigger campaign job.
            * Description: Initiate a job to execute a communication campaign.
            **/
            public func triggerCampaignJob(
                body: TriggerJobRequest,
                onResponse: @escaping (_ response: TriggerJobResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/trigger-job",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TriggerJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get job logs.
            * Description: Retrieve logs and details related to communication jobs.
            **/
            public func getJobLogs(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: JobLogs?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/logs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(JobLogs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get communication logs.
            * Description: Retrieve logs and records of communication activities.
            **/
            public func getCommunicationLogs(
                pageId: String?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: Logs?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/log",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Logs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Send OTP.
            * Description: Send a one-time password (OTP) for authentication or verification.
            **/
            public func sendOtp(
                body: SendOtpCommsReq,
                onResponse: @escaping (_ response: SendOtpCommsRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/send-otp-comms",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendOtpCommsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Verify OTP.
            * Description: Verify the one-time password (OTP) for authentication or verification.
            **/
            public func verfiyOtp(
                body: VerifyOtpCommsReq,
                onResponse: @escaping (_ response: VerifyOtpCommsSuccessRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/verify-otp-comms",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(VerifyOtpCommsSuccessRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get otp-configuration, if not present in db then return default settings
            * Description: Get otp-configuration
            **/
            public func getOtpConfiguration(
                
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update/insert otp configurations
            * Description: Update otp-configuration
            **/
            public func updateOtpConfiguration(
                
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Configuration {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get build configuration.
            * Description: Retrieve latest build configuration, such as app name, landing page image, splash image used in a mobile build.
            **/
            public func getBuildConfig(
                platformType: String,
                
                onResponse: @escaping (_ response: MobileAppConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MobileAppConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update build configuration.
            * Description: Modify the existing build configuration, such as app name, landing page image, splash image used in a mobile build.
            **/
            public func updateBuildConfig(
                platformType: String,
                body: MobileAppConfigRequest,
                onResponse: @escaping (_ response: MobileAppConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MobileAppConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get previous versions.
            * Description: Retrieve version details of the app, this includes the build status, build date, version name, latest version, and a lot more.
            **/
            public func getPreviousVersions(
                platformType: String,
                
                onResponse: @escaping (_ response: BuildVersionHistory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/versions",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BuildVersionHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application features.
            * Description: Shows feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func getAppFeatures(
                
                onResponse: @escaping (_ response: AppFeatureResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeatureResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application features.
            * Description: Modify the feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func updateAppFeatures(
                body: AppFeatureRequest,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Modify application features.
            * Description: Update features of application
            **/
            public func modifyAppFeatures(
                body: AppFeatureRequest,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application basic details.
            * Description: Shows basic sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func getAppBasicDetails(
                
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application basic details.
            * Description: Modify sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func updateAppBasicDetails(
                body: ApplicationDetail,
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application contact information.
            * Description: Fetch data such as social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the application.
            **/
            public func getAppContactInfo(
                
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application contact information.
            * Description: Modify the social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the application.
            **/
            public func updateAppContactInfo(
                body: ApplicationInformation,
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application API tokens.
            * Description: Retrieve the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google, and Facebook auth. 
            **/
            public func getAppApiTokens(
                
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application API tokens.
            * Description: Add or edit the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google and Facebook auth.
            **/
            public func updateAppApiTokens(
                body: TokenResponse,
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application companies.
            * Description: Retrieve info of all the companies (e.g. name, uid, and company type) whose inventory is fetched into the current sales channel application
            **/
            public func getAppCompanies(
                uid: Int?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: CompaniesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = uid {
    
    xQuery["uid"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/companies",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompaniesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application stores.
            * Description: Retrieve information of all the companies (e.g. uid, name, display name, store type, store code and company id) whose inventory is fetched into the current sales channel application
            **/
            public func getAppStores(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: StoresResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/stores",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get inventory configuration.
            * Description: Retrieve configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func getInventoryConfig(
                
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update inventory configuration.
            * Description: Modify the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func updateInventoryConfig(
                body: ApplicationInventory,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Partially update inventory configuration.
            * Description: Partially update the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func partiallyUpdateInventoryConfig(
                body: AppInventoryPartialUpdate,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application currency configuration.
            * Description: Retrieve a list of currencies supported in the current sales channel. Moreover, get the cuurency that is set as the default one in the application.
            **/
            public func getAppCurrencyConfig(
                
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application currency configuration.
            * Description: Modify currency configuration settings for the application. Add and edit the currencies supported in the application. Initially, INR will be enabled by default.
            **/
            public func updateAppCurrencyConfig(
                body: AppSupportedCurrency,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get supported currencies.
            * Description: Retrieve a list of supported currencies for the application. A list of currencies allowed in the current application. Moreover, get the name, code, symbol, and the decimal digits of the currencies.
            **/
            public func getAppSupportedCurrency(
                
                onResponse: @escaping (_ response: AppCurrencyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency/supported",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppCurrencyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get ordering stores by filter.
            * Description: Retrieve ordering stores based on specified filters. Use filters and retrieve the details of the deployment stores (the selling locations where the application will be utilised for placing orders).
            **/
            public func getOrderingStoresByFilter(
                pageNo: Int?,
                pageSize: Int?,
                body: FilterOrderingStoreRequest,
                onResponse: @escaping (_ response: OrderingStores?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/stores/filter",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStores.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update ordering store configuration.
            * Description: Modify configuration settings for ordering stores. Edit the details of the deployment stores (the selling locations where the application will be utilised for placing orders)
            **/
            public func updateOrderingStoreConfig(
                body: OrderingStoreConfig,
                onResponse: @escaping (_ response: DeploymentMeta?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeploymentMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get ordering store configuration.
            * Description: Retrieve configuration settings for ordering stores. Retrieve the details of the deployment stores (the selling locations where the application will be utilised for placing orders).
            **/
            public func getOrderingStoreConfig(
                
                onResponse: @escaping (_ response: OrderingStoreConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoreConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get staff ordering stores.
            * Description: Retrieve ordering stores accessible to staff members. Retrieve the details of all stores access given to the staff member (the selling locations where the application will be utilized for placing orders).
            **/
            public func getStaffOrderingStores(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: OrderingStoresResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/staff-stores",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get an Ordering Store signed cookie on selection of ordering store.
            * Description: Use this API to get an Ordering Store signed cookie upon selecting an ordering store. This will be used by the cart service to verify a coupon against the selected ordering store in cart.
            **/
            public func getOrderingStoreCookie(
                body: OrderingStoreSelectRequest,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Unset the Ordering Store signed cookie.
            * Description: Use this API to unset the Ordering Store cookie upon changing the sales channel, by its domain URL, in the Universal Fynd Store app.
            **/
            public func removeOrderingStoreCookie(
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get domains.
            * Description: Get list of domains. 
            **/
            public func getDomains(
                
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add domain.
            * Description: Add a new domain. Add a new domain to current sales channel, including pre-defined domain (free domain) or custom domain (owned by the brand)
            **/
            public func addDomain(
                body: DomainAddRequest,
                onResponse: @escaping (_ response: Domain?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Domain.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove domain by ID.
            * Description: Delete a specific domain from the application. Delete a domain (secondary or shortlink domain) added to a sales channel. It will disable user's access to website, shared links, and other features associated with this domain.
            **/
            public func removeDomainById(
                id: String,
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Change domain type.
            * Description: Modify the type of a specific domain. Primary domain is used as the URL of your website. Short link domain is comparatively smaller and used while generating short links.
            **/
            public func changeDomainType(
                body: UpdateDomainTypeRequest,
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/set-domain",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get domain status.
            * Description: Retrieve the status of a specific domain. Shows if the A records and TXT records of the domain correctly points to appropriate IP on Fynd Servers.
            **/
            public func getDomainStatus(
                body: DomainStatusRequest,
                onResponse: @escaping (_ response: DomainStatusResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/domain-status",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainStatusResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get application by ID.
            * Description: Retrieve detailed information about a specific application. Use application ID to get the current sales channel details which includes channel name, description, banner, logo, favicon, domain details, token, etc.
            **/
            public func getApplicationById(
                
                onResponse: @escaping (_ response: ApplicationById?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }
        
        
            
        public class Content {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get announcements list.
            * Description: Retrieve a list of announcements.
            **/
            public func getAnnouncementsList(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: GetAnnouncementListSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAnnouncementListSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create announcement.
            * Description: Generate and add a new announcement.
            **/
            public func createAnnouncement(
                body: AdminAnnouncementSchema,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get announcement by ID.
            * Description: Retrieve detailed information about a specific announcement.
            **/
            public func getAnnouncementById(
                announcementId: String,
                
                onResponse: @escaping (_ response: AdminAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AdminAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update announcement.
            * Description: Modify the content and settings of a specific announcement.
            **/
            public func updateAnnouncement(
                announcementId: String,
                body: AdminAnnouncementSchema,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update announcement schedule.
            * Description: Modify the scheduling of a specific announcement.
            **/
            public func updateAnnouncementSchedule(
                announcementId: String,
                body: ScheduleSchema,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete announcement.
            * Description: Remove a specific announcement.
            **/
            public func deleteAnnouncement(
                announcementId: String,
                
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create blog.
            * Description: Generate and add a new blog.
            **/
            public func createBlog(
                body: BlogRequest,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get blogs.
            * Description: Retrieve a list of available blogs.
            **/
            public func getBlogs(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: BlogGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update blog.
            * Description: Modify the content and settings of a specific blog.
            **/
            public func updateBlog(
                id: String,
                body: BlogRequest,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete blog.
            * Description: Remove a specific blog.
            **/
            public func deleteBlog(
                id: String,
                
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get component by ID.
            * Description: Retrieve detailed information about a specific component.
            **/
            public func getComponentById(
                slug: String,
                
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add data loader.
            * Description: Create and add a new data loader.
            **/
            public func addDataLoader(
                body: DataLoaderSchema,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get data loaders.
            * Description: Retrieve a list of data loaders.
            **/
            public func getDataLoaders(
                
                onResponse: @escaping (_ response: DataLoadersSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoadersSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete data loader.
            * Description: Remove a specific data loader.
            **/
            public func deleteDataLoader(
                dataLoaderId: String,
                
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(dataLoaderId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Edit data loader.
            * Description: Modify the settings of a specific data loader.
            **/
            public func editDataLoader(
                dataLoaderId: String,
                body: DataLoaderSchema,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(dataLoaderId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all the data loaders in an application by service name
            * Description: Use this to get all data loaders of an application by service name
            **/
            public func getDataLoadersByService(
                serviceName: String,
                
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/service/\(serviceName)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select data loader.
            * Description: Choose and set a data loader for use.
            **/
            public func selectDataLoader(
                dataLoaderId: String,
                
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(dataLoaderId)/select",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Reset data loader.
            * Description: Clear and reset data loader settings.
            **/
            public func resetDataLoader(
                service: String,
                operationId: String,
                
                onResponse: @escaping (_ response: DataLoaderResetResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(service)/\(operationId)/reset",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResetResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQ categories.
            * Description: Retrieve a list of FAQ categories.
            **/
            public func getFaqCategories(
                
                onResponse: @escaping (_ response: GetFaqCategoriesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/categories",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoriesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQ category by slug or ID.
            * Description: Retrieve detailed information about a specific FAQ category.
            **/
            public func getFaqCategoryBySlugOrId(
                idOrSlug: String,
                
                onResponse: @escaping (_ response: GetFaqCategoryBySlugSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoryBySlugSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create FAQ category.
            * Description: Generate and add a new FAQ category.
            **/
            public func createFaqCategory(
                body: CreateFaqCategoryRequestSchema,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update FAQ category.
            * Description: Modify the content and settings of a specific FAQ category.
            **/
            public func updateFaqCategory(
                id: String,
                body: UpdateFaqCategoryRequestSchema,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete FAQ category.
            * Description: Remove a specific FAQ category.
            **/
            public func deleteFaqCategory(
                id: String,
                
                onResponse: @escaping (_ response: FaqSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FaqSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQs by category ID or slug.
            * Description: Retrieve a list of FAQs within a specific category.
            **/
            public func getFaqsByCategoryIdOrSlug(
                idOrSlug: String,
                
                onResponse: @escaping (_ response: GetFaqSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)/faqs",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add FAQ.
            * Description: Create and add a new FAQ.
            **/
            public func addFaq(
                categoryId: String,
                body: CreateFaqSchema,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update FAQ.
            * Description: Modify the content and settings of a specific FAQ.
            **/
            public func updateFaq(
                categoryId: String,
                faqId: String,
                body: CreateFaqSchema,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete FAQ.
            * Description: Remove a specific FAQ.
            **/
            public func deleteFaq(
                categoryId: String,
                faqId: String,
                
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQ by ID or slug.
            * Description: Retrieve detailed information about a specific FAQ.
            **/
            public func getFaqByIdOrSlug(
                idOrSlug: String,
                
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Generate SEO title.
            * Description: Create an SEO-friendly title for content.
            **/
            public func generateSEOTitle(
                type: GenerationEntityType,
                body: GenerateSEOContent,
                onResponse: @escaping (_ response: GeneratedSEOContent?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/generateSeo/\(type)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeneratedSEOContent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get landing pages.
            * Description: Retrieve a list of landing pages.
            **/
            public func getLandingPages(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: LandingPageGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create landing page.
            * Description: Generate and add a new landing page.
            **/
            public func createLandingPage(
                body: LandingPageSchema,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update landing page.
            * Description: Modify the content and settings of a specific landing page.
            **/
            public func updateLandingPage(
                id: String,
                body: LandingPageSchema,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landingPage/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete landing page.
            * Description: Remove a specific landing page.
            **/
            public func deleteLandingPage(
                id: String,
                
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landingPage/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get legal related information for applicaiton
            * Description: Retrieve legal information and terms.
            **/
            public func getLegalInformation(
                
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update legal related information for application
            * Description: Modify legal information and terms.
            **/
            public func updateLegalInformation(
                body: ApplicationLegal,
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get navigation items
            * Description: Retrieve a list of navigational elements.
            **/
            public func getNavigations(
                devicePlatform: String,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: NavigationGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["device_platform"] = devicePlatform



if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create navigation items
            * Description: Generate and add a new navigation element.
            **/
            public func createNavigation(
                body: NavigationRequest,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default navigations.
            * Description: Retrieve default navigation elements.
            **/
            public func getDefaultNavigations(
                
                onResponse: @escaping (_ response: DefaultNavigationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/default",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultNavigationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get navigation by slug.
            * Description: Retrieve detailed information about a specific navigation element.
            **/
            public func getNavigationBySlug(
                slug: String,
                devicePlatform: String,
                
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["device_platform"] = devicePlatform



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(slug)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update navigation.
            * Description: Modify the content and settings of a specific navigation element.
            **/
            public func updateNavigation(
                id: String,
                body: NavigationRequest,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete navigation.
            * Description: Remove a specific navigation element.
            **/
            public func deleteNavigation(
                id: String,
                
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page meta.
            * Description: Retrieve metadata for a specific page.
            **/
            public func getPageMeta(
                
                onResponse: @escaping (_ response: PageMetaSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/meta",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageMetaSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page specification.
            * Description: Retrieve specifications and details for a specific page.
            **/
            public func getPageSpec(
                
                onResponse: @escaping (_ response: PageSpec?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/spec",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSpec.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create page preview.
            * Description: Generate and add a new page preview.
            **/
            public func createPagePreview(
                body: PageRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/preview/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update page preview.
            * Description: Modify the content and settings of a specific page preview.
            **/
            public func updatePagePreview(
                slug: String,
                body: PagePublishRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/publish/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete page.
            * Description: Remove a page from the platform.
            **/
            public func deletePage(
                id: String,
                
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add path redirection rules.
            * Description: Create and add rules for path redirection.
            **/
            public func addPathRedirectionRules(
                body: PathMappingSchema,
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get path redirection rules.
            * Description: Retrieve a list of path redirection rules.
            **/
            public func getPathRedirectionRules(
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get path redirection rule.
            * Description: Retrieve detailed information about a specific path redirection rule.
            **/
            public func getPathRedirectionRule(
                pathId: String,
                
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pathMappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update path redirection rules.
            * Description: Modify settings for path redirection rules.
            **/
            public func updatePathRedirectionRules(
                pathId: String,
                body: PathMappingSchema,
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pathMappings/\(pathId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete path redirection rules.
            * Description: Remove specific path redirection rules.
            **/
            public func deletePathRedirectionRules(
                pathId: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pathMappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SEO configuration for an application
            * Description: Retrieve configuration settings for SEO.
            **/
            public func getSEOConfiguration(
                
                onResponse: @escaping (_ response: SeoComponent?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update SEO configuration for an application
            * Description: Modify configuration settings for SEO.
            **/
            public func updateSEOConfiguration(
                body: SeoComponent,
                onResponse: @escaping (_ response: SeoSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Default SEO Markup schemas of an application
            * Description: Use this API to get the Default SEO Markup schema Templates setup for an application
            **/
            public func getDefaultSEOMarkupSchema(
                pageType: String?,
                
                onResponse: @escaping (_ response: DefaultSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageType {
    
    xQuery["page_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/default",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SEO Markup schemas of an application
            * Description: Use this API to get all SEO Markup schema Templates setup for an application
            **/
            public func getSEOMarkupSchemas(
                title: String?,
                active: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: SeoSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = title {
    
    xQuery["title"] = value
    
}


if let value = active {
    
    xQuery["active"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a SEO Markup schema Template of a page type for an application
            * Description: Use this API to create a SEO Markup schema Template inside an application
            **/
            public func createSEOMarkupSchema(
                body: SEOSchemaMarkupTemplateRequestBody,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a particular SEO Markup schema of an application using its id
            * Description: Use this API to get a existing SEO Markup schema an application
            **/
            public func getSEOMarkupSchema(
                id: String,
                
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a particular SEO Markup schema of an application using its id
            * Description: Use this API to edit an existing SEO Markup schema an application
            **/
            public func editSEOMarkupSchema(
                id: String,
                body: SEOSchemaMarkupTemplateRequestBody,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete a particular SEO Markup schema of an application using its id
            * Description: Use this API to delete an existing SEO Markup schema an application
            **/
            public func deleteSEOMarkupSchema(
                id: String,
                
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get slideshows
            * Description: A slideshow is a group of images, videos or a combination of both that are shown on the website in the form of slides. Use this API to fetch a list of slideshows.
            **/
            public func getSlideshows(
                devicePlatform: String,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: SlideshowGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["device_platform"] = devicePlatform



if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getSlideshows
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getSlideshowsPaginator(
                devicePlatform: String,
                pageSize: Int?
                
                ) -> Paginator<SlideshowGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<SlideshowGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getSlideshows(
                            
                            devicePlatform: devicePlatform,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create a slideshow
            * Description: A slideshow is a group of images, videos or a combination of both that are shown on the website in the form of slides. Use this API to create a slideshow.
            **/
            public func createSlideshow(
                body: SlideshowRequest,
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get slideshow by slug
            * Description: Use this API to retrieve the details of a slideshow by its slug.
            **/
            public func getSlideshowBySlug(
                slug: String,
                devicePlatform: String,
                
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["device_platform"] = devicePlatform



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows/\(slug)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a slideshow
            * Description: Use this API to edit the details of an existing slideshow.
            **/
            public func updateSlideshow(
                id: String,
                body: SlideshowRequest,
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a slideshow
            * Description: Use this API to delete an existing slideshow.
            **/
            public func deleteSlideshow(
                id: String,
                
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get support information.
            * Description: Retrieve information related to customer support.
            **/
            public func getSupportInformation(
                
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update support related info for an application
            * Description: Modify information related to customer support.
            **/
            public func updateSupportInformation(
                body: Support,
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update HTML tag
            * Description: Modify settings for an injectable tag.
            **/
            public func updateInjectableTag(
                body: CreateTagRequestSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all HTML tags
            * Description: Retrieve a list of injectable tags.
            **/
            public func getInjectableTags(
                all: Bool?,
                
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = all {
    
    xQuery["all"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create HTML tag.
            * Description: Create and add a new injectable tag.
            **/
            public func addInjectableTag(
                body: CreateTagRequestSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/add",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove HTML tag.
            * Description: Delete a specific injectable tag.
            **/
            public func removeInjectableTag(
                body: RemoveHandpickedSchema,
                onResponse: @escaping (_ response: TagDeleteSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/remove/handpicked",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagDeleteSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update HTML tag
            * Description: Modify settings for an injectable tag.
            **/
            public func editInjectableTag(
                tagId: String,
                body: UpdateHandpickedSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/edit/handpicked/\(tagId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get blog by slug.
            * Description: Retrieve detailed information about a specific blog using its slug.
            **/
            public func getBlogBySlug(
                slug: String,
                
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create page.
            * Description: Generate and add a new page to the platform.
            **/
            public func createPage(
                body: PageRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get pages.
            * Description: Retrieve a list of available pages.
            **/
            public func getPages(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: PageGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update page.
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                id: String,
                body: PageSchema,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page by slug.
            * Description: Retrieve detailed information about a specific page using its slug.
            **/
            public func getPageBySlug(
                slug: String,
                
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get custom field types
            * Description: Use this API to retrieve the custom field types 
            **/
            public func getAppCustomFieldTypes(
                
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/types",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get resources
            * Description: Use this API to retrieve the resources, such as products, collections, customers, selling locations, etc.
            **/
            public func getAppResources(
                
                onResponse: @escaping (_ response: ResourcesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/resources",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResourcesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom fields definitions
            * Description: Use this API to retrieve the definitions of custom fields.
            **/
            public func getAppCustomFieldDefinitions(
                pageNo: String,
                pageSize: String,
                resources: String?,
                types: String?,
                search: String?,
                
                onResponse: @escaping (_ response: CustomFieldDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page_no"] = pageNo




    xQuery["page_size"] = pageSize



if let value = resources {
    
    xQuery["resources"] = value
    
}


if let value = types {
    
    xQuery["types"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom field definition
            * Description: Use this API to create a custom field definition for your application.
            **/
            public func createAppCustomFieldDefinition(
                body: CustomFieldDefinitionRequestSchema,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom fields definition by id
            * Description: Use this API to retrieve the definitions of custom fields using definition_id.
            **/
            public func getAppCustomFieldDefinition(
                definitionId: String,
                
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update custom field definition
            * Description: Use this API to update a custom field definition for your application.
            **/
            public func updateAppCustomFieldDefinition(
                definitionId: String,
                body: CustomFieldDefinitionRequestSchema,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(definitionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete custom fields definition.
            * Description: Use this API to delete the definitions of custom fields using definition_id. This will also delete related custom fields entries related to this definition.
            **/
            public func deleteAppCustomFieldDefinition(
                definitionId: String,
                
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of custom fields of gives resource
            * Description: Use this API to retrieve the custom fields for given resource in param.
            **/
            public func getAppCustomFields(
                resource: String,
                
                onResponse: @escaping (_ response: CustomFieldsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of custom fields of given resource and resource id
            * Description: Use this API to retrieve the custom fields for given resource in param.
            **/
            public func getAppCustomFieldsByResourceId(
                resource: String,
                resourceId: String,
                
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom field entries for gives resource and resource_id
            * Description: Use this API to create the custom field entry for given resource and resource_id in param.
            **/
            public func createAppCustomFieldByResourceId(
                resource: String,
                resourceId: String,
                body: CustomFieldRequestSchema,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom object definition
            * Description: Use this API to create custom object defintion
            **/
            public func createAppCustomObjectDefinition(
                body: CustomObjectDefinitionRequestSchema,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom object definitions
            * Description: Use this API to retrieve the custom object definitions
            **/
            public func getAppCustomObjectDefinitions(
                pageNo: String,
                pageSize: String,
                search: String?,
                
                onResponse: @escaping (_ response: CustomObjectDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page_no"] = pageNo




    xQuery["page_size"] = pageSize



if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get custom object definition by id
            * Description: Use this API to update a custom object definition for your application.
            **/
            public func getAppCustomObjectDefinition(
                definitionId: String,
                
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update custom object definition
            * Description: Use this API to update a custom object definition for your application.
            **/
            public func updateAppCustomObjectDefinition(
                definitionId: String,
                body: CustomObjectDefinitionUpdateRequestSchema,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(definitionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete custom object definition by id
            * Description: Use this API to delete a custom object definition and related data for your application.
            **/
            public func deleteAppCustomObjectDefinition(
                definitionId: String,
                
                onResponse: @escaping (_ response: CustomObjectDefinitionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of custom objects
            * Description: Use this API to retrieve the custom objects.
            **/
            public func getAppCustomObjects(
                definitionId: String?,
                pageNo: String,
                pageSize: String,
                
                onResponse: @escaping (_ response: CustomObjectsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = definitionId {
    
    xQuery["definition_id"] = value
    
}



    xQuery["page_no"] = pageNo




    xQuery["page_size"] = pageSize



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom object entries
            * Description: Use this API to create the custom object entry.
            **/
            public func createAppCustomObject(
                body: CustomObjectRequestSchema,
                onResponse: @escaping (_ response: CustomObjectSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom object details
            * Description: Use this API to retrieve the custom object details and their fields details and definitions and references.
            **/
            public func getAppCustomObject(
                metaobjectId: String,
                
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(metaobjectId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete custom object
            * Description: Use this API to delete the custom object entry by id. This will also delete related custom fields entries related to this custom object.
            **/
            public func deleteAppCustomObject(
                metaobjectId: String,
                
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(metaobjectId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update custom object details
            * Description: Use this API to update a custom object detail for your application.
            **/
            public func updateAppCustomObject(
                metaobjectId: String,
                body: CustomObjectRequestSchema,
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(metaobjectId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch bulk import and export job list.
            * Description: Use this api to get list of jobs of bulk import and exports
            **/
            public func getAppJobs(
                page: String,
                pageSize: String,
                actionType: String,
                
                onResponse: @escaping (_ response: CustomObjectBulkEntry?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page"] = page




    xQuery["page_size"] = pageSize




    xQuery["action_type"] = actionType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/jobs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntry.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Bulk custom object entries upload
            * Description: Use this API to upload custom object entries
            **/
            public func importAppCustomObjectEntries(
                definitionId: String,
                body: CustomObjectBulkSchema,
                onResponse: @escaping (_ response: CustomObjectEntryBulkUploadResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/upload",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectEntryBulkUploadResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Initiate download for bulk custom object entries
            * Description: Use this api to initiate download of bulk entries
            **/
            public func exportAppCustomObjectEntries(
                definitionId: String,
                
                onResponse: @escaping (_ response: CustomObjectBulkEntryInitiateDownload?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/download",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntryInitiateDownload.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: download sample for custom object bulk entry
            * Description: Use this api to get sample csv file 
            **/
            public func sampleAppCustomObjectBulkEntry(
                definitionId: String,
                
                onResponse: @escaping (_ response: String?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/sample",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = String(decoding: data, as: UTF8.self)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class FileStorage {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Application start upload.
            * Description: Start uploading a file from an application and returns a storage link in response.
            **/
            public func appStartUpload(
                namespace: String,
                body: StartRequest,
                onResponse: @escaping (_ response: StartResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/start",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Application complete upload.
            * Description: Finish uploading a file from an application.
            **/
            public func appCompleteUpload(
                namespace: String,
                body: StartResponse,
                onResponse: @escaping (_ response: CompleteResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/complete",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Application copy files.
            * Description: Copy files from an application to another location.
            **/
            public func appCopyFiles(
                sync: Bool?,
                body: CopyFiles,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = sync {
    
    xQuery["sync"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/uploads/copy",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Application browse files.
            * Description: Browse files within an application.
            **/
            public func appbrowse(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = page {
    
    xQuery["page"] = value
    
}


if let value = limit {
    
    xQuery["limit"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Browse Files
            * Description: Browse Files
            **/
            public func browsefiles(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                body: ExtensionSlug,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = page {
    
    xQuery["page"] = value
    
}


if let value = limit {
    
    xQuery["limit"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get PDF types.
            * Description: Retrieve a list of available PDF types.
            **/
            public func getPdfTypes(
                countryCode: String?,
                storeOs: Bool,
                
                onResponse: @escaping (_ response: InvoiceTypesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = countryCode {
    
    xQuery["country_code"] = value
    
}



    xQuery["store_os"] = storeOs



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InvoiceTypesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default PDF data.
            * Description: Retrieve default data for PDF generation.
            **/
            public func getDefaultPdfData(
                pdfTypeId: Int,
                countryCode: String?,
                
                onResponse: @escaping (_ response: DummyTemplateDataItems?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["pdf_type_id"] = pdfTypeId



if let value = countryCode {
    
    xQuery["country_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyTemplateDataItems.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update HTML Template
            * Description: Update the HTML Template.
            **/
            public func updateHtmlTemplate(
                id: String,
                body: PdfConfig,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get html template for sales channel
            * Description: Get default html template for invoice or label
            **/
            public func getDefaultHtmlTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                onResponse: @escaping (_ response: PdfConfigSuccess?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["pdf_type_id"] = pdfTypeId




    xQuery["format"] = format



if let value = countryCode {
    
    xQuery["country_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save HTML template.
            * Description: Store an HTML template.
            **/
            public func saveHtmlTemplate(
                body: PdfConfig,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default PDF template.
            * Description: Retrieve the default PDF template.
            **/
            public func getDefaultPdfTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                onResponse: @escaping (_ response: PdfDefaultTemplateSuccess?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["pdf_type_id"] = pdfTypeId




    xQuery["format"] = format



if let value = countryCode {
    
    xQuery["country_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/default-template",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfDefaultTemplateSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Generate payment receipt.
            * Description: Generate Payment Receipt for Jiomart Digital
            **/
            public func generatePaymentReceipt(
                body: PaymentReceiptRequestBody,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/payment-receipt",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Lead {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Gets the list of Application level Tickets and/or ticket filters depending on query params
            * Description: Gets the list of Application level Tickets and/or ticket filters
            **/
            public func getNewTickets(
                items: Bool?,
                filters: Bool?,
                q: String?,
                status: String?,
                priority: PriorityEnum?,
                category: String?,
                
                onResponse: @escaping (_ response: TicketList?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = items {
    
    xQuery["items"] = value
    
}


if let value = filters {
    
    xQuery["filters"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


if let value = priority {
    
    xQuery["priority"] = value.rawValue
    
}


if let value = category {
    
    xQuery["category"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Retreives ticket details of a application level ticket
            * Description: Retreives ticket details of a application level ticket with ticket ID
            **/
            public func getNewTicket(
                id: String,
                
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Edits ticket details of a application level ticket
            * Description: Edits ticket details of a application level ticket such as status, priority, category, tags, attachments, assigne & ticket content changes
            **/
            public func editNewTicket(
                id: String,
                body: EditTicketPayload,
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Create history for specific application level ticket
            * Description: Create history for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func createNewHistory(
                id: String,
                body: TicketHistoryPayload,
                onResponse: @escaping (_ response: TicketHistory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Gets history list for specific application level ticket
            * Description: Gets history list for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func getNewTicketHistory(
                id: String,
                
                onResponse: @escaping (_ response: TicketHistoryList?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistoryList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom form.
            * Description: Retrieve information about a custom form which includes corresponding field details and any validation regex required against that field or not
            **/
            public func getCustomForm(
                slug: String,
                
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Edit custom form.
            * Description: Modify the content and assosciated settings of a custom form.
            **/
            public func editCustomForm(
                slug: String,
                body: EditCustomFormPayload,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a custom form
            * Description: Delete a custom form using it's slug
            **/
            public func deleteCustomForm(
                slug: String,
                
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom forms.
            * Description: Retrieve a list of available custom forms.
            **/
            public func getCustomForms(
                
                onResponse: @escaping (_ response: CustomFormList?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFormList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom form.
            * Description: Create a new custom form for application users to fill
            **/
            public func createCustomForm(
                body: CreateCustomFormPayload,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get Token to join a specific Video Room using it's unqiue name
            * Description: Get Token to join a specific Video Room using it's unqiue name, this Token is your ticket to Room and also creates your identity there.
            **/
            public func getNewTokenForVideoRoom(
                uniqueName: String,
                
                onResponse: @escaping (_ response: GetTokenForVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room/\(uniqueName)/token",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetTokenForVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get participants of a specific Video Room using it's unique name
            * Description: Get participants of a specific Video Room using it's unique name, this can be used to check if people are already there in the room and also to show their names.
            **/
            public func getNewVideoParticipants(
                uniqueName: String,
                
                onResponse: @escaping (_ response: GetParticipantsInsideVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room/\(uniqueName)/participants",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetParticipantsInsideVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Open video room.
            * Description: Initiate and open a video room.
            **/
            public func openVideoRoom(
                body: CreateVideoRoomPayload,
                onResponse: @escaping (_ response: CreateVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Close video room.
            * Description: Terminate and close an active video room.
            **/
            public func closeVideoRoom(
                uniqueName: String,
                
                onResponse: @escaping (_ response: CloseVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room/\(uniqueName)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CloseVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
        }
        
        
            
        public class Serviceability {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update pincode MOP (Mode of Payment) view.
            * Description: Modify and update views related to pincode MOP.
            **/
            public func updatePincodeMopView(
                body: PincodeMopData,
                onResponse: @escaping (_ response: PincodeMOPresponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-update",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMOPresponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update pincode bulk view.
            * Description: Modify and update views related to bulk operations on pincode.
            **/
            public func updatePincodeBulkView(
                body: PincodeMopBulkData,
                onResponse: @escaping (_ response: PincodeBulkViewResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-bulk-update",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeBulkViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update pincode CoD (Cash on Delivery) listing.
            * Description: Modify and update listings for CoD based on pincode.
            **/
            public func updatePincodeCoDListing(
                body: PincodeCodStatusListingRequest,
                onResponse: @escaping (_ response: PincodeCodStatusListingResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-data",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeCodStatusListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update pincode audit history.
            * Description: Modify and update audit history records for pincode-related activities.
            **/
            public func updatePincodeAuditHistory(
                body: PincodeMopUpdateAuditHistoryRequest,
                onResponse: @escaping (_ response: PincodeMopUpdateAuditHistoryResponseData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMopUpdateAuditHistoryResponseData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Updating of Courier Rule.
            * Description: This API updates and returns Courier Rule.
            **/
            public func updateCourierRule(
                ruleId: String,
                body: CourierPartnerRule,
                onResponse: @escaping (_ response: CourierPartnerRule?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courierPartner/rules/\(ruleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRule.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch of Courier Rule.
            * Description: This API returns Courier Rule.
            **/
            public func getCourierPartnerRule(
                ruleId: String,
                
                onResponse: @escaping (_ response: CourierPartnerRule?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courierPartner/rules/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRule.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Courier Rules.
            * Description: Creates Courier Rules with rule configuration and dp priority
            **/
            public func createCourierPartnerRule(
                body: CourierPartnerRule,
                onResponse: @escaping (_ response: CourierPartnerRule?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRule.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch Courier Rules List
            * Description: This API returns Courier Rules List
            **/
            public func getCourierPartnerRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                onResponse: @escaping (_ response: CourierPartnerRulesListResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRulesListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Apply configuration to an application
            * Description: Apply configuration to application to set DP rules and Zone configuration
            **/
            public func updateApplicationConfiguration(
                body: ApplicationConfig,
                onResponse: @escaping (_ response: ApplicationConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get All Courier Rules applied to application
            * Description: This API returns all the Courier Rules applied to an application
            **/
            public func getApplicationConfiguration(
                
                onResponse: @escaping (_ response: ApplicationConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Self-ship configuration of application.
            * Description: This API updates Self-ship configuration of the application.
            **/
            public func patchApplicationServiceabilitySelfShipment(
                body: SelfShipResponse,
                onResponse: @escaping (_ response: ApplicationSelfShipConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/selfship",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationSelfShipConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Self-ship configuration of application.
            * Description: This API returns Self-ship configuration of the application.
            **/
            public func getApplicationServiceabilitySelfShipment(
                
                onResponse: @escaping (_ response: ApplicationSelfShipConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/selfship",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationSelfShipConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Application Configuration
            * Description: Get Application Configuration
            **/
            public func getApplicationConfig(
                
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Insert Application Configuration
            * Description: Insert Application Configuration
            **/
            public func insertApplicationConfig(
                body: StoreRuleConfigData,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Store Rule Configuration
            * Description: Update Store Rule Configuration
            **/
            public func updateStoreRulesConfig(
                body: StoreRuleConfigData,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Multiple Store Rules
            * Description: Get Multiple Store Rules
            **/
            public func getStoreRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                onResponse: @escaping (_ response: GetStoreRulesApiResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStoreRulesApiResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Store Rule
            * Description: Create Store Rule
            **/
            public func createStoreRules(
                body: CreateStoreRuleRequestSchema,
                onResponse: @escaping (_ response: StoreRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Single Store Rule
            * Description: Get Single Store Rule
            **/
            public func getStoreRule(
                ruleUid: String,
                
                onResponse: @escaping (_ response: StoreRuleDataSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleDataSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Store Rule
            * Description: Update Store Rule
            **/
            public func updateStoreRules(
                ruleUid: String,
                body: CreateStoreRuleRequestSchema,
                onResponse: @escaping (_ response: StoreRuleUpdateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleUpdateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Updates Courier Partner Rules Priority for a sales channel
            * Description: Updates Courier Partner Rules Priority for a sales channel
            **/
            public func updateCourierPartnerRulePriority(
                body: RulePriorityRequest,
                onResponse: @escaping (_ response: RulePriorityResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/priority",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RulePriorityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
        }
        
        
            
        public class Order {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get reasons behind full or partial cancellation of a shipment
            * Description: Use this API to retrieve the issues that led to the cancellation of bags within a shipment.
            **/
            public func getShipmentBagReasons(
                shipmentId: String,
                lineNumber: Int,
                
                onResponse: @escaping (_ response: ShipmentBagReasons?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/lineNumber/\(lineNumber)/reasons",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentBagReasons.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Get cross selling platform shipments
            **/
            public func getApplicationShipments(
                lane: String?,
                searchType: String?,
                searchId: String?,
                fromDate: String?,
                toDate: String?,
                dpIds: String?,
                orderingCompanyId: String?,
                stores: String?,
                salesChannel: String?,
                requestByExt: String?,
                pageNo: Int?,
                pageSize: Int?,
                customerId: String?,
                isPrioritySort: Bool?,
                excludeLockedShipments: Bool?,
                
                onResponse: @escaping (_ response: ShipmentInternalPlatformViewResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = lane {
    
    xQuery["lane"] = value
    
}


if let value = searchType {
    
    xQuery["search_type"] = value
    
}


if let value = searchId {
    
    xQuery["search_id"] = value
    
}


if let value = fromDate {
    
    xQuery["from_date"] = value
    
}


if let value = toDate {
    
    xQuery["to_date"] = value
    
}


if let value = dpIds {
    
    xQuery["dp_ids"] = value
    
}


if let value = orderingCompanyId {
    
    xQuery["ordering_company_id"] = value
    
}


if let value = stores {
    
    xQuery["stores"] = value
    
}


if let value = salesChannel {
    
    xQuery["sales_channel"] = value
    
}


if let value = requestByExt {
    
    xQuery["request_by_ext"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = customerId {
    
    xQuery["customer_id"] = value
    
}


if let value = isPrioritySort {
    
    xQuery["is_priority_sort"] = value
    
}


if let value = excludeLockedShipments {
    
    xQuery["exclude_locked_shipments"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/shipments/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentInternalPlatformViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Track shipment on the platform.
            * Description: Track shipment by Shipment ID for application based on application Id
            **/
            public func trackShipmentPlatform(
                shipmentId: String,
                
                onResponse: @escaping (_ response: PlatformShipmentTrack?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/track",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformShipmentTrack.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get platform shipment reasons.
            * Description: Retrieve reasons behind full or partial cancellation of a shipment
            **/
            public func getPlatformShipmentReasons(
                action: String,
                
                onResponse: @escaping (_ response: ShipmentReasonsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/reasons/\(action)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentReasonsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
        }
        
        
            
        public class Partner {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Add proxy path.
            * Description: Create and add a new proxy path.
            **/
            public func addProxyPath(
                extensionId: String,
                body: AddProxyReq,
                onResponse: @escaping (_ response: AddProxyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove proxy path.
            * Description: Delete a proxy path from the platform.
            **/
            public func removeProxyPath(
                extensionId: String,
                attachedPath: String,
                
                onResponse: @escaping (_ response: RemoveProxyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)/\(attachedPath)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RemoveProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Payment {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get brand payment gateway config
            * Description: Retrieve configuration settings for brand payment gateways.
            **/
            public func getBrandPaymentGatewayConfig(
                aggregator: String?,
                configType: String?,
                
                onResponse: @escaping (_ response: PaymentGatewayConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = aggregator {
    
    xQuery["aggregator"] = value
    
}


if let value = configType {
    
    xQuery["config_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save brand payment gateway config.
            * Description: Store and update configuration settings for brand payment gateways.
            **/
            public func saveBrandPaymentGatewayConfig(
                body: PaymentGatewayConfigRequest,
                onResponse: @escaping (_ response: PaymentGatewayToBeReviewed?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayToBeReviewed.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment mode routes.
            * Description: Retrieve routes and options for payment modes.
            **/
            public func getPaymentModeRoutes(
                refresh: Bool,
                requestType: String,
                orderId: String?,
                shipmentId: String?,
                
                onResponse: @escaping (_ response: PaymentOptionsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["refresh"] = refresh




    xQuery["request_type"] = requestType



if let value = orderId {
    
    xQuery["order_id"] = value
    
}


if let value = shipmentId {
    
    xQuery["shipment_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOptionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get bank account details.
            * Description: Retrieve bank account information using an open API.
            **/
            public func getBankAccountDetailsOpenAPI(
                orderId: String,
                requestHash: String?,
                
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["order_id"] = orderId



if let value = requestHash {
    
    xQuery["request_hash"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add refund bank account using OTP.
            * Description: Register a refund bank account with OTP verification.
            **/
            public func addRefundBankAccountUsingOTP(
                body: AddBeneficiaryDetailsOTPRequest,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get user order beneficiaries.
            * Description: Retrieve beneficiaries associated with a user orders.
            **/
            public func getUserOrderBeneficiaries(
                orderId: String,
                
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["order_id"] = orderId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/order",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user beneficiaries.
            * Description: Retrieve beneficiaries associated with a user.
            **/
            public func getUserBeneficiaries(
                orderId: String,
                
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["order_id"] = orderId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/user",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Confirm payment.
            * Description: Authenticate and confirm a payment.
            **/
            public func confirmPayment(
                body: PaymentConfirmationRequest,
                onResponse: @escaping (_ response: PaymentConfirmationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentConfirmationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user COD limit routes.
            * Description: Retrieve routes and limits for user cash-on-delivery (COD) transactions.
            **/
            public func getUserCODlimitRoutes(
                merchantUserId: String,
                mobileNo: String,
                
                onResponse: @escaping (_ response: GetUserCODLimitResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["merchant_user_id"] = merchantUserId




    xQuery["mobile_no"] = mobileNo



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetUserCODLimitResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Set user COD limit routes.
            * Description: Configure routes and limits for user COD transactions.
            **/
            public func setUserCODlimitRoutes(
                body: SetCODForUserRequest,
                onResponse: @escaping (_ response: SetCODOptionResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetCODOptionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: EDC aggregators and model list.
            * Description: Retrieve a list of EDC (Electronic Data Capture) aggregators and models.
            **/
            public func edcAggregatorsAndModelList(
                
                onResponse: @escaping (_ response: EdcAggregatorAndModelListResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-aggregator-list",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcAggregatorAndModelListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: EDC device stats.
            * Description: Get statistics and data related to EDC devices.
            **/
            public func edcDeviceStats(
                
                onResponse: @escaping (_ response: EdcDeviceStatsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-stats",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceStatsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update EDC device.
            * Description: Modify the settings and details of an EDC device.
            **/
            public func updateEdcDevice(
                body: EdcAddRequest,
                onResponse: @escaping (_ response: EdcDeviceAddResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceAddResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get EDC device.
            * Description: Retrieve detailed information about an EDC device.
            **/
            public func getEdcDevice(
                terminalUniqueIdentifier: String,
                
                onResponse: @escaping (_ response: EdcDeviceDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edcDevice/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add EDC device.
            * Description: Register and add a new EDC device.
            **/
            public func addEdcDevice(
                terminalUniqueIdentifier: String,
                body: EdcUpdateRequest,
                onResponse: @escaping (_ response: EdcDeviceUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edcDevice/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: EDC device list.
            * Description: Retrieve a list of available EDC devices.
            **/
            public func edcDeviceList(
                pageNo: Int?,
                pageSize: Int?,
                isActive: Bool?,
                storeId: Int?,
                deviceTag: String?,
                
                onResponse: @escaping (_ response: EdcDeviceListResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = storeId {
    
    xQuery["store_id"] = value
    
}


if let value = deviceTag {
    
    xQuery["device_tag"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-list",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get POS payment mode routes.
            * Description: Retrieve payment options and aggregator for point-of-sale (POS).
            **/
            public func getPosPaymentModeRoutes(
                amount: Int,
                cartId: String?,
                pincode: String,
                checkoutMode: String?,
                refresh: Bool?,
                orderId: String?,
                cardReference: String?,
                orderType: String,
                userDetails: String?,
                displaySplit: Bool?,
                advancePayment: Bool?,
                shipmentId: String?,
                
                onResponse: @escaping (_ response: PaymentModeRouteResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["amount"] = amount



if let value = cartId {
    
    xQuery["cart_id"] = value
    
}



    xQuery["pincode"] = pincode



if let value = checkoutMode {
    
    xQuery["checkout_mode"] = value
    
}


if let value = refresh {
    
    xQuery["refresh"] = value
    
}


if let value = orderId {
    
    xQuery["order_id"] = value
    
}


if let value = cardReference {
    
    xQuery["card_reference"] = value
    
}



    xQuery["order_type"] = orderType



if let value = userDetails {
    
    xQuery["user_details"] = value
    
}


if let value = displaySplit {
    
    xQuery["display_split"] = value
    
}


if let value = advancePayment {
    
    xQuery["advance_payment"] = value
    
}


if let value = shipmentId {
    
    xQuery["shipment_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/pos",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentModeRouteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Initialize payment.
            * Description: Start the payment initiation process for UPI and QR code.
            **/
            public func initialisePayment(
                body: PaymentInitializationRequest,
                onResponse: @escaping (_ response: PaymentInitializationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/request",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentInitializationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check and update payment status.
            * Description: Verify and modify the status of a payment.
            **/
            public func checkAndUpdatePaymentStatus(
                body: PaymentStatusUpdateRequest,
                onResponse: @escaping (_ response: PaymentStatusUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm/polling",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Resend or cancel payment.
            * Description: Resend or cancel a payment link.
            **/
            public func resendOrCancelPayment(
                body: ResendOrCancelPaymentRequest,
                onResponse: @escaping (_ response: ResendOrCancelPaymentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/cancel",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendOrCancelPaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Payment status bulk.
            * Description: Retrieve the status of multiple payments in bulk.
            **/
            public func paymentStatusBulk(
                body: PaymentStatusBulkHandlerRequest,
                onResponse: @escaping (_ response: PaymentStatusBulkHandlerResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/payment-status-bulk/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusBulkHandlerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get OAuth URL.
            * Description: Retrieve an OAuth URL for PG API authentication.
            **/
            public func oauthGetUrl(
                aggregator: String,
                successRedirectUrl: String?,
                failureRedirectUrl: String?,
                
                onResponse: @escaping (_ response: GetOauthUrlResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = successRedirectUrl {
    
    xQuery["success_redirect_url"] = value
    
}


if let value = failureRedirectUrl {
    
    xQuery["failure_redirect_url"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/onboard/\(aggregator)/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetOauthUrlResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Revoke OAuth token.
            * Description: Invalidate an OAuth token.
            **/
            public func revokeOauthToken(
                aggregator: String,
                
                onResponse: @escaping (_ response: RevokeOAuthToken?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/revoke/\(aggregator)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RevokeOAuthToken.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Repayment details for BNPL.
            * Description: Retrieve information about repayment transactions.
            **/
            public func repaymentDetails(
                body: RepaymentDetailsSerialiserPayAll,
                onResponse: @escaping (_ response: RepaymentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/repayment-details",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RepaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Merchant onboarding for BNPL.
            * Description: Initiate the onboarding process for a merchant.
            **/
            public func merchantOnBoarding(
                body: MerchantOnBoardingRequest,
                onResponse: @escaping (_ response: MerchantOnBoardingResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/merchant-onboarding",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchantOnBoardingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Verify customer for payment.
            * Description: Retrieve a link for making payments.
            **/
            public func verifyCustomerForPayment(
                body: ValidateCustomerRequest,
                onResponse: @escaping (_ response: ValidateCustomerResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/customer/validation",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ValidateCustomerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment link.
            * Description: Retrieve a link for making payments.
            **/
            public func getPaymentLink(
                paymentLinkId: String?,
                
                onResponse: @escaping (_ response: GetPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = paymentLinkId {
    
    xQuery["payment_link_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create payment link.
            * Description: Generate a new link for accepting payments.
            **/
            public func createPaymentLink(
                body: CreatePaymentLinkRequest,
                onResponse: @escaping (_ response: CreatePaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Polling payment link.
            * Description: Continuously check the status of a payment link.
            **/
            public func pollingPaymentLink(
                paymentLinkId: String?,
                
                onResponse: @escaping (_ response: PollingPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = paymentLinkId {
    
    xQuery["payment_link_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/polling-payment-link/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PollingPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Resend payment link.
            * Description: Reissue a payment link to a recipient.
            **/
            public func resendPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                onResponse: @escaping (_ response: ResendPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/resend-payment-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Cancel payment link.
            * Description: Deactivate and cancel a payment link.
            **/
            public func cancelPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                onResponse: @escaping (_ response: CancelPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/cancel-payment-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CancelPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details for the given offline / advance payment mode for merchant
            * Description: Use this API to get details for the given offline / advance payment mode for merchant
            **/
            public func getPaymentModeControlRoutes(
                mode: String,
                
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update offline payment mode details for the merchant
            * Description: Use this API to update given offline / advance payment mode details for the merchant
            **/
            public func setMerchantModeControlRoutes(
                mode: String,
                body: MerchantPaymentModeRequest,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details of advance payment custom configurations of merchant
            * Description: Use this API to Get details of advance payment custom configurations of merchant
            **/
            public func getPaymentModeCustomConfig(
                mode: String,
                
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update details of advance payment custom configurations of merchant
            * Description: Use this API to update given details of advance payment custom configurations of merchant
            **/
            public func setPaymentModeCustomConfig(
                mode: String,
                body: PaymentCustomConfigRequestSchema,
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment mode code.
            * Description: Retrieve options for payment codes.
            **/
            public func getPaymentCodeOption(
                
                onResponse: @escaping (_ response: GetPaymentCodeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/codes",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentCodeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to get payment session details
            * Description: Use this API to fetch the payment session details for given order ID or Transaction ID.
            **/
            public func getPaymentSession(
                gid: String,
                lineItem: Bool?,
                
                onResponse: @escaping (_ response: PaymentSessionSerializer?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = lineItem {
    
    xQuery["line-item"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentSessionSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update payment session.
            * Description: Modify the details of a payment session.
            **/
            public func updatePaymentSession(
                gid: String,
                body: PaymentSessionRequestSerializer,
                onResponse: @escaping (_ response: PaymentSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update refund session.
            * Description: Modify the details of a refund session.
            **/
            public func updateRefundSession(
                gid: String,
                requestId: String,
                body: RefundSessionRequestSerializer,
                onResponse: @escaping (_ response: RefundSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/\(gid)/refund/session/\(requestId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get merchant payment option
            * Description: Retrieve all the available Paymet Gateways for merchant and its offline payment mode details.
            **/
            public func getMerchantPaymentOption(
                
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Patch merchant payment option
            * Description: To updated online payment as active/inactive or offline payment configuration like cod charges, anonymous cod allowed flags.
            **/
            public func patchMerchantPaymentOption(
                body: MerchnatPaymentModeRequest,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get merchant aggregator payment mode details.
            * Description: swagger not found. so operationId not found
            **/
            public func getMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["business_unit"] = businessUnit




    xQuery["device"] = device



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Patch merchant aggregator payment mode details.
            * Description: swagger not found. so operationId not found
            **/
            public func patchMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                body: PlatformPaymentModeResponse,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get PG (Payment Gateway) config aggregators.
            * Description: swagger not found. so operationId not found
            **/
            public func getPGConfigAggregators(
                
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get merchant refund priority
            * Description: Get merchant refund priority.
            **/
            public func getMerchantRefundPriority(
                configType: String,
                
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refundPriority/config/\(configType)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Crete merchant refund priority
            * Description: Crete merchant refund priority.
            **/
            public func createMerchantRefundPriority(
                configType: String,
                body: RefundPriorityRequestSerializer,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refundPriority/config/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to update merchant refund priority
            * Description: API to update merchant refund priority
            **/
            public func updateMerchantRefundPriority(
                configType: String,
                body: RefundPriorityRequestSerializer,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refundPriority/config/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Order
            * Description: Use this API to create a order and payment on aggregator side
            **/
            public func createPaymentOrder(
                body: PaymentOrderRequest,
                onResponse: @escaping (_ response: PaymentOrderResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment-orders/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOrderResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get app version required for Payment Mode.
            * Description: This api provide read operations on the app version required for Payment Mode or sub payment mode for an Aggregator.
            **/
            public func getMerchantAggregatorAppVersion(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                paymentModeId: Int?,
                subPaymentMode: String?,
                
                onResponse: @escaping (_ response: AggregatorVersionResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["business_unit"] = businessUnit




    xQuery["device"] = device



if let value = paymentModeId {
    
    xQuery["payment_mode_id"] = value
    
}


if let value = subPaymentMode {
    
    xQuery["sub_payment_mode"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorVersionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update app version required for Payment Mode.
            * Description: This api provide wrote operations on the app version required for Payment Mode or sub payment mode for an Aggregator.
            **/
            public func patchMerchantPaymentOptionVersion(
                aggregatorId: Int,
                body: AggregatorControlRequest,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Rewards {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Display giveaways.
            * Description: Retrieve and display available giveaways.
            **/
            public func showGiveaways(
                pageId: String,
                pageSize: Int,
                
                onResponse: @escaping (_ response: GiveawayResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page_id"] = pageId




    xQuery["page_size"] = pageSize



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GiveawayResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save giveaway.
            * Description: Store and manage details of a giveaway.
            **/
            public func saveGiveAway(
                body: Giveaway,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get giveaway by ID.
            * Description: Retrieve specific giveaway details by its unique identifier.
            **/
            public func getGiveawayById(
                id: String,
                
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update giveaway.
            * Description: Modify and update information about a giveaway.
            **/
            public func updateGiveAway(
                id: String,
                body: Giveaway,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Show offers.
            * Description: Display available offers for users.
            **/
            public func showOffers(
                
                onResponse: @escaping (_ response: [Offer]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([Offer].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get offer by name.
            * Description: Retrieve an offer by its name.
            **/
            public func getOfferByName(
                name: String,
                
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update offer by name.
            * Description: Modify and manage an offer using its name.
            **/
            public func updateOfferByName(
                name: String,
                body: Offer,
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update user status.
            * Description: Change and update the status of a user in the rewards system.
            **/
            public func updateUserStatus(
                userId: String,
                body: AppUser,
                onResponse: @escaping (_ response: AppUser?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppUser.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user details.
            * Description: Retrieve comprehensive details about a user in the rewards program.
            **/
            public func getUserDetails(
                userId: String,
                
                onResponse: @escaping (_ response: UserRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user points history.
            * Description: Retrieve the history of points earned and redeemed by a user.
            **/
            public func getUserPointsHistory(
                userId: String,
                pageId: String?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: HistoryRes?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/points/history/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(HistoryRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get rewards configuration.
            * Description: Retrieve the configuration settings for the rewards program.
            **/
            public func getRewardsConfiguration(
                
                onResponse: @escaping (_ response: ConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Set rewards configuration.
            * Description: Configure and modify the settings for the rewards program.
            **/
            public func setRewardsConfiguration(
                body: ConfigurationRequest,
                onResponse: @escaping (_ response: SetConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Share {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create short link.
            * Description: Generate a shortened URL link for sharing.
            **/
            public func createShortLink(
                body: ShortLinkReq,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get short links.
            * Description: Retrieve a list of all generated short links.
            **/
            public func getShortLinks(
                pageNo: Int?,
                pageSize: Int?,
                createdBy: String?,
                active: String?,
                shortUrl: String?,
                originalUrl: String?,
                title: String?,
                
                onResponse: @escaping (_ response: ShortLinkList?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = createdBy {
    
    xQuery["created_by"] = value
    
}


if let value = active {
    
    xQuery["active"] = value
    
}


if let value = shortUrl {
    
    xQuery["short_url"] = value
    
}


if let value = originalUrl {
    
    xQuery["original_url"] = value
    
}


if let value = title {
    
    xQuery["title"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get short link by hash.
            * Description: Retrieve a specific short link by its unique hash.
            **/
            public func getShortLinkByHash(
                hash: String,
                
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/shortLink/\(hash)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update short link by ID.
            * Description: Update details of a specific short link by its ID.
            **/
            public func updateShortLinkById(
                id: String,
                body: ShortLinkReq,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/shortLink/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get short link click statistics.
            * Description: Retrieve statistics and analytics for clicks on a short link.
            **/
            public func getShortLinkClickStats(
                surlId: String,
                
                onResponse: @escaping (_ response: ClickStatsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["surl_id"] = surlId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/click-stats",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ClickStatsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Theme {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get all pages.
            * Description: Retrieve a list of all available pages.
            **/
            public func getAllPages(
                themeId: String,
                
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create page.
            * Description: Generate and add a new page to the platform.
            **/
            public func createPage(
                themeId: String,
                body: AvailablePageSchema,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update multiple pages.
            * Description: Modify multiple pages simultaneously.
            **/
            public func updateMultiplePages(
                themeId: String,
                body: AllAvailablePageSchema,
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page.
            * Description: Retrieve detailed information about a specific page.
            **/
            public func getPage(
                themeId: String,
                pageValue: String,
                
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update page.
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                themeId: String,
                pageValue: String,
                body: AvailablePageSchema,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete page.
            * Description: Remove a page from the platform.
            **/
            public func deletePage(
                themeId: String,
                pageValue: String,
                
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme library.
            * Description: Retrieve themes available in the platform's library.
            **/
            public func getThemeLibrary(
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/library",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add to theme library.
            * Description: Store and add a theme to the platform's library.
            **/
            public func addToThemeLibrary(
                body: AddThemeRequestSchema,
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/library",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get public themes.
            * Description: Retrieve themes that are publicly accessible.
            **/
            public func getPublicThemes(
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/list/public",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get fonts.
            * Description: Retrieve a list of available fonts.
            **/
            public func getFonts(
                
                onResponse: @escaping (_ response: FontsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/fonts",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FontsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Publish theme.
            * Description: Make a theme accessible for use.
            **/
            public func publishTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/publish",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Unpublish theme.
            * Description: Remove a published theme from public access.
            **/
            public func unpublishTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/unpublish",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Archive theme.
            * Description: Store a theme in an archive.
            **/
            public func archiveTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/archive",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Unarchive theme.
            * Description: Retrieve a theme from the archive.
            **/
            public func unarchiveTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: DummyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/unarchive",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get application themes.
            * Description: Retrieve themes available for an application.
            **/
            public func getApplicationThemes(
                
                onResponse: @escaping (_ response: [ThemesSchema]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/themes",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([ThemesSchema].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application themes count.
            * Description: Count the number of themes available for an application.
            **/
            public func getApplicationThemesCount(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/application_themes_count",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme by ID.
            * Description: Retrieve a theme by its unique identifier.
            **/
            public func getThemeById(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update theme.
            * Description: Modify and update the content and settings of a theme
            **/
            public func updateTheme(
                themeId: String,
                body: UpdateThemeRequestBody,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete theme.
            * Description: Remove a theme from the platform.
            **/
            public func deleteTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add theme to application.
            * Description: Include a theme in an application's design.
            **/
            public func addThemeToApplication(
                body: ThemeReq,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update theme name.
            * Description: Modify the name of a theme.
            **/
            public func updateThemeName(
                themeId: String,
                body: UpdateThemeNameRequestBody,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/name",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Apply theme.
            * Description: Set and apply a theme to an application or page.
            **/
            public func applyTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/apply",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Duplicate theme.
            * Description: Create a copy of an existing theme.
            **/
            public func duplicateTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/duplicate",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get applied theme.
            * Description: Retrieve the currently applied theme.
            **/
            public func getAppliedTheme(
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme for preview.
            * Description: Retrieve a theme for previewing before application.
            **/
            public func getThemeForPreview(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/preview",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme last modified.
            * Description: Retrieve the last modification of a theme.
            **/
            public func getThemeLastModified(
                themeId: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "HEAD",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/polling",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Is upgradable.
            * Description: Determine if a theme is eligible for an upgrade.
            **/
            public func isUpgradable(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemeUpgradableResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgradable",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemeUpgradableResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Upgrade theme.
            * Description: Enhance and update a theme to a new version.
            **/
            public func upgradeTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgrade",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class User {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get customers.
            * Description: Retrieve a list of customer profiles.
            **/
            public func getCustomers(
                q: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: CustomerListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/list",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomerListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Search users.
            * Description: Search and filter user profiles.
            **/
            public func searchUsers(
                q: String?,
                query: [String]?,
                
                onResponse: @escaping (_ response: UserSearchResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/search",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserSearchResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create user.
            * Description: Register and add a new user to the platform.
            **/
            public func createUser(
                body: CreateUserRequestSchema,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Block/unblock users.
            * Description: Control user access by blocking or unblocking their accounts.
            **/
            public func blockOrUnblockUsers(
                body: BlockUserRequestSchema,
                onResponse: @escaping (_ response: BlockUserSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/activation",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlockUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Undelete user.
            * Description: Restore a previously deleted user account.
            **/
            public func unDeleteUser(
                body: UnDeleteUserRequestSchema,
                onResponse: @escaping (_ response: UnDeleteUserSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/undelete",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UnDeleteUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update user.
            * Description: Modify and update user profile information.
            **/
            public func updateUser(
                userId: String,
                body: UpdateUserRequestSchema,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create user session.
            * Description: Establish a session for user interactions.
            **/
            public func createUserSession(
                body: CreateUserSessionRequestSchema,
                onResponse: @escaping (_ response: CreateUserSessionResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserSessionResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete session.
            * Description: Terminate an active user session.
            **/
            public func deleteSession(
                id: String,
                sessionId: String,
                reason: String,
                
                onResponse: @escaping (_ response: SessionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id




    xQuery["session_id"] = sessionId




    xQuery["reason"] = reason



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get active sessions.
            * Description: Retrieve a list of currently active user sessions.
            **/
            public func getActiveSessions(
                id: String,
                
                onResponse: @escaping (_ response: SessionListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete active sessions.
            * Description: End multiple active user sessions.
            **/
            public func deleteActiveSessions(
                id: String,
                reason: String,
                
                onResponse: @escaping (_ response: SessionsDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id




    xQuery["reason"] = reason



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionsDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: archive user
            * Description: archive user
            **/
            public func archiveUser(
                body: ArchiveUserRequestSchema,
                onResponse: @escaping (_ response: ArchiveUserSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/archive",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ArchiveUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get platform config.
            * Description: Retrieve configuration settings for the platform.
            **/
            public func getPlatformConfig(
                
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update platform config.
            * Description: Modify and update platform configuration settings.
            **/
            public func updatePlatformConfig(
                body: PlatformSchema,
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create user group.
            * Description: Form and add a new user group.
            **/
            public func createUserGroup(
                body: CreateUserGroup,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user groups.
            * Description: Retrieve a list of user groups.
            **/
            public func getUserGroups(
                pageNo: String?,
                pageSize: String?,
                name: String?,
                type: String?,
                status: String?,
                groupUid: Int?,
                
                onResponse: @escaping (_ response: UserGroupListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = name {
    
    xQuery["name"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


if let value = groupUid {
    
    xQuery["group_uid"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update user group.
            * Description: Modify and update user group details.
            **/
            public func updateUserGroup(
                groupId: String,
                body: UpdateUserGroupSchema,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user group by ID.
            * Description: Retrieve a user group by its unique identifier.
            **/
            public func getUserGroupById(
                groupId: String,
                
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add or Remove an user from particular user group and update user group details
            * Description: Update user group partially on the platform.
            **/
            public func updateUserGroupPartially(
                groupId: String,
                body: PartialUserGroupUpdateSchema,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a User Attribute Definition
            * Description: Use this API to areate a new User Attribute Definition
            **/
            public func createUserAttributeDefinition(
                body: CreateUserAttributeDefinition,
                onResponse: @escaping (_ response: UserAttributeDefinitionResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinitionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attribute Definitions
            * Description: Retrieve user attribute definitions.
            **/
            public func getUserAttributeDefinitions(
                excludingIds: String?,
                slug: String?,
                type: String?,
                customerEditable: Bool?,
                encrypted: Bool?,
                pinned: Bool?,
                pinOrder: Int?,
                isLocked: Bool?,
                name: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = excludingIds {
    
    xQuery["excluding_ids"] = value
    
}


if let value = slug {
    
    xQuery["slug"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = customerEditable {
    
    xQuery["customer_editable"] = value
    
}


if let value = encrypted {
    
    xQuery["encrypted"] = value
    
}


if let value = pinned {
    
    xQuery["pinned"] = value
    
}


if let value = pinOrder {
    
    xQuery["pin_order"] = value
    
}


if let value = isLocked {
    
    xQuery["is_locked"] = value
    
}


if let value = name {
    
    xQuery["name"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update User Attribute Definition
            * Description: Update an existing user attribute definition.
            **/
            public func updateUserAttributeDefinition(
                attributeDefId: String,
                body: CreateUserAttributeDefinition,
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete User Attribute Definition
            * Description: Delete a user attribute definition by its unique identifier.
            **/
            public func deleteUserAttributeDefinitionById(
                attributeDefId: String,
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attribute Definition
            * Description: Get a user attribute definition by its unique identifier.
            **/
            public func getUserAttributeDefinitionById(
                attributeDefId: String,
                
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Or Create User Attribute
            * Description: Update Or Create User Attribute
            **/
            public func updateUserAttribute(
                attributeDefId: String,
                userId: String,
                body: CreateUserAttributeRequest,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get User Attribute
            * Description: get User Attribute
            **/
            public func getUserAttribute(
                attributeDefId: String,
                userId: String,
                
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete User Attribute
            * Description: delete User Attribute
            **/
            public func deleteUserAttribute(
                attributeDefId: String,
                userId: String,
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attributes for user
            * Description: Get all user attributes for user
            **/
            public func getUserAttributesForUser(
                userId: String,
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/user/\(userId)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attribute
            * Description: Get User Attribute details by id
            **/
            public func getUserAttributeById(
                attributeId: String,
                
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/attribute/\(attributeId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
    }
}