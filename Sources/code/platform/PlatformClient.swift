

import Foundation

public class PlatformClient {
    public let config: PlatformConfig

    public let auditTrail: AuditTrail

    public let billing: Billing

    public let catalog: Catalog

    public let common: Common

    public let communication: Communication

    public let companyProfile: CompanyProfile

    public let configuration: Configuration

    public let content: Content

    public let discount: Discount

    public let fileStorage: FileStorage

    public let finance: Finance

    public let lead: Lead

    public let serviceability: Serviceability

    public let order: Order

    public let payment: Payment

    public let theme: Theme

    public let webhook: Webhook

    public init(config: PlatformConfig) {
        self.config = config
        
        auditTrail = AuditTrail(config: config)
        
        billing = Billing(config: config)
        
        catalog = Catalog(config: config)
        
        common = Common(config: config)
        
        communication = Communication(config: config)
        
        companyProfile = CompanyProfile(config: config)
        
        configuration = Configuration(config: config)
        
        content = Content(config: config)
        
        discount = Discount(config: config)
        
        fileStorage = FileStorage(config: config)
        
        finance = Finance(config: config)
        
        lead = Lead(config: config)
        
        serviceability = Serviceability(config: config)
        
        order = Order(config: config)
        
        payment = Payment(config: config)
        
        theme = Theme(config: config)
        
        webhook = Webhook(config: config)
        
    }
    public func setLocationDetails(details: PlatformConfig.LocationDetails?){
        config.locationDetails = details
    }
    public func applicationClient(id: String) -> ApplicationClient {
        return ApplicationClient(applicationId: id, config: config)
    }

    public class ApplicationClient {
        var config: PlatformConfig
        var companyId: String
        var applicationId: String

        
        public let analytics: Analytics
        
        public let cart: Cart
        
        public let catalog: Catalog
        
        public let communication: Communication
        
        public let configuration: Configuration
        
        public let content: Content
        
        public let fileStorage: FileStorage
        
        public let lead: Lead
        
        public let serviceability: Serviceability
        
        public let order: Order
        
        public let partner: Partner
        
        public let payment: Payment
        
        public let rewards: Rewards
        
        public let share: Share
        
        public let theme: Theme
        
        public let user: User
        
        
        public init(applicationId: String, config: PlatformConfig) {
            self.config = config
            self.companyId = config.companyId
            self.applicationId = applicationId

            
            analytics = Analytics(config: config, applicationId: applicationId)
            
            cart = Cart(config: config, applicationId: applicationId)
            
            catalog = Catalog(config: config, applicationId: applicationId)
            
            communication = Communication(config: config, applicationId: applicationId)
            
            configuration = Configuration(config: config, applicationId: applicationId)
            
            content = Content(config: config, applicationId: applicationId)
            
            fileStorage = FileStorage(config: config, applicationId: applicationId)
            
            lead = Lead(config: config, applicationId: applicationId)
            
            serviceability = Serviceability(config: config, applicationId: applicationId)
            
            order = Order(config: config, applicationId: applicationId)
            
            partner = Partner(config: config, applicationId: applicationId)
            
            payment = Payment(config: config, applicationId: applicationId)
            
            rewards = Rewards(config: config, applicationId: applicationId)
            
            share = Share(config: config, applicationId: applicationId)
            
            theme = Theme(config: config, applicationId: applicationId)
            
            user = User(config: config, applicationId: applicationId)
            
        }

        
            
        public class Analytics {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Executes given sql(Base64 Encoded) query
            * Description: Query click events data
            **/
            public func executeJobForProvidedParametersV2(
                body: JobExecute,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: JobExecutionResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/job/execute",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(JobExecutionResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Initiates download job
            * Description: Initiates download job and returns job name
            **/
            public func startDownloadForQueryV2(
                exportType: String,
                body: FileDownloadRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["export_type"] = exportType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/job/download",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checks download job status
            * Description: Takes job name in path param to check the status of job Returns file URL if downloading is done else returns status of job
            **/
            public func checkJobStatusByNameV2(
                fileName: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: JobStatus?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/job/\(fileName)/status",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(JobStatus.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Cart {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create a new coupon.
            * Description: Generate and add a new coupon to the cart.
            **/
            public func createCoupon(
                body: CouponAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve available coupons.
            * Description: Retrieve a list of all created coupons for specific sales channel. It also supports searching based on text search, pagination and other flags to filter coupons.
            **/
            public func getCoupons(
                pageNo: Int?,
                pageSize: Int?,
                isArchived: Bool?,
                title: String?,
                isPublic: Bool?,
                isDisplay: Bool?,
                typeSlug: String?,
                code: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = isArchived {
                    xQuery["is_archived"] = value
                }
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                if let value = isPublic {
                    xQuery["is_public"] = value
                }
                
                if let value = isDisplay {
                    xQuery["is_display"] = value
                }
                
                if let value = typeSlug {
                    xQuery["type_slug"] = value
                }
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getCoupons
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getCouponsPaginator(
                pageSize: Int?,
                isArchived: Bool?,
                title: String?,
                isPublic: Bool?,
                isDisplay: Bool?,
                typeSlug: String?,
                code: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<CouponsResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<CouponsResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getCoupons(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        isArchived: isArchived,
                        title: title,
                        isPublic: isPublic,
                        isDisplay: isDisplay,
                        typeSlug: typeSlug,
                        code: code,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get a list of all coupon tags associated with a application.
            * Description: This API helps to get coupon tags data associated to a particular application.
            **/
            public func getCouponTags(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsViewResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon-tags",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a list of all Promotion tags associated with a application.
            * Description: This API helps to get Promotion tags data associated to a particular application.
            **/
            public func getPromotionTags(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsViewResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promo-tags",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get coupon details by ID
            * Description: Retrieve details of a specific coupon by providing its unique identifier to obtain information such as coupon type, rules, validity period and other related information.
            **/
            public func getCouponById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponUpdate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a coupon
            * Description: Update the details of an existing coupon by specifying its unique identifier. This includes modifying coupon attributes such as discount percentage, validity period, and associated conditions. Leveraging this functionality allows businesses to quickly adapt their promotional strategies to changing market dynamics.
            **/
            public func updateCoupon(
                id: String,
                body: CouponUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update coupon archive state and schedule
            * Description: Seller can make partial adjustments of an existing coupon by specifying its unique identifier. It enables businesses to modify specific attributes of the coupon while preserving other details intact.
            **/
            public func updateCouponPartially(
                id: String,
                body: CouponPartialUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List promotions
            * Description: Retrieve a list of all created promotions for specific sales channel. It also supports efficient text search and pagination functionalities, ensuring optimized promotion listing for streamlined navigation and management.
            **/
            public func getPromotions(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                promoGroup: String?,
                promotionType: String?,
                fpPanel: String?,
                promotionId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = promoGroup {
                    xQuery["promo_group"] = value
                }
                
                if let value = promotionType {
                    xQuery["promotion_type"] = value
                }
                
                if let value = fpPanel {
                    xQuery["fp_panel"] = value
                }
                
                if let value = promotionId {
                    xQuery["promotion_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getPromotions
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getPromotionsPaginator(
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                promoGroup: String?,
                promotionType: String?,
                fpPanel: String?,
                promotionId: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<PromotionsResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<PromotionsResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getPromotions(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        isActive: isActive,
                        promoGroup: promoGroup,
                        promotionType: promotionType,
                        fpPanel: fpPanel,
                        promotionId: promotionId,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create a promotion
            * Description: Creates a new promotion based on the selected promotion type. Sellers can choose from multiple supported promotion types, including percentage value, fixed amount value, bundled discount, buy X get Y items, and more, along with customizable promotion criteria to meet specific business requirements.
            **/
            public func createPromotion(
                body: PromotionAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionAddResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionAddResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a promotion
            * Description: Retrieve details of a specific promotion by providing its unique identifier to obtain information such as promotion type, rules, validity period and other related information.
            **/
            public func getPromotionById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionUpdateResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdateResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a promotion
            * Description: Update the details of an existing promotion by specifying its unique identifier. This includes modifying promotion attributes such as discount percentage, validity period, and associated conditions. Leveraging this functionality allows businesses to quickly adapt their promotional strategies to changing market dynamics.
            **/
            public func updatePromotion(
                id: String,
                body: PromotionUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionUpdateResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdateResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Partially update a promotion.
            * Description: Seller can make partial adjustments of an existing promotion by specifying its unique identifier. It enables businesses to modify specific attributes of the promotion while preserving other details intact.
            **/
            public func updatePromotionPartially(
                id: String,
                body: PromotionPartialUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get promotion and coupon type
            * Description: Retrieve the configuration settings related to promotions and coupons for a specific seller. It provides details of the supported types of coupons and promotions along with their descriptions, examples, and related attributes.
            **/
            public func getPromosCouponConfig(
                entityType: String?,
                isHidden: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ActivePromosResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = entityType {
                    xQuery["entity_type"] = value
                }
                
                if let value = isHidden {
                    xQuery["is_hidden"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promo-coupons",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ActivePromosResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get cart meta configuration by id
            * Description: Get cart meta configuration by id
            **/
            public func getCartMetaConfig(
                cartMetaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration/\(cartMetaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart metadata configuration.
            * Description: Modify the configuration settings for cart metadata.
            **/
            public func updateCartMetaConfig(
                cartMetaId: String,
                body: CartMetaConfigUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigUpdate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration/\(cartMetaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete cart meta configuration
            * Description: Delete cart meta configuration
            **/
            public func deleteCartMetaConfig(
                cartMetaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration/\(cartMetaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Fetch cart meta configuration
            * Description: Fetch cart meta configuration
            **/
            public func getCartMetaConfigs(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create new cart meta configuration
            * Description: Create custom meta configurations for carts associated with a specific sales channel. By specifying the company ID and application ID, seller can define unique cart settings, including preferences, rules, and constraints, tailored to their business needs.
            **/
            public func createCartMetaConfig(
                body: CartMetaConfigAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigAddResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigAddResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create new price adjustment
            * Description: Create new price adjustment
            **/
            public func addPriceAdjustment(
                body: PriceAdjustmentAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddPriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddPriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a list of all price adjustments associated with a cart
            * Description: This API helps to get price adjustments data associated to a particular cart
            **/
            public func getPriceAdjustments(
                cartId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["cart_id"] = cartId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update price adjustments.
            * Description: Modify price adjustments for items in the cart.
            **/
            public func updatePriceAdjustment(
                id: String,
                body: PriceAdjustmentUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdatePriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdatePriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove price adjustments.
            * Description: Remove price adjustments applied to items in the cart.
            **/
            public func removePriceAdjustment(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get and validate cart items
            * Description: Retrieve cart details for a provided list of cart items and validate its contents. This ensures accuracy and completeness in cart information, including item quantities, prices, discounts, and applicable taxes.
            **/
            public func fetchAndvalidateCartItems(
                body: OpenapiCartDetailsRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OpenapiCartDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenapiCartDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check cart serviceability
            * Description: Verify the serviceability of items in the cart at a specific pin code and ensure accurate delivery promises. System checks each item's availability and delivery feasibility, providing real-time information on serviceability and estimated delivery times.
            **/
            public func checkCartServiceability(
                body: OpenApiCartServiceabilityRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OpenApiCartServiceabilityResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/serviceability",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCartServiceabilityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checkout cart
            * Description: The checkout cart initiates the order creation process based on the selected address and payment method. It revalidates the cart details to ensure safe and seamless order placement.
            **/
            public func checkoutCart(
                body: OpenApiPlatformCheckoutReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OpenApiCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/checkout",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get abandoned carts
            * Description: Retrieve the list of abandoned carts that have been active for the specified period of time and have not yet been archived for the specific sales channel.
            **/
            public func getAbandonedCart(
                pageNo: Int?,
                pageSize: Int?,
                fromDate: String?,
                toDate: String?,
                anonymousCart: Bool?,
                lastId: String?,
                sortOn: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AbandonedCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                if let value = anonymousCart {
                    xQuery["anonymous_cart"] = value
                }
                
                if let value = lastId {
                    xQuery["last_id"] = value
                }
                
                if let value = sortOn {
                    xQuery["sort_on"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AbandonedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAbandonedCart
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAbandonedCartPaginator(
                pageSize: Int?,
                fromDate: String?,
                toDate: String?,
                anonymousCart: Bool?,
                lastId: String?,
                sortOn: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<AbandonedCartResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<AbandonedCartResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAbandonedCart(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        fromDate: fromDate,
                        toDate: toDate,
                        anonymousCart: anonymousCart,
                        lastId: lastId,
                        sortOn: sortOn,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get abandoned cart details
            * Description: Retrieves abandoned cart details linked to a specific customer using a unique cart ID. It offers an overview of the items, quantities, prices, and other relevant information associated with the cart.
            **/
            public func getAbandonedCartDetails(
                id: String?,
                i: Bool?,
                b: Bool?,
                c: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/cart/detail",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add items to abandoned cart
            * Description: Add product items to the customer's existing shopping cart. If there is no existing cart associated with the customer, it creates a new one and adds the items to it.
            **/
            public func addItems(
                cartId: String,
                b: Bool?,
                body: AddCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart items
            * Description: Customers can modify added product attributes such as quantity and size, as well as remove items from the cart.
            **/
            public func updateCart(
                cartId: String,
                b: Bool?,
                body: UpdateCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get coupon option values
            * Description: Retrieves the available values for coupon options used to create and update coupons.
            **/
            public func getCouponOptionValues(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponOptions?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_options",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponOptions.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check if coupon is already created with coupon code
            * Description: Validates the presence of a coupon code for the specified sales channel to verify whether the provided code already exists or not.
            **/
            public func getCouponCodeExists(
                code: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check if promotion is already created with promotion code
            * Description: Validates the presence of a promotion code for the specified sales channel to verify whether the provided code already exists or not.
            **/
            public func getPromotionCodeExists(
                code: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Fynd order with overriding cart details
            * Description: Overrides the cart's checkout process with a new provided cart items. It provides flexibility in customizing checkout flows to meet specific business requirements, enhancing the user experience and optimizing order processing workflows.
            **/
            public func overrideCart(
                body: OverrideCheckoutReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OverrideCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout/over-ride",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OverrideCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Share cart link
            * Description: Generate a unique shareable link for the customer's cart for a specific sales channel. This link enables easy sharing of the cart contents with other users, facilitating collaborative shopping experiences.
            **/
            public func getCartShareLink(
                body: GetShareCartLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetShareCartLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetShareCartLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get details of a shared cart
            * Description: Use this API to get the shared cart details as per the token generated using the share-cart API.
            **/
            public func getCartSharedItems(
                token: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart/\(token)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update shared cart items
            * Description: Customer can either merge or replace shared cart items with existing cart.
            **/
            public func updateCartWithSharedItems(
                token: String,
                action: String,
                cartId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart/\(token)/\(action)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get cart list for store os user
            * Description: Retrieve the list of active carts associated with a specific customer
            **/
            public func getCartList(
                fromDate: String?,
                toDate: String?,
                filterOn: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MultiCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                if let value = filterOn {
                    xQuery["filter_on"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart-list",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MultiCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart user details.
            * Description: Modify the cart user to a new valid customer for the provided customer ID.
            **/
            public func updateCartUser(
                id: String?,
                body: UpdateUserCartMapping,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserCartMappingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/update-user",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserCartMappingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Count items in the customer's cart
            * Description: Use this API to get the total number of items present in cart.
            **/
            public func getItemCount(
                id: String?,
                buyNow: Bool?,
                cartType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartItemCountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/basic",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartItemCountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add items to cart
            * Description: Add product items to the customer's existing shopping cart. If there is no existing cart associated with the customer, it creates a new one and adds the items to it.
            **/
            public func platformAddItems(
                i: Bool?,
                b: Bool?,
                buyNow: Bool?,
                id: String?,
                cartType: String?,
                body: PlatformAddCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Fetch all items added to the customer cart using cart id
            * Description: Use this API to get details of all the items added to a cart.
            **/
            public func getCart(
                id: String?,
                userId: String?,
                i: Bool?,
                b: Bool?,
                assignCardId: Double?,
                buyNow: Bool?,
                cartType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = assignCardId {
                    xQuery["assign_card_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart items
            * Description: Customers can modify added product attributes such as quantity and size, as well as remove items from the cart.
            **/
            public func platformUpdateCart(
                id: String?,
                i: Bool?,
                orderType: String?,
                b: Bool?,
                buyNow: Bool?,
                cartType: String?,
                body: PlatformUpdateCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a cart
            * Description: Delete all items from the user's cart and resets it to its initial state, providing a clean slate for new selections.
            **/
            public func deleteCart(
                id: String?,
                cartType: String?,
                body: DeleteCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_archive",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List coupons
            * Description: Retrieve a list of all available coupons that customer can apply to their carts. It provides details about each coupon, including its code, discount amount, and applicable conditions.
            **/
            public func getAppCoupons(
                id: String?,
                buyNow: Bool?,
                slug: String?,
                storeId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCouponResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = storeId {
                    xQuery["store_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCouponResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Apply a coupon to the cart.
            * Description: Apply a coupon code to the customer's cart to trigger discounts on eligible items
            **/
            public func applyCoupon(
                i: Bool?,
                b: Bool?,
                p: Bool?,
                id: String?,
                buyNow: Bool?,
                body: ApplyCouponRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = p {
                    xQuery["p"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove Applied Coupon for platform pos user
            * Description: Remove an applied coupon from the customer's cart, thereby removing the associated discount from the cart total.
            **/
            public func removeCoupon(
                uid: String?,
                buyNow: Bool?,
                cartType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add address to an account
            * Description: Use this API to add an address to an account.
            **/
            public func addAddress(
                body: PlatformAddress,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SaveAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SaveAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a list of addresses for a customer
            * Description: Retrieves a list of all addresses saved by the customer, simplifying the checkout process by offering pre-saved address options for delivery.
            **/
            public func getAddresses(
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformGetAddressesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = mobileNo {
                    xQuery["mobile_no"] = value
                }
                
                if let value = checkoutMode {
                    xQuery["checkout_mode"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = isDefault {
                    xQuery["is_default"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformGetAddressesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get details for a single customer address
            * Description: Retrieve a specific customer address stored in the system by providing its unique identifier. This API provides detailed information about the address, including the recipient's name, address, city, postal code, and other relevant details.
            **/
            public func getAddressById(
                id: String,
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformAddress?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = mobileNo {
                    xQuery["mobile_no"] = value
                }
                
                if let value = checkoutMode {
                    xQuery["checkout_mode"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = isDefault {
                    xQuery["is_default"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformAddress.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Updates an existing customer address
            * Description: Update the user address
            **/
            public func updateAddress(
                id: String,
                body: PlatformAddress,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Removes an address from a customer's address list
            * Description: Remove an existing customer address from the system.
            **/
            public func removeAddress(
                id: String,
                userId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select customer address for order processing
            * Description: Select an address from the saved customer addresses and validates the availability of items in the cart. Additionally, it verifies and updates the delivery promise based on the selected address.
            **/
            public func selectAddress(
                cartId: String?,
                buyNow: Bool?,
                i: Bool?,
                b: Bool?,
                body: PlatformSelectCartAddressRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/select-address",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get shipments details
            * Description: Use this API to get shipment details, expected delivery date, items and price breakup of the shipment.
            **/
            public func getShipments(
                pickAtStoreUid: Int?,
                orderingStoreId: Int?,
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pickAtStoreUid {
                    xQuery["pick_at_store_uid"] = value
                }
                
                if let value = orderingStoreId {
                    xQuery["ordering_store_id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = p {
                    xQuery["p"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = addressId {
                    xQuery["address_id"] = value
                }
                
                if let value = areaCode {
                    xQuery["area_code"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update shipments
            * Description: Update the quantity or delivery type of the shipments. Customers can switch the order type from Home Delivery to Pick At Store and vice versa.
            **/
            public func updateShipments(
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                body: UpdateCartShipmentRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = p {
                    xQuery["p"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = addressId {
                    xQuery["address_id"] = value
                }
                
                if let value = areaCode {
                    xQuery["area_code"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart metadata
            * Description: Add or modify metadata associated with a cart, which includes customer preferences, delivery instructions, or any special requirements related to the cart items.
            **/
            public func updateCartMeta(
                id: String?,
                buyNow: Bool?,
                userId: String?,
                body: PlatformCartMetaRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/meta",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checkout cart
            * Description: The checkout cart initiates the order creation process based on the selected address and payment method. It revalidates the cart details to ensure safe and seamless order placement.
            **/
            public func platformCheckoutCart(
                id: String?,
                cartType: String?,
                body: PlatformCartCheckoutDetailRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get delivery modes
            * Description: Retrieve a list of delivery modes (home delivery/store pickup) along with a list of available pickup stores for a given cart at a specified PIN Code.
            **/
            public func getAvailableDeliveryModes(
                areaCode: String,
                id: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDeliveryModesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["area_code"] = areaCode
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/available-delivery-mode",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDeliveryModesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Store Address
            * Description: Retrieve store details by entering the unique identifier of the pickup stores. Store details include the seller's name, contact information such as email address or phone number and business address.
            **/
            public func getStoreAddressByUid(
                storeUid: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["store_uid"] = storeUid
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/store-address",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select payment mode
            * Description: Customers can select a preferred payment mode from available options during the cart checkout process to securely and efficiently complete their transaction.
            **/
            public func selectPaymentMode(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate applied coupon
            * Description: Validates the applicability of a coupon code for the selected payment mode for the existing cart. This ensures the coupon's validity before proceeding with the payment process, enhancing user experience and preventing potential errors during transactions.
            **/
            public func validateCouponForPayment(
                id: String?,
                buyNow: Bool?,
                addressId: String?,
                paymentMode: String?,
                paymentIdentifier: String?,
                aggregatorName: String?,
                merchantCode: String?,
                iin: String?,
                network: String?,
                type: String?,
                cardId: String?,
                cartType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentCouponValidate?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = addressId {
                    xQuery["address_id"] = value
                }
                
                if let value = paymentMode {
                    xQuery["payment_mode"] = value
                }
                
                if let value = paymentIdentifier {
                    xQuery["payment_identifier"] = value
                }
                
                if let value = aggregatorName {
                    xQuery["aggregator_name"] = value
                }
                
                if let value = merchantCode {
                    xQuery["merchant_code"] = value
                }
                
                if let value = iin {
                    xQuery["iin"] = value
                }
                
                if let value = network {
                    xQuery["network"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = cardId {
                    xQuery["card_id"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment/validate/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCouponValidate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Cart checkout (latest)
            * Description: The checkout cart initiates the order creation process based on the items in the user’s cart,  their selected address, and chosen payment methods. It also supports multiple payment method  options and revalidates the cart details to ensure a secure and seamless order placement.
            **/
            public func platformCheckoutCartV2(
                id: String?,
                cartType: String?,
                body: PlatformCartCheckoutDetailV2Request,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select payment mode (latest)
            * Description: Selection of payment mode that supports multiple MOP(mode of payment).
            **/
            public func selectPaymentModeV2(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequestV2,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Catalog {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get catalog insights.
            * Description: Retrieve the count of catalog related data like products, brands, departments and categories that have been made live as per configuration of the application.
            **/
            public func getCatalogInsights(
                brand: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CatalogInsightResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = brand {
                    xQuery["brand"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/analytics/insights",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CatalogInsightResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application brand listing.
            * Description: Retrieve brand listings related to the application. A brand is the name under which a product is being sold
            **/
            public func getApplicationBrandListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationBrandListingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationBrandListingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrandListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandListingPaginator(
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationBrandListingSchema> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationBrandListingSchema>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrandListing(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application brand.
            * Description: Modify data associated to the brand for that particular sales channel.
            **/
            public func updateAppBrand(
                brandUid: Int,
                body: ApplicationBrandJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand/\(brandUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application brands.
            * Description: List all the brands. A brand is the name under which a product is being sold.
            **/
            public func getApplicationBrands(
                department: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = department {
                    xQuery["department"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = brandId {
                    xQuery["brand_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brands",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrands
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandsPaginator(
                department: String?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrands(
                        department: department,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        brandId: brandId,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get categories.
            * Description: Retrieve a list of categories. Optionally pass filter the brands by the department.
            **/
            public func getCategories(
                department: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CategoryListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = department {
                    xQuery["department"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/categories",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CategoryListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application category listing.
            * Description: Retrieve category listings related to the application. A brand is the name under which a product is being sold.
            **/
            public func getApplicationCategoryListing(
                departmentId: Int?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationCategoryListingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = departmentId {
                    xQuery["department_id"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationCategoryListingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationCategoryListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationCategoryListingPaginator(
                departmentId: Int?,
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationCategoryListingSchema> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationCategoryListingSchema>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationCategoryListing(
                        departmentId: departmentId,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application category.
            * Description: Modify category data related to the application. Helps to update data associated to a item custom meta.
            **/
            public func updateAppCategory(
                categoryUid: Int,
                body: ApplicationCategoryJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category/\(categoryUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add a Collection
            * Description: Create a collection to the catalog.
            **/
            public func createCollection(
                body: CreateCollection,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CollectionCreateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CollectionCreateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve all collections.
            * Description: A Collection allows you to organize your products into hierarchical groups.
            **/
            public func getAllCollections(
                q: String?,
                scheduleStatus: String?,
                type: String?,
                tag: [String]?,
                isActive: Bool?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCollectionListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = scheduleStatus {
                    xQuery["schedule_status"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = tag {
                    xQuery["tag"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get values of the selected value for the filter options.
            * Description: Get query filters keys to configure a collection
            **/
            public func getApplicationFilterValues(
                filterKey: String,
                c: String?,
                collectionId: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetQueryFiltersValuesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                if let value = collectionId {
                    xQuery["collection_id"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filter-options/\(filterKey)/values",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersValuesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get filters keys of the filter options.
            * Description: Get query filters keys to configure a collection
            **/
            public func getApplicationFilterKeys(
                c: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetQueryFiltersKeysResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filter-options/keys",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersKeysResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve query filters.
            * Description: Retrieve query filters to configure a collection
            **/
            public func getQueryFilters(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetQueryFiltersResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/query-options",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get the items for a collection
            * Description: Get items from a collection specified by its `id`.
            **/
            public func getCollectionItems(
                id: String,
                sortOn: String?,
                pageSize: Int?,
                pageNo: Int?,
                isPinned: Bool?,
                q: String?,
                isExcluded: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCollectionItemsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = sortOn {
                    xQuery["sort_on"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = isPinned {
                    xQuery["is_pinned"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = isExcluded {
                    xQuery["is_excluded"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionItemsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Clear priorities set for collection items.
            * Description: Clear priorities set for collection items.
            **/
            public func clearCollectionItemsPriority(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add items to a collection
            * Description: Adds items to a collection specified by its `id`. See `CollectionItemRequest` for the list of attributes needed to add items to an collection.
            **/
            public func addCollectionItems(
                id: String,
                body: CollectionItemUpdateSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get collection details.
            * Description: Get the details of a collection by its slug.
            **/
            public func getCollectionDetail(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCollectionDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a collection
            * Description: Update a collection by it's id. On successful request, returns the updated collection
            **/
            public func updateCollection(
                id: String,
                body: UpdateCollection,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a collection.
            * Description: Delete a collection by it's id. Returns an object that tells whether the collection was deleted successfully
            **/
            public func deleteCollection(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application department listing.
            * Description: Retrieve department listings related to the application. Departments are a way to categorise similar products. A product can lie in multiple departments.
            **/
            public func getApplicationDepartmentListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationDepartmentListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDepartmentListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationDepartmentListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationDepartmentListingPaginator(
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationDepartmentListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationDepartmentListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationDepartmentListing(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application department.
            * Description: Modify department data related to the application.
            **/
            public func updateAppDepartment(
                departmentUid: Int,
                body: ApplicationDepartmentJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department/\(departmentUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get filter details for application
            * Description: configured details for catalog.
            **/
            public func getConfigurationsFilterMetadata(
                filter: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: FilterResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/metadata/\(filter)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FilterResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get departments.
            * Description: Retrieve a list of departments. Departments are a way to categorise similar products. A product can lie in multiple departments.
            **/
            public func getDepartments(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DepartmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/departments",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DepartmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application inventory.
            * Description: Retrieve inventory data related to the application. Retrieve the available Inventory of the products. Use this API to get the Inventory status of products with the filters of timestamp, store_ids, brand_ids, item_id, Items, Pagination
            **/
            public func getAppInventory(
                itemIds: [Int]?,
                storeIds: [Int]?,
                brandIds: [Int]?,
                sellerIdentifiers: [String]?,
                timestamp: String?,
                pageSize: Int?,
                pageId: String?,
                qtyGt: Int?,
                qtyLt: Int?,
                qtyType: String?,
                fromDate: String?,
                toDate: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: InventoryStockResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                if let value = storeIds {
                    xQuery["store_ids"] = value
                }
                
                if let value = brandIds {
                    xQuery["brand_ids"] = value
                }
                
                if let value = sellerIdentifiers {
                    xQuery["seller_identifiers"] = value
                }
                
                if let value = timestamp {
                    xQuery["timestamp"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = qtyGt {
                    xQuery["qty_gt"] = value
                }
                
                if let value = qtyLt {
                    xQuery["qty_lt"] = value
                }
                
                if let value = qtyType {
                    xQuery["qty_type"] = value
                }
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/inventory",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventoryStockResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application locations.
            * Description: Retrieve locations specific to the application. View all the locations asscoiated to a application.
            **/
            public func getAppLocations(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageNo: Int?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                companyUids: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LocationListSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = storeType {
                    xQuery["store_type"] = value
                }
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = stage {
                    xQuery["stage"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = storeTypes {
                    xQuery["store_types"] = value
                }
                
                if let value = companyUids {
                    xQuery["company_uids"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/locations",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LocationListSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppLocations
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppLocationsPaginator(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                companyUids: [Int]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<LocationListSerializer> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<LocationListSerializer>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppLocations(
                        storeType: storeType,
                        uid: uid,
                        q: q,
                        stage: stage,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        tags: tags,
                        storeTypes: storeTypes,
                        companyUids: companyUids,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Retrieve configurations.
            * Description: Retrieve a configured details for catalog.
            **/
            public func getConfigurations(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create configuration for product listing.
            * Description: Add configuration for products & listing.
            **/
            public func createConfigurationProductListing(
                body: AppConfiguration,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve catalog configuration.
            * Description: Retrieve configuration meta details for the catalog.
            **/
            public func getCatalogConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCatalogConfigurationMetaData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/metadata",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCatalogConfigurationMetaData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve configuration by type.
            * Description: Retrieve configuration details based on a specific type in the catalog.
            **/
            public func getConfigurationByType(
                type: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogEntityConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(type)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogEntityConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create configuration by type.
            * Description: Add configuration for categories & brands.
            **/
            public func createConfigurationByType(
                type: String,
                body: AppConfiguration,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(type)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve application product data.
            * Description: Products are the core resource of an application. If successful, returns a Company Application Product resource in the response body depending upon filter sent.
            **/
            public func getAppProduct(
                itemId: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OwnerAppItemResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OwnerAppItemResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application product data.
            * Description: Allows to update data associated to a item custom meta.
            **/
            public func updateAppProduct(
                itemId: Int,
                body: ApplicationItemMeta,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application products.
            * Description: Retrieve products associated with the application. List all the products associated with a brand, collection or category in a requested sort order.
            **/
            public func getApplicationProducts(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageId: String?,
                pageSize: Int?,
                pageNo: Int?,
                pageType: String?,
                itemIds: [String]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = f {
                    xQuery["f"] = value
                }
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                if let value = filters {
                    xQuery["filters"] = value
                }
                
                if let value = isDependent {
                    xQuery["is_dependent"] = value
                }
                
                if let value = sortOn {
                    xQuery["sort_on"] = value
                }
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageType {
                    xQuery["page_type"] = value
                }
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationProducts
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationProductsPaginator(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageSize: Int?,
                itemIds: [String]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationProductListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationProductListingResponse>(pageSize: pageSize, type: "cursor")
                paginator.onPage = {
                    self.getApplicationProducts(
                        q: q,
                        f: f,
                        c: c,
                        filters: filters,
                        isDependent: isDependent,
                        sortOn: sortOn,
                        pageId: paginator.pageId,
                        pageSize: paginator.pageSize,
                        pageNo: paginator.pageNo,
                        pageType: paginator.type,
                        itemIds: itemIds,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageId = response.page.nextId
                            
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get discounted inventory by size identifier.
            * Description: Allows to retrieve Inventory data for particular company grouped by size and store.
            **/
            public func getDiscountedInventoryBySizeIdentifier(
                itemId: Int,
                sizeIdentifier: Int,
                pageNo: Int?,
                pageSize: Int?,
                locationIds: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: InventorySellerIdentifierResponsePaginated?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = locationIds {
                    xQuery["location_ids"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(itemId)/inventory/\(sizeIdentifier)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventorySellerIdentifierResponsePaginated.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get product details by slug.
            * Description: Retrieve detailed product information using a product slug. Products are the core resource of an application. Products can be associated by categories, collections, brands and more.
            **/
            public func getProductDetailBySlug(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ProductDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application products.
            * Description: Retrieve products specific to the application. Products are the core resource of an application. Products can be associated by categories, collections, brands and more.
            **/
            public func getAppProducts(
                brandIds: [Int]?,
                categoryIds: [Int]?,
                departmentIds: [Int]?,
                tags: [String]?,
                itemIds: [Int]?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RawProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = brandIds {
                    xQuery["brand_ids"] = value
                }
                
                if let value = categoryIds {
                    xQuery["category_ids"] = value
                }
                
                if let value = departmentIds {
                    xQuery["department_ids"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/raw-products",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RawProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Return configuration level set for an application
            * Description: Get Product Return configuration set at an application level
            **/
            public func getAppReturnConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Return configuration level set for an application
            * Description: Create Return configuration level set for an application.
            **/
            public func createAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Return configuration level set for an application
            * Description: Update Return configuration level set for an application.
            **/
            public func updateAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete Category level Application Return Configuration setttings
            * Description: Delete Category level Application Return Configuration setttings
            **/
            public func deleteAppCategoryReturnConfiguration(
                body: DeleteAppCategoryReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all category level configuration level set for an application
            * Description: Get all category level configuration level set for an application.
            **/
            public func getAppCategoryReturnConfig(
                q: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BaseAppCategoryReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BaseAppCategoryReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Category level Application Return Configuration setttings
            * Description: Create Category level Application Return Configuration setttings
            **/
            public func createAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Category level Application Return Configuration setttings
            * Description: Update Category level Application Return Configuration setttings
            **/
            public func updateAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom autocomplete rules.
            * Description: Generate and add custom autocomplete rules to the catalog.
            **/
            public func createCustomAutocompleteRule(
                body: CreateAutocompleteKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get autocomplete configuration.
            * Description: Custom Autocomplete Keyword allows you to map conditions with keywords to give you the ultimate results
            **/
            public func getAutocompleteConfig(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get autocomplete keyword details.
            * Description: Retrieve detailed information about a specific autocomplete keyword.
            **/
            public func getAutocompleteKeywordDetail(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAutocompleteWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update autocomplete keywords.
            * Description: Update a mapping by it's id. On successful request, returns the updated Keyword mapping
            **/
            public func updateAutocompleteKeyword(
                id: String,
                body: CreateAutocompleteKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAutocompleteWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete autocomplete keywords.
            * Description: Delete a keywords by it's id. Returns an object that tells whether the keywords was deleted successfully
            **/
            public func deleteAutocompleteKeyword(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create search rerank for an application
            * Description: This view allows you to create search rerank attributes for an application
            **/
            public func createSearchRerank(
                body: CreateSearchRerankRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateSearchRerankResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateSearchRerankResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get search rerank for an application
            * Description: This view allows you to create search rerank attributes for an application
            **/
            public func getSearchRerank(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchRerankResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchRerankResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get search rerank for an application
            * Description: This view allows you to retrieve search rerank attribute detail for an application
            **/
            public func getSearchRerankDetail(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchRerankDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchRerankDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update search rerank for an application
            * Description: This view allows you to update search rerank attribute for an application
            **/
            public func updateSearchRerankConfiguration(
                id: String,
                body: UpdateSearchRerankRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateSearchRerankResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateSearchRerankResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete search rerank configuration for an application
            * Description: This view allows you to delete search rerank configuration for an application
            **/
            public func deleteSearchRerankConfiguration(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteSearchRerankConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteSearchRerankConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create search configuration
            * Description: Create search configuration for the catalog.
            **/
            public func createSearchConfiguration(
                body: CreateSearchConfigurationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Search Configuration
            * Description: Get search configuration in the catalog.
            **/
            public func getSearchConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update search configuration for an application
            * Description: This view allows you to modify searchable attributes for an application
            **/
            public func updateSearchConfiguration(
                body: UpdateSearchConfigurationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete Search Configuration
            * Description: Delete search configuration in the catalog.
            **/
            public func deleteSearchConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom search keywords.
            * Description: Create a Custom Search Keywords. 
            **/
            public func createCustomKeyword(
                body: CreateSearchKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all search keywords.
            * Description: Custom Search Keyword allows you to map conditions with keywords to give you the ultimate results
            **/
            public func getAllSearchKeyword(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve search keywords.
            * Description: Retrieve a list of search keywords from the catalog.
            **/
            public func getSearchKeywords(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update search keywords.
            * Description: Update Search Keyword by its id. On successful request, returns the updated collection
            **/
            public func updateSearchKeywords(
                id: String,
                body: CreateSearchKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete search keywords.
            * Description: Delete a keywords by it's id. Returns an object that tells whether the keywords was deleted successfully
            **/
            public func deleteSearchKeywords(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application location.
            * Description: Modify location data related to the application. Helps to update data associated to a item custom meta
            **/
            public func updateAppLocation(
                storeUid: Int,
                body: ApplicationStoreJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/store/\(storeUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update 'Allow Single' setting.
            * Description: Modify allow single flag for filters of the application.
            **/
            public func updateAllowSingle(
                body: AllowSingleRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/filter/allow_single",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update default sorting.
            * Description: Modify the default sort key configuration for the application.
            **/
            public func updateDefaultSort(
                body: DefaultKeyRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/sort/default_key",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create listing configuration.
            * Description: Add configuration for catalog listing.
            **/
            public func createListingConfiguration(
                configType: String,
                body: AppConfigurationsFilter,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationsFilterResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsFilterResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve listing configurations.
            * Description: Retrieve the details of the application configured configurations of listing config types.
            **/
            public func getListingConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                uids: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetListingConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                if let value = uids {
                    xQuery["uids"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetListingConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create group configuration.
            * Description: Create configuration for group configuration types.
            **/
            public func createGroupConfiguration(
                configType: String,
                body: AppConfigurationCreateDetail,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve group configurations.
            * Description: Retrieve the details of the application configured configurations of group config types.
            **/
            public func getGroupConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                templateSlug: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                if let value = templateSlug {
                    xQuery["template_slug"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update group configuration.
            * Description: Modify the group configurations for the application.
            **/
            public func updateGroupConfiguration(
                configType: String,
                groupSlug: String,
                body: AppConfigurationDetail,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete group configuration.
            * Description: Delete configuration of the product config type of the application.
            **/
            public func deleteGroupConfiguration(
                configType: String,
                groupSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update listing configuration.
            * Description: Modify the details and settings of an existing listing configuration.
            **/
            public func updateListingConfiguration(
                configType: String,
                configId: String,
                body: AppConfigurationsFilterResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationsFilterResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/item/\(configId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsFilterResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete listing configuration.
            * Description: Remove a specific listing configuration from the catalog.
            **/
            public func deleteListingConfiguration(
                configType: String,
                configId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/item/\(configId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve configuration metadata.
            * Description: Retrieve the configuraion metadata details for catalog.
            **/
            public func getConfigurationMetadata(
                configType: String,
                templateSlug: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetConfigMetadataResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = templateSlug {
                    xQuery["template_slug"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/metadata",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigMetadataResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Create autocomplete settings config for an application
            * Description: This API allows to create autocomplete settings for an application.
            **/
            public func createAutocompleteSettings(
                body: AutocompleteRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AutocompleteUpsertResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/settings",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompleteUpsertResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get autocomplete settings config for an application
            * Description: This API allows to get autocomplete settings config for an application.
            **/
            public func getAutocompleteSettings(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AutocompleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/settings",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update autocomplete settings config for an application
            * Description: This API allows to update autocomplete settings for an application.
            **/
            public func updateAutocompleteSettings(
                id: String,
                body: AutocompleteRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AutocompleteUpsertResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/settings/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompleteUpsertResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get autocomplete suggestions as per config for an application
            * Description: This API allows to get autocomplete suggestions as per config.
            **/
            public func getAutocompletePreview(
                q: String?,
                categorySuggestion: Int?,
                brandSuggestion: Int?,
                collectionSuggestion: Int?,
                productSuggestion: Int?,
                querySuggestion: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AutocompletePreviewResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = categorySuggestion {
                    xQuery["category_suggestion"] = value
                }
                
                if let value = brandSuggestion {
                    xQuery["brand_suggestion"] = value
                }
                
                if let value = collectionSuggestion {
                    xQuery["collection_suggestion"] = value
                }
                
                if let value = productSuggestion {
                    xQuery["product_suggestion"] = value
                }
                
                if let value = querySuggestion {
                    xQuery["query_suggestion"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/preview",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompletePreviewResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Merchandising Rule's action details
            * Description: This allows you to create pin action of a merchandising rule.
            **/
            public func createMerchandisingRulePinAction(
                merchandisingRuleId: String,
                body: PinRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/pin",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's action details
            * Description: This allows you to update pin action of a merchandising rule.
            **/
            public func updateMerchandisingRulePinAction(
                merchandisingRuleId: String,
                body: PinRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/pin",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's action details
            * Description: This allows you to get details of pin action of a merchandising rule.
            **/
            public func getMerchandisingRulePinAction(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PinResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/pin",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PinResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Merchandising Rule's Hide action details
            * Description: This allows you to create hide action of a merchandising rule.
            **/
            public func createMerchandisingRuleHideAction(
                merchandisingRuleId: String,
                body: HideRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/hide",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's Hide action details
            * Description: This allows you to update hide action of a merchandising rule.
            **/
            public func updateMerchandisingRuleHideAction(
                merchandisingRuleId: String,
                body: HideRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/hide",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Hide action details
            * Description: This allows you to get details of hide action of a merchandising rule.
            **/
            public func getMerchandisingRuleHideAction(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: HideResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/hide",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(HideResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Merchandising Rule's Boost action details
            * Description: This allows you to create Boost action of a merchandising rule.
            **/
            public func createMerchandisingRuleBoostAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/boost",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's Boost action details
            * Description: This allows you to update Boost action of a merchandising rule.
            **/
            public func updateMerchandisingRuleBoostAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/boost",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Boost action details
            * Description: This allows you to get details of Boost action of a merchandising rule.
            **/
            public func getMerchandisingRuleBoostAction(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetMerchandisingRuleBoostAction?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/boost",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetMerchandisingRuleBoostAction.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Bury action details
            * Description: This allows you to create Bury action of a merchandising rule.
            **/
            public func createMerchandisingRuleBuryAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/bury",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's Bury action details
            * Description: This allows you to update Bury action of a merchandising rule.
            **/
            public func updateMerchandisingRuleBuryAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/bury",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Bury action details
            * Description: This allows you to get details of Bury action of a merchandising rule.
            **/
            public func getMerchandisingRuleBuryAction(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetMerchandisingRuleBuryAction?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/bury",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetMerchandisingRuleBuryAction.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a Merchandising Rule's query
            * Description: This allows you to Create a merchandising rule's query.
            **/
            public func createMerchandisingRuleQuery(
                body: MerchandisingRuleQueryPost,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MerchandiseQueryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/query",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchandiseQueryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's query details
            * Description: This allows you to get details of a merchandising rule's query.
            **/
            public func getMerchandisingQuery(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SearchResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/query",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SearchResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a Merchandising Rule's query
            * Description: This allows you to Update a merchandising rule's query.
            **/
            public func updateMerchandisingRuleQuery(
                merchandisingRuleId: String,
                body: MerchandisingRuleQueryPost,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/query",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save a Merchandising Rule
            * Description: This allows you to Save a merchandising rule's preview state.
            **/
            public func saveMerchandisingRules(
                merchandisingRuleId: String,
                body: MerchandisingRuleSave,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a Merchandising Rule
            * Description: This allows you to Update a merchandising rule.
            **/
            public func deleteMerchandisingRule(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of all Merchandising Rule's details
            * Description: This allows you to get details of all merchandising rule's details.
            **/
            public func getMerchandisingRules(
                pageId: String?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MerchandisingRulesList?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchandisingRulesList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a Merchandising Rule's preview
            * Description: This allows you to Update a merchandising rule's preview.
            **/
            public func deleteMerchandisingRulesPreview(
                merchandisingRuleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/preview",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get live preview of a Merchandising Rule
            * Description: This allows you to get live preview of a merchandising rule.
            **/
            public func getLivePreview(
                merchandisingRuleId: String,
                searchKeyword: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = searchKeyword {
                    xQuery["search_keyword"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/preview",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create price factory
            * Description: This API allows to create price factory.
            **/
            public func createAppPriceFactory(
                body: CreateAppPriceFactoryRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get price factory
            * Description: This API allows to get price factories.
            **/
            public func getAppPriceFactories(
                isActive: Bool?,
                factoryTypeId: String?,
                code: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppPriceFactoryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = factoryTypeId {
                    xQuery["factory_type_id"] = value
                }
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppPriceFactoryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get price factory
            * Description: This API allows to get price factory.
            **/
            public func getAppPriceFactory(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppPriceFactory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppPriceFactory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Edit a price factory
            * Description: This API allows to update price factory.
            **/
            public func editAppPriceFactory(
                id: String,
                body: EditAppPriceFactoryRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppPriceFactory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppPriceFactory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add products to price factory
            * Description: This API allows to add products in price factory.
            **/
            public func addProductsInPriceFactoryByZoneId(
                id: String,
                body: CreatePriceFactoryProductRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreatePriceFactoryProductResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/products",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePriceFactoryProductResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get products listed in price factory
            * Description: This API allows to get products in price factory.
            **/
            public func getProductsInPriceFactoryByZoneId(
                id: String,
                zoneId: String,
                itemId: Double?,
                q: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["zone_id"] = zoneId
                
                if let value = itemId {
                    xQuery["item_id"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/products",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add products in price factory in bulk
            * Description: This API allows to create bulk job for adding products in price factory.
            **/
            public func createProductPriceFactoryBulkJob(
                id: String,
                body: CreateAppPriceFactoryProductBulkJobRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Poll bulk job for adding products in price factory.
            * Description: This API allows to poll bulk job for adding products in price factory.
            **/
            public func pollProductPriceFactoryBulkJob(
                id: String,
                jobId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobPollResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/poll/\(jobId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobPollResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate bulk job for adding products in price factory.
            * Description: This API allows to validate bulk job for adding products in price factory.
            **/
            public func validateProductPriceFactoryBulkJob(
                id: String,
                jobId: String,
                body: CreateAppPriceFactoryProductBulkJobRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobValidateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/bulk/\(jobId)/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobValidateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Process bulk job for adding products in price factory.
            * Description: This API allows to process bulk job for adding products in price factory.
            **/
            public func processProductPriceFactoryBulkJob(
                id: String,
                jobId: String,
                body: CreateAppPriceFactoryProductBulkJobRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/bulk/\(jobId)/process",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Export products of price factory.
            * Description: This API allows to export products in price factory.
            **/
            public func exportProductsInPriceFactory(
                id: String,
                body: CreateAppPriceFactoryProductExportJobRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductExportJobResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/export",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductExportJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: poll job for adding products in price factory
            * Description: This API allows to poll job for adding products in price factory.
            **/
            public func pollPriceFactoryJobs(
                id: String,
                startDate: String?,
                endDate: String?,
                stage: [String]?,
                isActive: Bool?,
                q: String?,
                type: [String]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductExportJobPollResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = startDate {
                    xQuery["start_date"] = value
                }
                
                if let value = endDate {
                    xQuery["end_date"] = value
                }
                
                if let value = stage {
                    xQuery["stage"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/owner-application/\(applicationId)/price-factory/\(id)/poll",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductExportJobPollResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get product prices
            * Description: This API allows to get product prices.
            **/
            public func getAppProductPrices(
                itemIds: [Int]?,
                factoryTypeIds: [String]?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ProductPrices?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                if let value = factoryTypeIds {
                    xQuery["factory_type_ids"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-prices",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductPrices.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List search synonyms for an application
            * Description: This view allows you to list down the available synonyms for an application
            **/
            public func getSynonyms(
                id: String?,
                name: String?,
                type: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = name {
                    xQuery["name"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonyms",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: create oneway/ twoway search synonyms for an application
            * Description: This view allows you to create search synonyms for an application
            **/
            public func createSynonyms(
                body: SynonymCreateRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymCreateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonyms",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymCreateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update synonym attributes for an application
            * Description: This view allows you to modify synonym attributes for a particular application
            **/
            public func updateSynonyms(
                id: String,
                body: SynonymCreateRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymUpdateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonym/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymUpdateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete synonym for an application.
            * Description: This view allows you to delete synonym for an application
            **/
            public func deleteSynonym(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonym",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Export synonym for an application.
            * Description: This API allows you to start a job creates a csv file containing all the synonyms for that application
            **/
            public func exportSynonyms(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymExportResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/export",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymExportResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sample file for bulk synonyms upload
            * Description: This api return you the sample file for bulk synonyms upload
            **/
            public func sampleBulkSynonymsFile(
                type: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["type"] = type
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/sample",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "text/csv",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Upload csv/xls/xlsx file with synonyms
            * Description: This API allows you to upload a list of one-way/two-way synonyms
            **/
            public func uploadSynonyms(
                body: SynonymUploadRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymUploadResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymUploadResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate csv/xls/xlsx file with synonyms
            * Description: This view allows you to validate the file uploaded for synonyms
            **/
            public func validateBulkSynonyms(
                body: SynonymBulkValidateRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymBulkValidateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymBulkValidateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: process csv/xls/xlsx file with synonyms and insert onto db
            * Description: This view allows you to process a list of one-way/two-way synonyms
            **/
            public func processBulkSynonyms(
                body: SynonymBulkProcessRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymBulkProcessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/process",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymBulkProcessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: poll a particular synonym bulk job for status
            * Description: This view allows you to poll for the status of the respective bulk upload job
            **/
            public func pollBulkSynonyms(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SynonymBulkPollResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/poll/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymBulkPollResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get pricing of a product
            * Description: Retrieve the discounted price of a specific product for a given application. This endpoint allows filtering by stores, factory types, and sellers
            **/
            public func getAppPriceById(
                itemId: Int,
                storeIds: [Int]?,
                factoryTypeIds: [String]?,
                sellerId: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppPriceByIdResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = storeIds {
                    xQuery["store_ids"] = value
                }
                
                if let value = factoryTypeIds {
                    xQuery["factory_type_ids"] = value
                }
                
                if let value = sellerId {
                    xQuery["seller_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/item/\(itemId)/price",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppPriceByIdResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Communication {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            /**
            *
            * Summary: Send communication asynchronously.
            * Description: Initiate and send communication with the option for asynchronous processing.
            **/
            public func sendEngineCommunicationSynchronously(
                body: EngineRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SendInstantResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-sync",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendInstantResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Send communication asynchronously.
            * Description: Initiate and send communication with the option for asynchronous processing.
            **/
            public func sendCommunicationAsynchronously(
                body: EngineRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EngineResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-async",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EngineResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Send communication synchronously.
            * Description: Initiate and send communication in real-time.
            **/
            public func sendCommunicationSynchronously(
                body: EngineRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SendInstantResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-instant",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendInstantResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Get event subscriptions.
            * Description: Retrieve a list of event subscriptions related to communication.
            **/
            public func getEventSubscriptions(
                pageNo: Int?,
                pageSize: Int?,
                populate: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscriptions?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = populate {
                    xQuery["populate"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptions.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getEventSubscriptions
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getEventSubscriptionsPaginator(
                pageSize: Int?,
                populate: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<EventSubscriptions> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<EventSubscriptions>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getEventSubscriptions(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        populate: populate,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func createEventSubscriptions(
                body: SubscriptionsObject,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create event subscriptions by bulk
            * Description: Create event subscriptions by bulk
            **/
            public func createEventSubscriptionsByBulk(
                body: EventSubscriptionsBulkUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [EventSubscriptionsBulkUpdateResponse]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/bulkUpdate",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([EventSubscriptionsBulkUpdateResponse].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get event subscriptions by id
            * Description: Get event subscriptions by id
            **/
            public func getEventSubscriptionsById(
                populate: String?,
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = populate {
                    xQuery["populate"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func editEventSubscriptions(
                id: String,
                body: SubscriptionsObjectRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func deleteEventSubscriptionsById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get email templates.
            * Description: Retrieve a list of available email communication templates.
            **/
            public func getEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getEmailTemplates
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getEmailTemplatesPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<EmailTemplates> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<EmailTemplates>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getEmailTemplates(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create email template.
            * Description: Generate and add a new email communication template.
            **/
            public func createEmailTemplate(
                body: EmailTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get email template by ID.
            * Description: Retrieve detailed information about a specific email communication template.
            **/
            public func getEmailTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update email template by ID.
            * Description: Modify the content and settings of a specific email communication template.
            **/
            public func updateEmailTemplateById(
                id: String,
                body: EmailTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete email template by ID.
            * Description: Email templates are predefined formats linked to various events for delivering messages to users. Remove a specific email communication template by its ID.
            **/
            public func deleteEmailTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get system email templates.
            * Description: Retrieve system-defined email communication templates.
            **/
            public func getSystemEmailTemplates(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [SystemEmailTemplate]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/system-templates",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([SystemEmailTemplate].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get subscribed email templates.
            * Description: Retrieve email communication templates that are subscribed to.
            **/
            public func getSubscribedEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SubscribedEmailTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SubscribedEmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get email providers.
            * Description: Retrieve a list of email communication providers.
            **/
            public func getEmailProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProviders?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getEmailProviders
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getEmailProvidersPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<EmailProviders> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<EmailProviders>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getEmailProviders(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create email provider.
            * Description: Generate and add a new email communication provider.
            **/
            public func createEmailProvider(
                body: EmailProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get email provider by ID.
            * Description: Retrieve detailed information about a specific email communication provider.
            **/
            public func getEmailProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update email provider by ID.
            * Description: Modify the settings of a specific email communication provider.
            **/
            public func updateEmailProviderById(
                id: String,
                body: EmailProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete email provider by ID.
            * Description: Remove a specific email communication provider from the platform.
            **/
            public func deleteEmailProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get app providers.
            * Description: Retrieve a list of app  providers.
            **/
            public func getDefaultEmailProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [DefaultEmailProviders]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/default-providers",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DefaultEmailProviders].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SMS providers.
            * Description: Retrieve a list of SMS communication providers.
            **/
            public func getSmsProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsProviders?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create SMS provider.
            * Description: Add a new SMS communication provider.
            **/
            public func createSmsProvider(
                body: SmsProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SMS provider by ID.
            * Description: Retrieve detailed information about a specific SMS communication provider.
            **/
            public func getSmsProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update SMS provider by ID.
            * Description: Modify specific SMS communication provider.
            **/
            public func updateSmsProviderById(
                id: String,
                body: SmsProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete SMS provider by ID.
            * Description: Remove a specific SMS communication provider.
            **/
            public func deleteSmsProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default SMS providers.
            * Description: Retrieve the default SMS communication providers.
            **/
            public func getDefaultSmsProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [DefaultSmsProviders]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/default-providers",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DefaultSmsProviders].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SMS templates.
            * Description: Retrieve a list of available SMS communication templates.
            **/
            public func getSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getSmsTemplates
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getSmsTemplatesPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<SmsTemplates> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<SmsTemplates>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getSmsTemplates(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create SMS template.
            * Description: Add a new SMS communication template.
            **/
            public func createSmsTemplate(
                body: SmsTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SMS template by ID.
            * Description: Retrieve detailed information about a specific SMS communication template.
            **/
            public func getSmsTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update SMS template by ID.
            * Description: Modify the content and settings of a specific SMS communication template.
            **/
            public func updateSmsTemplateById(
                id: String,
                body: SmsTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete SMS template by ID.
            * Description: Remove a specific SMS communication template.
            **/
            public func deleteSmsTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get system SMS templates.
            * Description: Retrieve system-defined SMS communication templates.
            **/
            public func getSystemSmsTemplates(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [SystemSmsTemplates]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/system-templates",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([SystemSmsTemplates].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get subscribed SMS templates.
            * Description: Retrieve SMS communication templates that are subscribed to.
            **/
            public func getSubscribedSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SubscribedSmsTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SubscribedSmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Trigger campaign job.
            * Description: Initiate a job to execute a communication campaign.
            **/
            public func triggerCampaignJob(
                body: TriggerJobRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TriggerJobResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/trigger-job",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TriggerJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get jobs.
            * Description: Retrieve a list of communication jobs.
            **/
            public func getJobs(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Jobs?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Jobs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getJobs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getJobsPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<Jobs> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<Jobs>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getJobs(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create jobs
            * Description: Create jobs
            **/
            public func createJobs(
                body: CreateJobsReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateJobsRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateJobsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get job logs.
            * Description: Retrieve logs and details related to communication jobs.
            **/
            public func getJobLogs(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: JobLogs?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/logs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(JobLogs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getJobLogs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getJobLogsPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<JobLogs> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<JobLogs>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getJobLogs(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get global variables.
            * Description: Retrieve global variables used in communication.
            **/
            public func getGlobalVariables(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GlobalVariablesGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Post global variables.
            * Description: Update and post global variables for communication.
            **/
            public func postGlobalVariables(
                body: GlobalVariablesReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GlobalVariablesPostResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesPostResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get communication logs.
            * Description: Retrieve logs and records of communication activities.
            **/
            public func getCommunicationLogs(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Logs?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/log",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Logs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getCommunicationLogs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getCommunicationLogsPaginator(
                pageSize: Int?,
                sort: String?,
                query: [String: Any]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<Logs> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<Logs>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getCommunicationLogs(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application providers.
            * Description: Modify provider information for the platform.
            **/
            public func updateAppProviders(
                body: AppProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/update-provider",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application providers.
            * Description: Retrieve a list of providers associated with the platform.
            **/
            public func getAppProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/get-provider",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get global providers.
            * Description: Retrieve a list of global communication providers.
            **/
            public func getGlobalProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GlobalProviders?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/global-providers",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get global app providers.
            * Description: Retrieve a list of global app  providers.
            **/
            public func updateAppProvidersGlobalProvider(
                body: AppProvidersGlobalProviderRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateAppProvidersGlobalProviderResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/global-providers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateAppProvidersGlobalProviderResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get dummy data sources metadata.
            * Description: Retrieve metadata information about dummy data sources.
            **/
            public func getDummyDatasourcesMeta(
                id: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DummyDatasourcesMeta?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasource/dummy-data-source-meta",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyDatasourcesMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get dummy data sources.
            * Description: Retrieve a list of dummy data sources for testing.
            **/
            public func getDummyDatasources(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [DummyDatasources]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasource/dummy-data-sources",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DummyDatasources].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get audiences.
            * Description: Audience is used to import CSV files containing emails, phone numbers, and other variables in order to populate email/SMS templates for bulk delivery via a Campaign.
            **/
            public func getAudiences(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audiences?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audiences.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAudiences
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAudiencesPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<Audiences> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<Audiences>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAudiences(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        sort: sort,
                        query: query,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create audience.
            * Description: Add audience which is used to import CSV files containing emails, phone numbers, and other variables in order to populate email/SMS templates for bulk delivery via a Campaign. 
            **/
            public func createAudience(
                body: AudienceReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get audience by ID.
            * Description: Retrieve detailed information about a specific custom communication audience.
            **/
            public func getAudienceById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update audience by ID.
            * Description: Modify the settings of a specific custom communication audience.
            **/
            public func updateAudienceById(
                id: String,
                body: AudienceReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete audience by ID.
            * Description: Remove a specific custom communication audience.
            **/
            public func deleteAudienceById(
                id: String,
                body: AudienceReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get N sample records in CSV 
            * Description: Retrieve a specified number of sample records from a CSV data source using a GET request.
            **/
            public func getNSampleRecordsFromCsvByGet(
                count: Int?,
                header: Bool?,
                url: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = count {
                    xQuery["count"] = value
                }
                
                if let value = header {
                    xQuery["header"] = value
                }
                
                if let value = url {
                    xQuery["url"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get N sample records from CSV.
            * Description: Retrieve a specified number of sample records from a CSV data source.
            **/
            public func getNSampleRecordsFromCsv(
                body: GetNRecordsCsvReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get campaigns.
            * Description: Retrieve a list of communication campaigns.
            **/
            public func getCampaigns(
                query: String?,
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaigns?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaigns.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create campaign.
            * Description: Add a new communication campaign.
            **/
            public func createCampaign(
                body: CampaignReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get campaign by ID.
            * Description: Retrieve detailed information about a specific communication campaign.
            **/
            public func getCampaignById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update campaign by ID.
            * Description: Modify the settings of a specific communication campaign.
            **/
            public func updateCampaignById(
                id: String,
                body: CampaignReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update campaign by ID.
            * Description: Modify the settings of a specific communication campaign.
            **/
            public func deleteCampaignById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get campaign statistics by ID.
            * Description: Retrieve statistical data for a specific communication campaign.
            **/
            public func getStatsOfCampaignById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetStats?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/get-stats/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStats.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Send OTP.
            * Description: Send a one-time password (OTP) for authentication or verification.
            **/
            public func sendOtp(
                ci: Bool?,
                body: SendOtpCommsReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SendOtpCommsRes?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = ci {
                    xQuery["ci"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/send-otp-comms",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendOtpCommsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Verify OTP.
            * Description: Verify the one-time password (OTP) for authentication or verification.
            **/
            public func verfiyOtp(
                body: VerifyOtpCommsReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: VerifyOtpCommsSuccessRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/verify-otp-comms",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(VerifyOtpCommsSuccessRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get otp-configuration, if not present in db then return default settings
            * Description: Get otp-configuration
            **/
            public func getOtpConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update/insert otp configurations
            * Description: Update otp-configuration
            **/
            public func updateOtpConfiguration(
                body: OtpConfiguration,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create app push token.
            * Description: Create the push token of the user. 
            **/
            public func createAppPushtoken(
                body: PushtokenReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PushtokenRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/pn/tokens",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PushtokenRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Configuration {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get application features.
            * Description: Shows feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func getAppFeatures(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppFeatureResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeatureResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application features.
            * Description: Modify the feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func updateAppFeatures(
                body: AppFeatureRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Modify application features.
            * Description: Update features of application
            **/
            public func modifyAppFeatures(
                body: AppFeatureRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application basic details.
            * Description: Shows basic sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func getAppBasicDetails(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application basic details.
            * Description: Modify sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func updateAppBasicDetails(
                body: ApplicationDetail,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application contact information.
            * Description: Fetch data such as social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the application.
            **/
            public func getAppContactInfo(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application contact information.
            * Description: Modify the social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the application.
            **/
            public func updateAppContactInfo(
                body: ApplicationInformation,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application API tokens.
            * Description: Retrieve the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google, and Facebook auth.
            **/
            public func getAppApiTokens(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application API tokens.
            * Description: Add or edit the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google and Facebook auth.
            **/
            public func updateAppApiTokens(
                body: TokenResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application companies.
            * Description: Retrieve info of all the companies (e.g. name, uid, and company type) whose inventory is fetched into the current sales channel application
            **/
            public func getAppCompanies(
                uid: Int?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CompaniesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/companies",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompaniesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppCompanies
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppCompaniesPaginator(
                uid: Int?,
                pageSize: Int?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<CompaniesResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<CompaniesResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppCompanies(
                        uid: uid,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get application stores.
            * Description: Retrieve information of all the companies (e.g. uid, name, display name, store type, store code and company id) whose inventory is fetched into the current sales channel application
            **/
            public func getAppStores(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoresResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/stores",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: get paginator for getAppStores
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppStoresPaginator(
                pageSize: Int?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<StoresResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<StoresResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppStores(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get inventory configuration.
            * Description: Retrieve configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func getInventoryConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update inventory configuration.
            * Description: Modify the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func updateInventoryConfig(
                body: ApplicationInventory,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Partially update inventory configuration.
            * Description: Partially update the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func partiallyUpdateInventoryConfig(
                body: AppInventoryPartialUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Application configuration.
            * Description: Retrieve configuration details of inventory pricing_strategy.
            **/
            public func getApplicationConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OwnerAppConfig?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/owner-application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OwnerAppConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application currency configuration.
            * Description: Retrieve a list of currencies supported in the current sales channel. Moreover, get the cuurency that is set as the default one in the application.
            **/
            public func getAppCurrencyConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application currency configuration.
            * Description: Modify currency configuration settings for the application. Add and edit the currencies supported in the application. Initially, INR will be enabled by default.
            **/
            public func createAppCurrencyConfig(
                body: AppSupportedCurrency,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application currency configuration.
            * Description: Modify currency configuration settings for the application. Add and edit the currencies supported in the application. Initially, INR will be enabled by default.
            **/
            public func updateAppCurrencyConfig(
                body: AppSupportedCurrency,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get supported currencies.
            * Description: Retrieve a list of supported currencies for the application. A list of currencies allowed in the current application. Moreover, get the name, code, symbol, and the decimal digits of the currencies.
            **/
            public func getAppSupportedCurrency(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppCurrencyResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency/supported",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppCurrencyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ordering store by filter
            * Description: Use this API to use filters and retrieve the details of the deployment stores (the selling locations where the application will be utilised for placing orders).
            **/
            public func getOrderingStoresByFilter(
                pageNo: Int?,
                pageSize: Int?,
                body: FilterOrderingStoreRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStores?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v2.0/company/\(companyId)/application/\(applicationId)/ordering-store/stores/filter",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStores.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: get paginator for getOrderingStoresByFilter
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getOrderingStoresByFilterPaginator(
                pageSize: Int?,
                headers: [(key: String, value: String)]? = nil,
                body: FilterOrderingStoreRequest) -> Paginator<OrderingStores> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<OrderingStores>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getOrderingStoresByFilter(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        body: body,
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update ordering store configuration.
            * Description: Modify configuration settings for ordering stores. Edit the details of the deployment stores (the selling locations where the application will be utilised for placing orders)
            **/
            public func updateOrderingStoreConfig(
                body: OrderingStoreConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeploymentMeta?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeploymentMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ordering store configuration.
            * Description: Retrieve configuration settings for ordering stores. Retrieve the details of the deployment stores (the selling locations where the application will be utilised for placing orders).
            **/
            public func getOrderingStoreConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStoreConfig?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoreConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get deployment stores
            * Description: Use this API to retrieve the details of all stores access given to the staff member (the selling locations where the application will be utilized for placing orders).
            **/
            public func getStaffOrderingStores(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStoresResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v2.0/company/\(companyId)/application/\(applicationId)/ordering-store/staff-stores",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getStaffOrderingStores
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getStaffOrderingStoresPaginator(
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<OrderingStoresResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<OrderingStoresResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getStaffOrderingStores(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get an Ordering Store signed cookie on selection of ordering store.
            * Description: Use this API to get an Ordering Store signed cookie upon selecting an ordering store. This will be used by the cart service to verify a coupon against the selected ordering store in cart.
            **/
            public func getOrderingStoreCookie(
                body: OrderingStoreSelectRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Unset the Ordering Store signed cookie.
            * Description: Use this API to unset the Ordering Store cookie upon changing the sales channel, by its domain URL, in the Universal Fynd Store app.
            **/
            public func removeOrderingStoreCookie(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ordering store details
            * Description: Use this API to retrieve the details of given stores uid (the selling locations where the application will be utilized for placing orders).
            **/
            public func getStoreDetailById(
                storeId: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStore?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v2.0/company/\(companyId)/application/\(applicationId)/ordering-store/stores/\(storeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStore.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all deployment stores
            * Description: Use this API to retrieve the details of all the deployment stores (the selling locations where the application will be utilized for placing orders).
            **/
            public func getOrderingStores(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStores?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v2.0/company/\(companyId)/application/\(applicationId)/ordering-store/stores",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStores.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getOrderingStores
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getOrderingStoresPaginator(
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<OrderingStores> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<OrderingStores>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getOrderingStores(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get domains.
            * Description: Get list of domains. 
            **/
            public func getDomains(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add domain.
            * Description: Add a new domain. Add a new domain to current sales channel, including pre-defined domain (free domain) or custom domain (owned by the brand)
            **/
            public func addDomain(
                body: DomainAddRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Domain?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Domain.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove domain by ID.
            * Description: Delete a specific domain from the application. Delete a domain (secondary or shortlink domain) added to a sales channel. It will disable user's access to website, shared links, and other features associated with this domain.
            **/
            public func removeDomainById(
                domainId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/\(domainId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Change domain type.
            * Description: Modify the type of a specific domain. Primary domain is used as the URL of your website. Short link domain is comparatively smaller and used while generating short links.
            **/
            public func changeDomainType(
                body: UpdateDomainTypeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/set-domain",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get domain status.
            * Description: Retrieve the status of a specific domain. Shows if the A records and TXT records of the domain correctly points to appropriate IP on Fynd Servers.
            **/
            public func getDomainStatus(
                body: DomainStatusRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainStatusResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/domain-status",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainStatusResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application by ID.
            * Description: Retrieve detailed information about a specific application. Use application ID to get the current sales channel details which includes channel name, description, banner, logo, favicon, domain details, token, etc.
            **/
            public func getApplicationById(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Application?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Application.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get application by ID.
            * Description: Update detailed information about a specific application. Use application ID to update the current sales channel details which includes channel name, description, banner, logo, favicon, domain details, token, etc.
            **/
            public func updateApplication(
                body: Application,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Application?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Application.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get domain availability.
            * Description: Check the availability of a specific domain. Use this API to check the domain availability before linking it to application. Also sends domain suggestions that are similar to the queried domain. Note - Custom domain search is currently powered by GoDaddy provider.
            **/
            public func getApplicationDomainAvailibility(
                body: DomainSuggestionsRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainSuggestionsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/suggestions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainSuggestionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update Application Version
            * Description: Updates the version details of an application.
            **/
            public func updateApplicationVersion(
                body: PlatformVersionRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformVersion?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/version",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformVersion.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create tokens for application
            * Description: Create new tokens for an application
            **/
            public func createTokens(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Application?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/tokens",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Application.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete tokens for application
            * Description: Delete new tokens for an application
            **/
            public func deleteToken(
                token: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Application?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/tokens/\(token)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Application.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Get URL redirections
            * Description: Retrieves the URL redirections for a specific application
            **/
            public func getUrlRedirections(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UrlRedirectionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/url-redirection",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UrlRedirectionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a URL redirection
            * Description: Creates a new URL redirection
            **/
            public func createUrlRedirection(
                body: UrlRedirectionRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UrlRedirection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/url-redirection",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UrlRedirection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get URL redirections
            * Description: Retrieves the URL redirections for a specific application
            **/
            public func getUrlRedirection(
                redirectionDomainId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UrlRedirection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/url-redirection/\(redirectionDomainId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UrlRedirection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a URL redirection
            * Description: Update a new URL redirection
            **/
            public func updateUrlRedirection(
                redirectionDomainId: String,
                body: UrlRedirection,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UrlRedirection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/url-redirection/\(redirectionDomainId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UrlRedirection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a URL redirection
            * Description: Delete a URL redirection
            **/
            public func deleteUrlRedirection(
                redirectionDomainId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/url-redirection/\(redirectionDomainId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Content {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List announcements
            * Description: Lists all announcements
            **/
            public func getAnnouncementsList(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAnnouncementListSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAnnouncementListSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create announcement
            * Description: Generate and add a new announcement.
            **/
            public func createAnnouncement(
                body: AdminAnnouncementSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get announcement
            * Description: Get detailed information about a specific announcement
            **/
            public func getAnnouncementById(
                announcementId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AdminAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AdminAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update announcement
            * Description: Modify the content and settings of a specific announcement.
            **/
            public func updateAnnouncement(
                announcementId: String,
                body: AdminAnnouncementSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update announcement schedule
            * Description: Modify the scheduling of a specific announcement.
            **/
            public func updateAnnouncementSchedule(
                announcementId: String,
                body: ScheduleSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an announcement
            * Description: Remove a specific announcement.
            **/
            public func deleteAnnouncement(
                announcementId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create blog
            * Description: Generate and add a new blog.
            **/
            public func createBlog(
                body: BlogRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List blogs
            * Description: List all blogs
            **/
            public func getBlogs(
                pageNo: Int?,
                pageSize: Int?,
                tags: String?,
                q: String?,
                slug: String?,
                title: String?,
                status: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a blog
            * Description: Modify the content and settings of a specific blog.
            **/
            public func updateBlog(
                id: String,
                body: BlogRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a blog
            * Description: Remove a specific blog.
            **/
            public func deleteBlog(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get component
            * Description: Retrieve detailed information about a specific component.
            **/
            public func getComponentById(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create data loader
            * Description: Create and add a new data loader.
            **/
            public func addDataLoader(
                body: DataLoaderSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List data loaders
            * Description: List all Dataloaders
            **/
            public func getDataLoaders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoadersSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoadersSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get data loaders api specs.
            * Description: Retrieve a list of data loaders api specs.
            **/
            public func getDataLoaderApiSpecs(
                dataLoader: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoadersApiSpecSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["data_loader"] = dataLoader
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/api-spec",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoadersApiSpecSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a data loader
            * Description: Remove a specific data loader.
            **/
            public func deleteDataLoader(
                dataLoaderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(dataLoaderId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a data loader
            * Description: Modify the settings of a specific data loader.
            **/
            public func editDataLoader(
                dataLoaderId: String,
                body: DataLoaderSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(dataLoaderId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List all data loaders
            * Description: Use this to get all data loaders of an application by service name
            **/
            public func getDataLoadersByService(
                serviceName: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderItemsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/service/\(serviceName)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderItemsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select a data loader
            * Description: Choose and set a data loader for use.
            **/
            public func selectDataLoader(
                dataLoaderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(dataLoaderId)/select",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Reset a data loader
            * Description: Clear and reset data loader settings.
            **/
            public func resetDataLoader(
                service: String,
                operationId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResetResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(service)/\(operationId)/reset",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResetResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List FAQ Categories
            * Description: List all FAQ Categories
            **/
            public func getFaqCategories(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetFaqCategoriesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/categories",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoriesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get FAQ category
            * Description: Get detailed information about a specific FAQ category
            **/
            public func getFaqCategoryBySlugOrId(
                idOrSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetFaqCategoryBySlugSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoryBySlugSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create FAQ Category
            * Description: Generate and add a new FAQ category.
            **/
            public func createFaqCategory(
                body: CreateFaqCategoryRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update FAQ category
            * Description: Modify the content and settings of a specific FAQ category.
            **/
            public func updateFaqCategory(
                id: String,
                body: UpdateFaqCategoryRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete FAQ category
            * Description: Remove a specific FAQ category.
            **/
            public func deleteFaqCategory(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List FAQs
            * Description: Retrieve a list of FAQs within a specific category.
            **/
            public func getFaqsByCategoryIdOrSlug(
                idOrSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetFaqSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)/faqs",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create FAQ
            * Description: Create and add a new FAQ.
            **/
            public func addFaq(
                categoryId: String,
                body: CreateFaqSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update FAQ
            * Description: Modify the content and settings of a specific FAQ.
            **/
            public func updateFaq(
                categoryId: String,
                faqId: String,
                body: CreateFaqSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete FAQ
            * Description: Remove a specific FAQ.
            **/
            public func deleteFaq(
                categoryId: String,
                faqId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get FAQ or slug
            * Description: Get detailed information about a specific FAQ
            **/
            public func getFaqByIdOrSlug(
                idOrSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Generate SEO title
            * Description: Create an SEO-friendly title for content.
            **/
            public func generateSEOTitle(
                type: String,
                body: GenerateSEOContent,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeneratedSEOContent?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/generate-seo/\(type)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeneratedSEOContent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get landing pages
            * Description: Lists a list landing pages as per device types
            **/
            public func getLandingPages(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create landing page
            * Description: Generate and add a new landing page.
            **/
            public func createLandingPage(
                body: LandingPageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update landing page
            * Description: Modify the content and settings of a specific landing page.
            **/
            public func updateLandingPage(
                id: String,
                body: LandingPageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete landing page
            * Description: Remove a specific landing page.
            **/
            public func deleteLandingPage(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Legal Pages
            * Description: Get legal information and terms
            **/
            public func getLegalInformation(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Legal Pages
            * Description: Modify legal information and terms.
            **/
            public func updateLegalInformation(
                body: ApplicationLegal,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get navigation items
            * Description: Retrieve a list of navigational elements.
            **/
            public func getNavigations(
                devicePlatform: String,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["device_platform"] = devicePlatform
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create navigation items
            * Description: Generate and add a new navigation element.
            **/
            public func createNavigation(
                body: NavigationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default navigations
            * Description: Retrieve default navigation elements.
            **/
            public func getDefaultNavigations(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DefaultNavigationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/default",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultNavigationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get navigation by slug
            * Description: Retrieve detailed information about a specific navigation element.
            **/
            public func getNavigationBySlug(
                slug: String,
                devicePlatform: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = devicePlatform {
                    xQuery["device_platform"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(slug)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update navigation
            * Description: Modify the content and settings of a specific navigation element.
            **/
            public func updateNavigation(
                id: String,
                body: NavigationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete navigation
            * Description: Remove a specific navigation element.
            **/
            public func deleteNavigation(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get page meta
            * Description: Use this API to Get metadata for a specific page.
            **/
            public func getPageMeta(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageMetaSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/meta",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageMetaSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get page specification
            * Description: Use this API to Get specifications and details for a specific page
            **/
            public func getPageSpec(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSpec?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/spec",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSpec.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create page preview
            * Description: Generate and add a new page preview.
            **/
            public func createPagePreview(
                body: PageRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/preview",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update page preview
            * Description: Modify the content and settings of a specific page preview.
            **/
            public func updatePagePreview(
                slug: String,
                body: PagePublishRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/publish/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete page
            * Description: Remove a page from the platform.
            **/
            public func deletePage(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create path redirection rules
            * Description: Create and add rules for path redirection.
            **/
            public func addPathRedirectionRules(
                body: PathMappingSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreatePathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List Path Redirection Rules
            * Description: Use this API to List Path Redirection Rules
            **/
            public func getPathRedirectionRules(
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAllPathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAllPathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Path Redirection Rule
            * Description: Use this API to Get detailed information about a specific path redirection rule
            **/
            public func getPathRedirectionRule(
                pathId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeletPathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeletPathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update path redirection rule
            * Description: Modify settings for path redirection rules.
            **/
            public func updatePathRedirectionRules(
                pathId: String,
                body: PathMappingSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreatePathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings/\(pathId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete path redirection rule
            * Description: Remove specific path redirection rules.
            **/
            public func deletePathRedirectionRules(
                pathId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeletPathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeletPathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel SEO
            * Description: Retrieve configuration settings for SEO.
            **/
            public func getSEOConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SeoComponent?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel SEO information
            * Description: Modify configuration settings for SEO.
            **/
            public func updateSEOConfiguration(
                body: SeoComponent,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SeoSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List default SEO Markup Schemas
            * Description: Use this API to List default SEO Markup Schemas
            **/
            public func getDefaultSEOMarkupSchema(
                pageType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DefaultSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageType {
                    xQuery["page_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/default",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List default SEO Markup Schemas
            * Description: Use this API to List default SEO Markup Schemas
            **/
            public func getSEOMarkupSchemas(
                title: String?,
                active: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SeoSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                if let value = active {
                    xQuery["active"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create SEO Markup Schema
            * Description: Use this API to Create SEO Markup Schema
            **/
            public func createSEOMarkupSchema(
                body: SEOSchemaMarkupTemplateRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SEO Markup Schema
            * Description: Use this API to Get SEO Markup Schema
            **/
            public func getSEOMarkupSchema(
                schemaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(schemaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Edit SEO Markup Schema
            * Description: Use this API to edit SEO Markup Schema
            **/
            public func editSEOMarkupSchema(
                schemaId: String,
                body: SEOSchemaMarkupTemplateRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(schemaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete SEO Markup Schema
            * Description: Use this API to Delete SEO Markup Schema
            **/
            public func deleteSEOMarkupSchema(
                schemaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(schemaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create HTML tag
            * Description: Create and add a new injectable tag
            **/
            public func addInjectableTag(
                body: CreateTagRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/add",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get support information
            * Description: Retrieve information related to customer support.
            **/
            public func getSupportInformation(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Customer Support Information
            * Description: Modify information related to customer support.
            **/
            public func updateSupportInformation(
                body: Support,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove HTML tag
            * Description: Delete a specific injectable tag.
            **/
            public func removeInjectableTag(
                body: RemoveHandpickedSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagDeleteSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/remove/handpicked",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagDeleteSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update HTML tag
            * Description: Modify an injectable tag
            **/
            public func editInjectableTag(
                tagId: String,
                body: UpdateHandpickedSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/edit/handpicked/\(tagId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create HTML tags
            * Description: Use this API to create HTML tags. This includes a list of tags with name, tag type (css/js), url and position of the tag
            **/
            public func createInjectableTag(
                body: CreateTagRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update HTML Tags
            * Description: Use this API to edit all HTML Tags present
            **/
            public func updateInjectableTag(
                body: CreateTagRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete HTML tags in application
            * Description: Use this API to delete all the existing tags at once
            **/
            public func deleteAllInjectableTags(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all the tags in an application
            * Description: Use this API to retrieve all HTML Tags
            **/
            public func getInjectableTags(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get blog by slug.
            * Description: Retrieve detailed information about a specific blog using its slug.
            **/
            public func getBlogBySlug(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create page
            * Description: Generate and add a new page to the platform.
            **/
            public func createPage(
                body: PageRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get pages.
            * Description: Retrieve a list of available pages.
            **/
            public func getPages(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: get paginator for getPages
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getPagesPaginator(
                pageSize: Int?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<PageGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<PageGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getPages(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update page
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                id: String,
                body: PageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get page by slug
            * Description: Get detailed information about a specific page using its slug
            **/
            public func getPageBySlug(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get custom field types
            * Description: Each custom field and custom field definition has a type, which defines the type of information that it can store. The custom field types have built-in validation. This api will give list of supported custom fields types
            **/
            public func getAppCustomFieldTypes(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MetafieldTypesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/types",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MetafieldTypesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get resources
            * Description: Each custom fields is assosiated with a resource such as product, promotion, coupon, selling location etc, This will gives list of supported resource list.
            **/
            public func getAppResources(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ResourcesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/resources",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResourcesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom fields definitions
            * Description: Custom field definitions enable you to include data validation for custom fields, and enable sellers to add custom fields values for resources. With the help of this seller can retrive list of custom field definitions list.
            **/
            public func getAppCustomFieldDefinitions(
                pageNo: String,
                pageSize: String,
                resources: String?,
                types: String?,
                search: String?,
                slugs: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationCustomFieldDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page_no"] = pageNo
                xQuery["page_size"] = pageSize
                
                if let value = resources {
                    xQuery["resources"] = value
                }
                
                if let value = types {
                    xQuery["types"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                if let value = slugs {
                    xQuery["slugs"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationCustomFieldDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom field definition
            * Description: You can create custom fields definition to any resource so you can extend property of resource.
            **/
            public func createAppCustomFieldDefinition(
                body: CustomFieldDefinitionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom fields definition by id
            * Description: Use this API to retrieve the definitions of custom fields using definition_id.
            **/
            public func getAppCustomFieldDefinition(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom field definition
            * Description: Custom fields definition can be update using this api, You can update custom field definition name and description.
            **/
            public func updateAppCustomFieldDefinition(
                id: String,
                body: CustomFieldDefinitionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete custom fields definition
            * Description: Custom field definition and its assosiated custom fields value can be deleted using this api on the basis of definition id.
            **/
            public func deleteAppCustomFieldDefinition(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of custom fields of gives resource
            * Description: Retrieves a list of custom fields attached to a particular resource by using the resource.
            **/
            public func getAppCustomFields(
                resource: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of custom fields of given resource and resource id
            * Description: Retrieves a list of custom fields attached to a particular resource by using the resource and resource id.
            **/
            public func getAppCustomFieldsByResourceId(
                resource: String,
                resourceId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom field entries for gives resource and resource_id
            * Description: You can add a custom field using this endpoint to any resource by providing the resource ID.
            **/
            public func createAppCustomFieldByResourceId(
                resource: String,
                resourceId: String,
                body: CustomFieldRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom field entries for gives resource and resource_id
            * Description: Use this API to create the custom field entry for given resource and resource_id in param.
            **/
            public func updateAppCustomFieldByResourceId(
                resource: String,
                resourceId: String,
                body: CustomFieldRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: delete custom fields of given resource and resource id
            * Description: Use this API to delete the custom fields for given resource in param.
            **/
            public func deleteAppCustomFieldsByResourceId(
                resource: String,
                resourceId: String,
                ids: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["ids"] = ids
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Fetch bulk import and export job list.
            * Description: Use this api to get list of jobs of bulk import and exports
            **/
            public func getAppCustomFieldJobs(
                page: String,
                pageSize: String,
                actionType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldBulkEntry?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page"] = page
                xQuery["page_size"] = pageSize
                xQuery["action_type"] = actionType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/jobs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldBulkEntry.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom object definition
            * Description: Create a custom object that will have a collection of custom fields and can be used anywhere in the custom field for any resource.
            **/
            public func createAppCustomObjectDefinition(
                body: CustomObjectDefinitionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom object definitions
            * Description: Custom object definition lists can be obtained using this endpoint.
            **/
            public func getAppCustomObjectDefinitions(
                pageNo: String,
                pageSize: String,
                search: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page_no"] = pageNo
                xQuery["page_size"] = pageSize
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom object definition
            * Description: Custom object definitions can be fetched using their definition ID.
            **/
            public func getAppCustomObjectDefinition(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom object definition
            * Description: Use this API to update a custom object definition for your application.
            **/
            public func updateAppCustomObjectDefinition(
                id: String,
                body: CustomObjectDefinitionUpdateRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete custom object definition
            * Description: Custom object definitions can be deleted using this endpoint by providing the definition ID.
            **/
            public func deleteAppCustomObjectDefinition(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of custom objects
            * Description: Custom object entries can fetch using this endpoint.
            **/
            public func getAppCustomObjects(
                definitionId: String?,
                pageNo: String,
                pageSize: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = definitionId {
                    xQuery["definition_id"] = value
                }
                xQuery["page_no"] = pageNo
                xQuery["page_size"] = pageSize
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom object entries
            * Description: Custom object entries against the custom object definition can be added using this API.
            **/
            public func createAppCustomObject(
                body: CustomObjectRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectApplicationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectApplicationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom object details
            * Description: Details of custom objects, their field details, definitions, and references can be obtained using this endpoint.
            **/
            public func getAppCustomObject(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom object details
            * Description: Custom object entries can be updated using this endpoint.
            **/
            public func updateAppCustomObject(
                id: String,
                body: CustomObjectRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectApplicationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectApplicationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete custom object
            * Description: Custom object entries can be deleted by providing the delete ID using this endpoint.
            **/
            public func deleteAppCustomObject(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get bulk import and export job list
            * Description: Custom object bulk import and export jobs status and details can be obtained using this endpoint.
            **/
            public func getAppJobs(
                page: String,
                pageSize: String,
                actionType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectBulkEntry?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page"] = page
                xQuery["page_size"] = pageSize
                xQuery["action_type"] = actionType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/jobs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntry.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Bulk custom object entries upload
            * Description: Custom object bulk import of bulk entries can be performed using this endpoint.
            **/
            public func importAppCustomObjectEntries(
                definitionId: String,
                body: CustomObjectBulkSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectEntryBulkUploadResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/upload",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectEntryBulkUploadResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Initiate download for bulk custom object entries
            * Description: Custom object bulk export of bulk entries can be perform using this endpoint.
            **/
            public func exportAppCustomObjectEntries(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectBulkEntryInitiateDownload?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/download",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntryInitiateDownload.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Download sample for custom object bulk entry
            * Description: Sample files for custom object bulk import can be obtained from this endpoint.
            **/
            public func sampleAppCustomObjectBulkEntry(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/sample",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "text/csv",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class FileStorage {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Application start upload.
            * Description: Start uploading a file from an application and returns a storage link in response.
            **/
            public func appStartUpload(
                namespace: String,
                body: StartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v2.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/start",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Application complete upload.
            * Description: Finish uploading a file from an application.
            **/
            public func appCompleteUpload(
                namespace: String,
                body: StartResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CompleteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v2.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/complete",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Application copy files.
            * Description: Copy files from an application to another location.
            **/
            public func appCopyFiles(
                sync: Bool?,
                body: CopyFiles,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = sync {
                    xQuery["sync"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/uploads/copy",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Application browse files.
            * Description: Browse files within an application.
            **/
            public func appbrowse(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = page {
                    xQuery["page"] = value
                }
                
                if let value = limit {
                    xQuery["limit"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Browse Files
            * Description: Browse Files
            **/
            public func browsefiles(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                body: ExtensionSlug,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = page {
                    xQuery["page"] = value
                }
                
                if let value = limit {
                    xQuery["limit"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all the supported invoice pdf types
            * Description: Get all the supported invoice pdf types such as Invoice, Label, Delivery challan
            **/
            public func getPdfTypes(
                countryCode: String?,
                storeOs: Bool,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: InvoiceTypesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                xQuery["store_os"] = storeOs
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InvoiceTypesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get the pdf types of by id
            * Description: Get the pdf types of PDF formats for filter
            **/
            public func fetchPdfTypeById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfTypeIdResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfTypeIdResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default PDF data.
            * Description: Retrieve default data for PDF generation.
            **/
            public func getDefaultPdfData(
                pdfTypeId: Int,
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DummyTemplateDataItems?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["pdf_type_id"] = pdfTypeId
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyTemplateDataItems.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default PDF data.
            * Description: Retrieve default data for PDF generation.
            **/
            public func getPdfPayloadById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DummyPayloadById?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyPayloadById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update html template for invoice or label
            * Description: Update html template for invoice such as Invoice, Label, Deliver challan
            **/
            public func getConfigHtmlTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a PDF generator configuration
            * Description: Deletes a specific PDF generator configuration based on the provided id.
            **/
            public func deletePdfGeneratorConfig(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update HTML Template
            * Description: Update the HTML Template.
            **/
            public func updateHtmlTemplate(
                id: String,
                body: PdfConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get html template for sales channel
            * Description: Get default html template for invoice or label
            **/
            public func getHtmlTemplateConfig(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfConfigSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["pdf_type_id"] = pdfTypeId
                xQuery["format"] = format
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save HTML template.
            * Description: Store an HTML template.
            **/
            public func saveHtmlTemplate(
                body: PdfConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default PDF template.
            * Description: Retrieve the default PDF template.
            **/
            public func getDefaultPdfTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfDefaultTemplateSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["pdf_type_id"] = pdfTypeId
                xQuery["format"] = format
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/default-template",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfDefaultTemplateSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Generate payment receipt.
            * Description: Generate Payment Receipt for Jiomart Digital
            **/
            public func generatePaymentReceipt(
                body: PaymentReceiptRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/payment-receipt",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: get default html template for invoice or label
            * Description: get default html template for invoice such as Invoice, Label, Deliver challan
            **/
            public func fetchPdfDefaultTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfDefaultTemplateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/default-template/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfDefaultTemplateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
        }
        
        
            
        public class Lead {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: List sales channel tickets
            * Description: Gets the list of Application level Tickets and/or ticket filters
            **/
            public func getTickets(
                items: Bool?,
                filters: Bool?,
                q: String?,
                status: String?,
                priority: String?,
                category: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TicketList?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = items {
                    xQuery["items"] = value
                }
                
                if let value = filters {
                    xQuery["filters"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                if let value = priority {
                    xQuery["priority"] = value
                }
                
                if let value = category {
                    xQuery["category"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Ticket Details
            * Description: Get ticket details of a application level ticket with ticket ID
            **/
            public func getTicket(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Ticket Details
            * Description: Edits ticket details of a application level ticket such as status, priority, category, tags, attachments, assigne & ticket content changes
            **/
            public func editTicket(
                id: String,
                body: EditTicketPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create ticket history interaction
            * Description: Create history for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func createNewHistory(
                id: String,
                body: TicketHistoryPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TicketHistory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ticket history interaction
            * Description: Gets history list for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func getTicketHistory(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TicketHistoryList?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistoryList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom form
            * Description: Get information about a custom form which includes corresponding field details and any validation regex required against that field or not
            **/
            public func getCustomForm(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom form
            * Description: Modify the content and associated settings of a custom form.
            **/
            public func editCustomForm(
                slug: String,
                body: EditCustomFormPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a custom form
            * Description: Delete a custom form using it's slug.
            **/
            public func deleteCustomForm(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom forms
            * Description: List all available custom forms
            **/
            public func getCustomForms(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFormList?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFormList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom form
            * Description: Create a new custom form for application users to fill
            **/
            public func createCustomForm(
                body: CreateCustomFormPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
        }
        
        
            
        public class Serviceability {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create zone
            * Description: Creates a delivery zone.
            **/
            public func createZone(
                body: CreateZoneV2Data,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ZoneResponseV2?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneResponseV2.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get zones
            * Description: Retrieves a list of delivery zones.
            **/
            public func getZones(
                stage: String?,
                type: String?,
                accessLevel: String?,
                status: String?,
                pageSize: Int?,
                pageNo: Int?,
                isActive: Bool?,
                q: String?,
                countryIsoCode: String?,
                pincode: String?,
                state: String?,
                city: String?,
                sector: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ListViewResponseV2?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = stage {
                    xQuery["stage"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = accessLevel {
                    xQuery["access_level"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = countryIsoCode {
                    xQuery["country_iso_code"] = value
                }
                
                if let value = pincode {
                    xQuery["pincode"] = value
                }
                
                if let value = state {
                    xQuery["state"] = value
                }
                
                if let value = city {
                    xQuery["city"] = value
                }
                
                if let value = sector {
                    xQuery["sector"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ListViewResponseV2.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get zone details
            * Description: Retrieves a single delivery zone
            **/
            public func getZone(
                zoneId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetZoneByIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetZoneByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update details of a Zone to enable or disable.
            * Description: Enable or Disable a Zone under that application.
            **/
            public func updateZone(
                zoneId: String,
                body: UpdateZoneDataV2,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ZoneUpdateSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneUpdateSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a Specific Zone
            * Description: Delete a Zone under that application.
            **/
            public func deleteZone(
                zoneId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ZoneDeleteSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneDeleteSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get details of a delivery zone
            * Description: Get details of a single delivery zone along with product, store and region details.
            **/
            public func getZoneDetails(
                zoneId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetZoneByIdDetailsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)/details",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetZoneByIdDetailsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create bulk zones.
            * Description: Creates  bulk zones defined at the application level.
            **/
            public func createBulkZone(
                body: CreateBulkZoneData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateBulkZoneResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateBulkZoneResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get bulk zones.
            * Description: Fetch bulk zones created at the application level.
            **/
            public func getBulkZone(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetBulkZoneHistory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/bulk/history",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetBulkZoneHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Bulk Export of Zones
            * Description: Export zones defined at the application level.
            **/
            public func createBulkExport(
                body: BulkCreateZoneExport,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ZoneBulkExport?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/bulk/export",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneBulkExport.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Bulk Export of Zones
            * Description: Get specific zone which is exported at the application level.
            **/
            public func getBulkExport(
                batchId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetZoneBulkExport?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/bulk/export/\(batchId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetZoneBulkExport.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update pincode COD support
            * Description: Modify and update views related to pincode MOP (Mode of Payment).
            **/
            public func updatePincodeMopView(
                body: PincodeMopData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeMOPresponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-update",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMOPresponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Bulk update pincode COD support 
            * Description: Updates the cash on delivery settings for multiple specified pin codes simultaneously.
            **/
            public func updatePincodeBulkView(
                body: PincodeMopBulkData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeBulkViewResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-bulk-update",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeBulkViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get COD enabled pincodes
            * Description: Retrieves a list of pincodes along with the count based on whether cash on delivery settings.
            **/
            public func updatePincodeCoDListing(
                body: PincodeCodStatusListingRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeCodStatusListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-data",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeCodStatusListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get audit trail
            * Description: Retrieves the history of changes made to cash on delivery settings for pincodes.
            **/
            public func updatePincodeAuditHistory(
                body: PincodeMopUpdateAuditHistoryRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeMopUpdateAuditHistoryResponseData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMopUpdateAuditHistoryResponseData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Creation of GeoArea
            * Description: Allows to create and manage GeoAreas, representing groups of geographic regions.
            **/
            public func createGeoArea(
                body: GeoAreaRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeoAreaResponseBody?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaResponseBody.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all geoareas in the current application.
            * Description: Retrieves a listing view of created GeoAreas.
            **/
            public func getGeoAreas(
                pageSize: Int?,
                isActive: Bool?,
                pageNo: Int?,
                type: String?,
                q: String?,
                countryIsoCode: String?,
                state: String?,
                city: String?,
                pincode: String?,
                sector: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeoAreaGetResponseBody?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = countryIsoCode {
                    xQuery["country_iso_code"] = value
                }
                
                if let value = state {
                    xQuery["state"] = value
                }
                
                if let value = city {
                    xQuery["city"] = value
                }
                
                if let value = pincode {
                    xQuery["pincode"] = value
                }
                
                if let value = sector {
                    xQuery["sector"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaGetResponseBody.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get details of the specific geoarea
            * Description: This API Returns the data of the specific GeoArea which exists on the platform.
            **/
            public func getGeoArea(
                geoareaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeoAreaResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/\(geoareaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update the details of existing GeoArea
            * Description: Updates the GeoArea with a new name, regions, etc.
            **/
            public func updateGeoArea(
                geoareaId: String,
                body: GeoAreaRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeoAreaPutResponseBody?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/\(geoareaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaPutResponseBody.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Bulk Creation of GeoArea Regions
            * Description: Allows to create and manage GeoAreas, representing groups of geographic regions in bulk.
            **/
            public func createBulkGeoArea(
                body: BulkGeoAreaDetails,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BulkGeoAreaResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/regions/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BulkGeoAreaResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get status of GeoAreas created in bulk
            * Description: Allows to Get GeoArea status which is created, representing groups of geographic regions in bulk.
            **/
            public func getBulkGeoArea(
                geoareaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BulkGeoAreaGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/regions/bulk/\(geoareaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BulkGeoAreaGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update geoareas and their associated regions in bulk.
            * Description: Update geoarea details and their associated regions through a CSV file in bulk.
            **/
            public func updateBulkGeoArea(
                geoareaId: String,
                body: BulkGeoAreaDetails,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BulkGeoAreaResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/regions/bulk/\(geoareaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BulkGeoAreaResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create job for exporting Geoarea regions
            * Description: Create the job for exporting the regions in Geoarea in CSV format.
            **/
            public func createGeoAreaExportJob(
                geoareaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeoAreaBulkCreationResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/bulk/export/\(geoareaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaBulkCreationResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get status of Geoarea export job
            * Description: Get the status and details of the Geoarea bulk export process.
            **/
            public func getGeoAreaExportJobStatus(
                geoareaId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeoAreaBulkExportResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/bulk/export/\(geoareaId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaBulkExportResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Bulk Export of Price GeoAreas
            * Description: Allows to create and manage GeoAreas, representing groups of geographic regions in bulk.
            **/
            public func createBulkGeoAreaExport(
                body: PriceBulkGeoAreaExportRequestPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PriceGeoAreaExportResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/bulk/export",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceGeoAreaExportResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Bulk Creation of GeoAreas
            * Description: Allows to create and manage GeoAreas, representing groups of geographic regions in bulk.
            **/
            public func createBulkGeoAreas(
                body: PriceBulkGeoAreaPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BulkGeoAreaResult?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BulkGeoAreaResult.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get history of the geoarea in bulk job processed
            * Description: Allows to get the history of geoareas that are uploaded in bulk.
            **/
            public func getBulkGeoAreasHistory(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetBulkPriceZoneHistory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/bulk/history",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetBulkPriceZoneHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sample file of a Price Zone
            * Description: Generates a sample XLSX file containing template data for Price GeoAreas. This sample file provides the required columns and example values needed for bulk uploading Price GeoArea data.
            **/
            public func getBulkGeoAreasSample(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/bulk/sample",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/octet-stream",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get history of the geoarea in bulk job processed
            * Description: Allows to get the history of geoareas that are uploaded in bulk.
            **/
            public func getGeoAreasExportStatus(
                batchId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetExportPriceZoneHistory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/export/\(batchId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetExportPriceZoneHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Create courier rule
            * Description: Creates a rule within the delivery configuration.
            **/
            public func createCourierPartnerRule(
                body: CourierPartnerRule,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get courier rules
            * Description: Retrieve a list of rules within the delivery configuration.
            **/
            public func getCourierPartnerRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRulesListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRulesListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update courier rule
            * Description: Updates an existing rule within the delivery configuration
            **/
            public func updateCourierRule(
                ruleUid: String,
                body: CourierPartnerRule,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/\(ruleUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get courier rule
            * Description: Retrieves a single rule within the delivery configuration.
            **/
            public func getCourierPartnerRule(
                ruleUid: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/\(ruleUid)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Apply configuration to an application
            * Description: Apply configuration to application to set DP rules and Zone configuration
            **/
            public func updateApplicationConfiguration(
                body: ApplicationConfigPutRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationConfigPutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfigPutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get delivery configuration
            * Description: This API returns all the Application config that has been applied to the given company and application.
            **/
            public func getApplicationConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationConfigGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfigGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: To patch any config which can be applied to application.
            * Description: Apply configs to application. Supports patching for buybox rule config and promise config. For reference, refer to examples
            **/
            public func patchApplicationConfiguration(
                body: ApplicationConfigPatchRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationConfigPatchResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfigPatchResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rule configuration
            * Description: Retrieves information about the order routing setup for a single application
            **/
            public func getApplicationConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create store rule configuration
            * Description: Creates a order routing setup for an application, which involves updating sorting settings or rule priorities.
            **/
            public func insertApplicationConfig(
                body: StoreRuleConfigData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update store rules configuration
            * Description: Updates an existing order routing setup for a single application, which involves updating sorting settings or rule priorities.
            **/
            public func updateStoreRulesConfig(
                body: StoreRuleConfigData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rules
            * Description: Retrieves an existing order routing setup for a single application
            **/
            public func getStoreRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetStoreRulesApiResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStoreRulesApiResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create store rule
            * Description: Create a rule within the order routing rules
            **/
            public func createStoreRules(
                body: CreateStoreRuleRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Store Rule priority
            * Description: Update Store Rule priority
            **/
            public func updateStoreRulePriority(
                body: RulePriorityRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RulePriorityResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/priority",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RulePriorityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rule
            * Description: Retrieves a single rule within the order routing rules
            **/
            public func getStoreRule(
                ruleUid: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleDataSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleDataSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update store rule
            * Description: Updates an existing rule within the order routing rules.
            **/
            public func updateStoreRules(
                ruleUid: String,
                body: CreateStoreRuleRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleUpdateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleUpdateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update courier partner rule priority
            * Description: Updates a courier partner rule priority for a single application
            **/
            public func updateCourierPartnerRulePriority(
                body: RulePriorityRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RulePriorityResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/priority",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RulePriorityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get courier rule
            * Description: Retrieves details for a courier partner rule.
            **/
            public func getCourierPartnerRuleDetails(
                ruleUid: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponseDetailSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/\(ruleUid)/details",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponseDetailSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rule Details
            * Description: Retrieves details of a order routing rule.
            **/
            public func getStoreRuleDetails(
                ruleUid: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleDataDetailsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)/details",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleDataDetailsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Download geoarea sample file.
            * Description: Download a sample file for geoarea data.
            **/
            public func downloadGeoareaSampleFile(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/regions/bulk/sample",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/octet-stream",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Download Sample Delivery Zone Product Type file.
            * Description: Download a sample file for Delivery Zone with specified product type column (i.e. category, department, Item IDs or tags).
            **/
            public func downloadZoneSampleFile(
                productType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/bulk/sample/\(productType)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/octet-stream",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Order {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get all questions of that cluster
            * Description: Get all questions of that cluster
            **/
            public func getQuestions(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/question",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve rule lane configurations
            * Description: Retrieve rule lane configurations
            **/
            public func getRuleLaneConfig(
                searchValue: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleLaneConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = searchValue {
                    xQuery["search_value"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule-lane-config",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleLaneConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a new rule
            * Description: Create a new rule
            **/
            public func createRule(
                body: RuleRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a specific rule by ID
            * Description: Get a specific rule by ID
            **/
            public func getRuleById(
                ruleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a specific rule by ID
            * Description: Update a specific rule by ID
            **/
            public func updateRule(
                ruleId: String,
                body: RuleUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule/\(ruleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a specific rule by ID
            * Description: Delete a specific rule by ID
            **/
            public func deleteRule(
                ruleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update the position of a rule
            * Description: Update the position of a rule
            **/
            public func updateRulePosition(
                body: UpdateRulePositionRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule-position",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get available rule parameters
            * Description: Get available rule parameters
            **/
            public func getRuleParameters(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleParametersResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule-parameters",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleParametersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a list of rules
            * Description: Get a list of rules
            **/
            public func getRuleList(
                body: RuleListRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RuleListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule_list",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get reasons behind full or partial cancellation of a shipment
            * Description: Use this API to retrieve the issues that led to the cancellation of bags within a shipment.
            **/
            public func getShipmentBagReasons(
                shipmentId: String,
                lineNumber: Int,
                bagId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentBagReasons?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["bag_id"] = bagId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/line_number/\(lineNumber)/reasons",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentBagReasons.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get cross selling platform shipments
            * Description: Get cross selling platform shipments
            **/
            public func getApplicationShipments(
                lane: String?,
                searchType: String?,
                searchId: String?,
                searchValue: String?,
                fromDate: String?,
                toDate: String?,
                dpIds: String?,
                orderingCompanyId: String?,
                stores: String?,
                salesChannel: String?,
                requestByExt: String?,
                pageNo: Int?,
                pageSize: Int?,
                customerId: String?,
                isPrioritySort: Bool?,
                excludeLockedShipments: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentInternalPlatformViewResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = lane {
                    xQuery["lane"] = value
                }
                
                if let value = searchType {
                    xQuery["search_type"] = value
                }
                
                if let value = searchId {
                    xQuery["search_id"] = value
                }
                
                if let value = searchValue {
                    xQuery["search_value"] = value
                }
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                if let value = dpIds {
                    xQuery["dp_ids"] = value
                }
                
                if let value = orderingCompanyId {
                    xQuery["ordering_company_id"] = value
                }
                
                if let value = stores {
                    xQuery["stores"] = value
                }
                
                if let value = salesChannel {
                    xQuery["sales_channel"] = value
                }
                
                if let value = requestByExt {
                    xQuery["request_by_ext"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = customerId {
                    xQuery["customer_id"] = value
                }
                
                if let value = isPrioritySort {
                    xQuery["is_priority_sort"] = value
                }
                
                if let value = excludeLockedShipments {
                    xQuery["exclude_locked_shipments"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/shipments",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentInternalPlatformViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Track shipment
            * Description: Track Shipment by shipment id, for application based on application Id
            **/
            public func trackShipmentPlatform(
                shipmentId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformShipmentTrack?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/track",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformShipmentTrack.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Use this API to retrieve the issues that led to the cancellation of bags within a shipment.
            * Description: Using action, get reasons behind full or partial cancellation of a shipment
            **/
            public func getPlatformShipmentReasons(
                action: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentReasonsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/reasons/\(action)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentReasonsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
        }
        
        
            
        public class Partner {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create extension proxy
            * Description: Extension proxy can be used to call extension API from storefront and make extension API integration seamless.
            **/
            public func addProxyPath(
                extensionId: String,
                body: AddProxyReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddProxyResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove extension proxy
            * Description: Remove the proxy which are created earlier for the extension.
            **/
            public func removeProxyPath(
                extensionId: String,
                attachedPath: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RemoveProxyResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)/\(attachedPath)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RemoveProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Payment {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get secrets for brand payment gateway
            * Description: Retrieve configuration settings like key, secret, webhook url, merchant salt for brand payment gateways.
            **/
            public func getBrandPaymentGatewayConfig(
                aggregator: String,
                configType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentGatewayConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["aggregator"] = aggregator
                
                if let value = configType {
                    xQuery["config_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save brand payment gateway config.
            * Description: Store and update configuration settings for brand payment gateways i.e required for payment for a payment gateway like key, secret, merchant salt. - Payment
            **/
            public func saveBrandPaymentGatewayConfig(
                body: PaymentGatewayConfigRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentGatewayToBeReviewed?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayToBeReviewed.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment modes
            * Description: Get available payment methods on the payment page, specifying the aggregator for each option, such as 'Netbanking powered by Juspay' and 'Card powered by Razorpay'.
            **/
            public func getPaymentModeRoutes(
                refresh: Bool?,
                requestType: String?,
                orderId: String?,
                shipmentId: String?,
                amount: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentOptionsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = refresh {
                    xQuery["refresh"] = value
                }
                
                if let value = requestType {
                    xQuery["request_type"] = value
                }
                
                if let value = orderId {
                    xQuery["order_id"] = value
                }
                
                if let value = shipmentId {
                    xQuery["shipment_id"] = value
                }
                
                if let value = amount {
                    xQuery["amount"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOptionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get bank account details
            * Description: Retrieve bank account information
            **/
            public func getBankAccountDetailsOpenAPI(
                orderId: String,
                requestHash: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetRefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["order_id"] = orderId
                
                if let value = requestHash {
                    xQuery["request_hash"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetRefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create refund account
            * Description: The addition of a bank account specifically for refunds, employing OTP verification for security - Payment
            **/
            public func addRefundBankAccountUsingOTP(
                body: AddBeneficiaryDetailsOTPRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Get user order beneficiaries
            * Description: Retrieve beneficiary details like bank name , ifsc code , branch name associated with a specific order for refund processing
            **/
            public func getUserOrderBeneficiaries(
                orderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["order_id"] = orderId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/order",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get user beneficiaries.
            * Description: Retrieves information about beneficiaries associated with the user for processing refunds, based on the provided order ID
            **/
            public func getUserBeneficiaries(
                orderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["order_id"] = orderId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/user",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Payment confirmation
            * Description: Authentication and confirmation of a payment.It requires details such as the order ID and payment methods in the request body to authenticate and confirm the payment.
            **/
            public func confirmPayment(
                body: PaymentConfirmationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentConfirmationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentConfirmationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get user COD.
            * Description: Retrieve user cod limt data of user i.e cod is active or not for user and remaining limit
            **/
            public func getUserCODlimitRoutes(
                merchantUserId: String,
                mobileNo: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetUserCODLimitResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["merchant_user_id"] = merchantUserId
                xQuery["mobile_no"] = mobileNo
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetUserCODLimitResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Set user COD
            * Description: This allows access to seller to enable disable cod of specific user
            **/
            public func setUserCODlimitRoutes(
                body: SetCODForUserRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetUserCODLimitResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetUserCODLimitResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: EDC aggregators and model list.
            * Description: Retrieve a list of EDC (Electronic Data Capture) aggregators and models.
            **/
            public func edcAggregatorsAndModelList(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcAggregatorAndModelListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-aggregator-list",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcAggregatorAndModelListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: EDC device stats.
            * Description: Information about EDC (Electronic Data Capture) devices linked to a specific application within a company. It provides statistics such as the count of active and inactive devices.
            **/
            public func edcDeviceStats(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceStatsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-stats",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceStatsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update EDC device.
            * Description: Enables the modification of settings and details associated with an Electronic Data Capture (EDC) device linked to a specific application within a company. Upon success, it returns the updated information of the EDC device.
            **/
            public func updateEdcDevice(
                body: EdcAddRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceAddResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceAddResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get an EDC device
            * Description: Retrieve comprehensive details regarding an Electronic Data Capture (EDC) device associated with a particular terminal unique identifier within a company's application.Upon success, it returns the detailed information of the EDC device, including terminal serial number, EDC device serial number, merchant store POS code, store ID, aggregator ID and name, device tag, activation status, and EDC model.
            **/
            public func getEdcDevice(
                terminalUniqueIdentifier: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create an EDC device
            * Description: Registration and addition of a new EDC device to the system
            **/
            public func addEdcDevice(
                terminalUniqueIdentifier: String,
                body: EdcUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List EDC devices
            * Description: Retrieves a list of available Electronic Data Capture (EDC) devices.
            **/
            public func edcDeviceList(
                pageNo: Int?,
                pageSize: Int?,
                isActive: Bool?,
                storeId: Int?,
                deviceTag: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = storeId {
                    xQuery["store_id"] = value
                }
                
                if let value = deviceTag {
                    xQuery["device_tag"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-list",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List POS payment modes
            * Description: Retrieve payment options and aggregator for point-of-sale (POS).
            **/
            public func getPosPaymentModeRoutes(
                amount: Int,
                cartId: String?,
                pincode: String,
                checkoutMode: String?,
                refresh: Bool?,
                orderId: String?,
                cardReference: String?,
                orderType: String,
                userDetails: String?,
                displaySplit: Bool?,
                advancePayment: Bool?,
                shipmentId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentModeRouteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["amount"] = amount
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                xQuery["pincode"] = pincode
                
                if let value = checkoutMode {
                    xQuery["checkout_mode"] = value
                }
                
                if let value = refresh {
                    xQuery["refresh"] = value
                }
                
                if let value = orderId {
                    xQuery["order_id"] = value
                }
                
                if let value = cardReference {
                    xQuery["card_reference"] = value
                }
                xQuery["order_type"] = orderType
                
                if let value = userDetails {
                    xQuery["user_details"] = value
                }
                
                if let value = displaySplit {
                    xQuery["display_split"] = value
                }
                
                if let value = advancePayment {
                    xQuery["advance_payment"] = value
                }
                
                if let value = shipmentId {
                    xQuery["shipment_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/pos",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentModeRouteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Start payment process
            * Description: Initiates the payment procedure for an order.Upon successful initiation, it returns a  details including the success status, aggregator information, payment method, status, merchant order ID aggregator order , polling URL, timeout, virtual ID, Razorpay payment ID, customer ID, and device ID.
            **/
            public func initialisePayment(
                body: PaymentInitializationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentInitializationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/request",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentInitializationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check and update payment status.
            * Description: Polling process to confirm the payment status. It periodically checks and updates the current status of a payment, ensuring timely and accurate confirmation of payment transactions.
            **/
            public func checkAndUpdatePaymentStatus(
                body: PaymentStatusUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentStatusUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm/polling",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Resend or cancel payment.
            * Description: Enable you to perform actions related to the resending and cancellation of payment links through SMS or EMAIL. resend or cancel payment link that have been initiated but may require modification or cancellation for various reasons, ensuring flexibility and control in payment processing.
            **/
            public func resendOrCancelPayment(
                body: ResendOrCancelPaymentRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ResendOrCancelPaymentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/cancel",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendOrCancelPaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve status of multiple payments in bulk
            * Description: Retrieve status of multiple payments in bulk and returns the status of each payment along with associated details such as payment ID, amount, currency, status, payment mode, and payment gateway in the response
            **/
            public func paymentStatusBulk(
                body: PaymentStatusBulkHandlerRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentStatusBulkHandlerResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/payment-status-bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusBulkHandlerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get OAuth URL.
            * Description: This has been used when merchant is setup their razorpay payment gateway, they will redirect to razorpay site after submitting all their secrets for authetication.
            **/
            public func oauthGetUrl(
                aggregator: String,
                successRedirectUrl: String?,
                failureRedirectUrl: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetOauthUrlResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = successRedirectUrl {
                    xQuery["success_redirect_url"] = value
                }
                
                if let value = failureRedirectUrl {
                    xQuery["failure_redirect_url"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/onboard/\(aggregator)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetOauthUrlResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Revoke OAuth token.
            * Description: Revoke the creds  for payment aggregator
            **/
            public func revokeOauthToken(
                aggregator: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RevokeOAuthToken?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/revoke/\(aggregator)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RevokeOAuthToken.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Repayment details for BNPL.
            * Description: Retrieve repayment details for Buy Now Pay Later (BNPL) payment
            **/
            public func repaymentDetails(
                body: RepaymentDetailsSerialiserPayAll,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RepaymentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/repayment-details",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RepaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Merchant onboarding for BNPL.
            * Description: Initiate the merchant onboarding process for Buy Now Pay Later (BNPL).
            **/
            public func merchantOnBoarding(
                body: MerchantOnBoardingRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MerchantOnBoardingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/merchant-onboarding",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchantOnBoardingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate customer for paylater
            * Description: Verify whether the user is eligible for pay-later payment from the payment aggregator's side using the customer's phone number
            **/
            public func verifyCustomerForPayment(
                body: ValidateCustomerRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ValidateCustomerResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/customer/validation",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ValidateCustomerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment link
            * Description: Retrieve a payment link for making payments - Payment
            **/
            public func getPaymentLink(
                paymentLinkId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["payment_link_id"] = paymentLinkId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create payment link.
            * Description: Generate a payment link for accepting payments.
            **/
            public func createPaymentLink(
                body: CreatePaymentLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreatePaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment link
            * Description: get a payment link
            **/
            public func getPaymentLinkId(
                id: String,
                paymentLinkId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["payment_link_id"] = paymentLinkId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Poll status of payment link
            * Description: Periodically checks the status of a payment link to monitor for any updates or changes.retrieve real-time information about the payment link's current status, such as whether it has been processed, cancelled, or expired
            **/
            public func pollingPaymentLink(
                paymentLinkId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PollingPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["payment_link_id"] = paymentLinkId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/polling-payment-link",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PollingPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Resend payment link
            * Description: Resends an existing payment link to the user to complete the payment
            **/
            public func resendPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ResendPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/resend-payment-link",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Cancel payment link.
            * Description: Deactivate and cancel a payment link.
            **/
            public func cancelPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CancelPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/cancel-payment-link",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CancelPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get details for the active inactive payment modes for merchant
            * Description: get details for the given payment modes and its sequencingfor merchant
            **/
            public func getPaymentModeSequencing(
                businessUnit: String,
                device: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["business_unit"] = businessUnit
                xQuery["device"] = device
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment_modes/sequencing",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sequencing of payment modes for the merchant
            * Description: Update sequencing of payment modes for the merchant
            **/
            public func patchPaymentModeSequencing(
                body: PlatformPaymentModeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment_modes/sequencing",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get offline/advance payment mode
            * Description: Get details of offline / advance payment mode like for cod  offline payment mode get user level cod limit, order level cod limit, cod charge.
            **/
            public func getPaymentModeControlRoutes(
                mode: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformOfflineAdvanceResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformOfflineAdvanceResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update offline payment mode
            * Description: Update details of offline / advance payment mode like for cod  offline payment mode get user level cod limit, order level cod limit, cod charge.
            **/
            public func setMerchantModeControlRoutes(
                mode: String,
                body: PlatformOfflineAdvanceRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformOfflineAdvanceResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformOfflineAdvanceResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get advance payment custom configurations
            * Description: Merchants to fetch detailed information regarding advance payment custom configurations tailored to their specific business needs. merchants can access settings such as customer restrictions, available payment modes for both pre-order and post-order transactions
            **/
            public func getPaymentModeCustomConfig(
                mode: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update advance payment custom configurations
            * Description: Allows merchants to modify specific details of advance payment custom configurations tailored to their business requirements. By providing the company ID, application ID, and payment mode, merchants can update settings such as minimum order value, customer restrictions, and available payment modes for both pre-order and post-order transactions
            **/
            public func setPaymentModeCustomConfig(
                mode: String,
                body: PaymentCustomConfigRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Get payment mode codes
            * Description: Enables users to retrieve options for payment codes.users can access information such as payment method names, networks, and associated codes, facilitating seamless integration and management of payment modes
            **/
            public func getPaymentCodeOption(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPaymentCodeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/codes",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentCodeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment session
            * Description: Allows users to fetch the payment session details associated with a given order ID or transaction ID
            **/
            public func getPaymentSession(
                gid: String,
                lineItem: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPaymentSessionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = lineItem {
                    xQuery["line-item"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentSessionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update payment session.
            * Description: Update the details of a payment session associated with a given order ID or transaction ID.
            **/
            public func updatePaymentSession(
                gid: String,
                body: PaymentSessionRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update refund session
            * Description: Allows users to update the details of a refund session associated with a specific global identifier (GID) and request ID.
            **/
            public func updateRefundSession(
                gid: String,
                requestId: String,
                body: RefundSessionRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/\(gid)/refund/session/\(requestId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant payment option
            * Description: Retrieve available payment gateways and offline payment mode details for a merchant by providing company ID and application ID, returning a list of active payment gateways and their configurations, including online and offline options.
            **/
            public func getMerchantPaymentOption(
                paymentOptionType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformOnlineOfflinePaymentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = paymentOptionType {
                    xQuery["payment_option_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformOnlineOfflinePaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update payment gateways and payment mode
            * Description: Updated online/offline payment as active/inactive like disable offline payment mode will disable offline payment modes on checkout page on merchant's website
            **/
            public func patchMerchantPaymentOption(
                body: MerchantPaymentModeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PatchPlatformOnlineOfflinePaymentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PatchPlatformOnlineOfflinePaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all business units and it's devices.
            * Description: Get all business units and it's devices.
            **/
            public func getDevices(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetDeviceResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/all-devices",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetDeviceResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant aggregator payment mode details.
            * Description: swagger not found. so operationId not found
            **/
            public func getMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorPlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["business_unit"] = businessUnit
                xQuery["device"] = device
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorPlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update merchant aggregator payment mode
            * Description: update payment gateway and it's payment mode and it's sub payment mode details like for razorpay update active/inactive payment modes.
            **/
            public func patchMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                body: PlatformPaymentModeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant aggregator payment mode
            * Description: Get payment gateway and it's payment mode and it's sub payment mode details like for razorpay update active/inactive payment modes.
            **/
            public func getPGConfigAggregators(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant refund priority
            * Description: Get merchant refund priority.
            **/
            public func getAggregatorCredentialHistory(
                aggregator: String,
                configType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorHistoryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["aggregator"] = aggregator
                xQuery["config_type"] = configType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator/credential/history",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorHistoryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: API to get merchant refund priority
            * Description: API to get merchant refund priority
            **/
            public func getAggregatorCredential(
                aggregator: String,
                configType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorCredentialResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["aggregator"] = aggregator
                xQuery["config_type"] = configType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator/credential",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorCredentialResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Aggregator Credentials
            * Description: 
            **/
            public func updateAggregatorCredential(
                body: AggregatorCredentialRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PatchAggregatorCredentialResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator/credential",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PatchAggregatorCredentialResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant refund priority
            * Description: Retrieve merchant refund priority configurations, returning the status of the update and the refund sources priority with their descriptions and priorities.
            **/
            public func getMerchantRefundPriority(
                configType: String,
                businessUnit: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund_priority/config/\(configType)/\(businessUnit)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create merchant refund priority
            * Description: Create merchant refund priority configurations, with the provided refund sources priority details, and return the status of the operation.
            **/
            public func createMerchantRefundPriority(
                configType: String,
                businessUnit: String,
                body: RefundPriorityRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund_priority/config/\(configType)/\(businessUnit)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update merchant refund priority
            * Description: Update merchant refund priority configurations, with the provided refund sources priority details, and return the status of the operation.
            **/
            public func updateMerchantRefundPriority(
                configType: String,
                businessUnit: String,
                body: RefundPriorityRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund_priority/config/\(configType)/\(businessUnit)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Order
            * Description: Create an order and payment on the aggregator side
            **/
            public func createPaymentOrder(
                body: PaymentOrderRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentOrderResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment-orders",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOrderResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Copy payment mode config of onc device to another.
            * Description: Copy aggregator config like Wallet, NB, paylater from one device of an aggregator like razorpay to another device.
            **/
            public func copyConfigPaymentModes(
                body: PlatformPaymentModeCopyConfigRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment_modes/sequencing/copy-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Copy aggregator config of onc device to another.
            * Description: Copy aggregator config like Wallet, NB, paylater from one device of an aggregator like razorpay to another device.
            **/
            public func copyConfigAggPaymentModes(
                aggregatorId: String,
                body: PlatformPaymentModeCopyConfigRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/copy-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get app version for  Aggregator
            * Description: Get app version required for Payment Mode or sub payment mode for an Aggregator.if merchant required any PG payment mode after certain version for mobile app.
            **/
            public func getMerchantAggregatorAppVersion(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                paymentModeId: Int?,
                subPaymentMode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorVersionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["business_unit"] = businessUnit
                xQuery["device"] = device
                
                if let value = paymentModeId {
                    xQuery["payment_mode_id"] = value
                }
                
                if let value = subPaymentMode {
                    xQuery["sub_payment_mode"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorVersionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update app version required for Aggregator.
            * Description: Update app version required for Payment Mode or sub payment mode for an Aggregator.if merchant required any PG payment mode after certain version for mobile app.
            **/
            public func patchMerchantPaymentOptionVersion(
                aggregatorId: Int,
                body: AggregatorControlRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save bank details for cancelled/returned order
            * Description: save bank details for returned/cancelled order to refund amount in his account.
            **/
            public func addRefundBankAccount(
                body: AddBeneficiaryDetailsOTPRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account_create",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete saved beneficiary details of customers
            * Description: Delete the saved beneficiary details provided beneficiary Id.
            **/
            public func deleteBeneficiaryDetails(
                body: DeleteBeneficiaryRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteRefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account_create",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteRefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save refund source against shipment and order
            * Description: Save refund source against shipment and order
            **/
            public func setRefundOptionforShipment(
                body: ShipmentRefundRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentRefundResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/refundoptions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentRefundResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: get the selected refund options for shipment id
            * Description: get the selected refund options for shipment id
            **/
            public func getSelectedRefundOption(
                shipmentId: String,
                orderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SelectedRefundOptionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["shipment_id"] = shipmentId
                xQuery["order_id"] = orderId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/selected_refund_options",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SelectedRefundOptionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Lists the beneficiary of a refund
            * Description: get the details of all active beneficiary added by a user for refund.
            **/
            public func getUserBeneficiariesDetailV2(
                orderId: String?,
                shipmentId: String?,
                mop: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderBeneficiaryResponseSchemaV2?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = orderId {
                    xQuery["order_id"] = value
                }
                
                if let value = shipmentId {
                    xQuery["shipment_id"] = value
                }
                
                if let value = mop {
                    xQuery["mop"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v2.0/company/\(companyId)/application/\(applicationId)/refund/user/beneficiary",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponseSchemaV2.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate UPI ID and IFSC code
            * Description: Validate UPI ID and IFSC code
            **/
            public func validateBeneficiaryAddress(
                body: ValidateValidateAddressRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ValidateValidateAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/validate/beneficiary-address",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ValidateValidateAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Set a default beneficiary for a refund
            * Description: set a default beneficiary for getting a refund.
            **/
            public func updateDefaultBeneficiary(
                body: SetDefaultBeneficiaryRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SetDefaultBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/beneficiary/default",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetDefaultBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: pennydrop validation
            * Description: get pennydrop validation for bank account
            **/
            public func getPennyDropValidation(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PennyDropValidationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/pennydrop/validation",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PennyDropValidationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: update penny drop validation for application ID
            * Description: update penny drop validation for application ID
            **/
            public func updatePennyDropValidation(
                body: UpdatePennyDropValidationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PennyDropValidationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/pennydrop/validation",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PennyDropValidationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: get beneficiary details
            * Description: get beneficiary details
            **/
            public func getShipmentBeneficiary(
                shipmentId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentBeneficiaryDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refunds/beneficiary-details/\(shipmentId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentBeneficiaryDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Rewards {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List giveaways
            * Description: Retrieve and display available giveaways.
            **/
            public func showGiveaways(
                pageId: String,
                pageSize: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GiveawayResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page_id"] = pageId
                xQuery["page_size"] = pageSize
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GiveawayResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a giveaway
            * Description: Store and manage details of a giveaway.
            **/
            public func saveGiveAway(
                body: Giveaway,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a giveaway
            * Description: Retrieve specific giveaway details by its unique identifier.
            **/
            public func getGiveawayById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a giveaway
            * Description: Modify and update information about a giveaway.
            **/
            public func updateGiveAway(
                id: String,
                body: Giveaway,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List offers
            * Description: Display available offers for users.
            **/
            public func showOffers(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [Offer]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([Offer].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get offer by name
            * Description: Retrieve an offer by its name.
            **/
            public func getOfferByName(
                name: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update offer by name
            * Description: Modify and manage an offer using its name.
            **/
            public func updateOfferByName(
                name: String,
                body: Offer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update user status
            * Description: Change and update the status of a user in the rewards system.
            **/
            public func updateUserStatus(
                userId: String,
                body: AppUser,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppUser?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppUser.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a user
            * Description: Retrieve comprehensive details about a user in the rewards program.
            **/
            public func getUserDetails(
                userId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get reward user points history
            * Description: Retrieve the history of points earned and redeemed by a user.
            **/
            public func getUserPointsHistory(
                userId: String,
                pageId: String?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: HistoryRes?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/points/history/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(HistoryRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get rewards configuration
            * Description: Retrieve the configuration settings for the rewards program.
            **/
            public func getRewardsConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Set rewards configuration
            * Description: Configure and modify the settings for the rewards program.
            **/
            public func setRewardsConfiguration(
                body: ConfigurationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SetConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Share {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create short link.
            * Description: Generate a shortened URL link for sharing.
            **/
            public func createShortLink(
                body: ShortLinkReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get short links.
            * Description: Retrieve a list of all generated short links.
            **/
            public func getShortLinks(
                pageNo: Int?,
                pageSize: Int?,
                createdBy: String?,
                active: String?,
                shortUrl: String?,
                originalUrl: String?,
                title: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkList?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = createdBy {
                    xQuery["created_by"] = value
                }
                
                if let value = active {
                    xQuery["active"] = value
                }
                
                if let value = shortUrl {
                    xQuery["short_url"] = value
                }
                
                if let value = originalUrl {
                    xQuery["original_url"] = value
                }
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get short link by hash.
            * Description: Retrieve a specific short link by its unique hash.
            **/
            public func getShortLinkByHash(
                hash: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/\(hash)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update short link by ID.
            * Description: Update details of a specific short link by its ID.
            **/
            public func updateShortLinkById(
                id: String,
                body: ShortLinkReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Theme {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List pages of a theme 
            * Description: Retrieve a list of all available pages.
            **/
            public func getAllPages(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create theme page
            * Description: Generate and add a new page to the selected theme of the Platform.
            **/
            public func createPage(
                themeId: String,
                body: AvailablePageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update theme pages
            * Description: Modify multiple pages simultaneously of a theme.
            **/
            public func updateMultiplePages(
                themeId: String,
                body: AllAvailablePageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a page
            * Description: Retrieve detailed information about a specific page of a theme.
            **/
            public func getPage(
                themeId: String,
                pageValue: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a page
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                themeId: String,
                pageValue: String,
                body: AvailablePageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a page
            * Description: Remove a page from a theme of the platform.
            **/
            public func deletePage(
                themeId: String,
                pageValue: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List theme fonts
            * Description: Retrieve a list of available fonts that can be used by themes in the platform.
            **/
            public func getFonts(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: FontsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/fonts",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FontsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List theme fonts
            * Description: Retrieve a list of available fonts that can be used by themes in the platform.
            **/
            public func getFontsV2(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: FontsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/fonts",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FontsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: List sales channel themes
            * Description: Retrieve all draft themes added to sales channel from theme collection.
            **/
            public func getApplicationThemes(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [ThemesSchema]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/themes",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([ThemesSchema].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel themes count
            * Description: Retrieve count of all draft themes added to sales channel from theme collection.
            **/
            public func getApplicationThemesCount(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/application_themes_count",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get theme
            * Description: Retrieve a theme by its unique identifier. Response contains theme template data and data stored in theme editor.
            **/
            public func getThemeById(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update theme
            * Description: Modify and update the content and settings of a theme.
            **/
            public func updateTheme(
                themeId: String,
                body: ThemesSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete theme
            * Description: Remove a theme from theme drafts of a sales channel.
            **/
            public func deleteTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update theme name
            * Description: Modify the name of the draft theme by theme Id.
            **/
            public func updateThemeName(
                themeId: String,
                body: UpdateThemeNameRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/name",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Apply a theme
            * Description: Change current applied theme with new draft theme.
            **/
            public func applyTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/apply",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Duplicate a theme
            * Description: Create a new copy of an existing theme by theme Id
            **/
            public func duplicateTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/duplicate",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Create theme
            * Description: Creating a new theme.
            **/
            public func createTheme(
                body: CompanyThemeReqSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get applied theme
            * Description: Retrieve the currently applied theme of a sales channel using application Id.
            **/
            public func getAppliedTheme(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get theme for preview
            * Description: Retrieve a theme by its unique identifier. Response contains theme template data and data stored in theme editor.
            **/
            public func getThemeForPreview(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/preview",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get theme last modified date
            * Description: Retrieve the last modification of a theme used for polling and identifing cross user changes in a theme.
            **/
            public func getThemeLastModified(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "HEAD",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/polling",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check theme is upgradable
            * Description: Determine if a public theme is eligible for an upgrade to a new version after any new version released in marketplace.
            **/
            public func isUpgradable(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemeUpgradableResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgradable",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemeUpgradableResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Upgrade theme
            * Description: Update a draft theme to a new version of the marketplace.
            **/
            public func upgradeTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgrade",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get latest version of theme by slug.
            * Description: Retrieve the most recent version of a theme using its slug.
            **/
            public func getLatestVersionOfThemeBySlug(
                slugName: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [MarketplaceTheme]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/slug/\(slugName)/latest",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([MarketplaceTheme].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get extension sections
            * Description: Retrieve the list of extension sections for a given application in the specified company.
            **/
            public func getExtensionSections(
                type: String?,
                companyMode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [GetExtensionSectionRes]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = companyMode {
                    xQuery["company_mode"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/extension-section",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([GetExtensionSectionRes].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
        }
        
        
            
        public class User {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get a List of Users
            * Description: Retrieve details of users registered in the sales channel
            **/
            public func getCustomers(
                q: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomerListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/list",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomerListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Search an Existing Users
            * Description: Search and filter users details registered in the sales channel
            **/
            public func searchUsers(
                q: String?,
                query: [String]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserSearchResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/search",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserSearchResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create User
            * Description: Register and add a new user to the sales channel.
            **/
            public func createUser(
                body: CreateUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Block/Unblock Users
            * Description: Manage user access by blocking or unblocking their accounts, restricting login for blocked accounts and allowing login for unblocked accounts.
            **/
            public func blockOrUnblockUsers(
                body: BlockUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlockUserSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/activation",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlockUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Restore Deleted User
            * Description: Restore a previously deleted user account.
            **/
            public func unDeleteUser(
                body: UnDeleteUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UnDeleteUserSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/undelete",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UnDeleteUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update User Details
            * Description: Modify and update user profile information.
            **/
            public func updateUser(
                userId: String,
                body: UpdateUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create User Session
            * Description: Create session for user interactions
            **/
            public func createUserSession(
                body: CreateUserSessionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateUserSessionResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserSessionResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Session
            * Description: Terminate an active user session.
            **/
            public func deleteSession(
                id: String,
                sessionId: String,
                reason: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SessionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                xQuery["session_id"] = sessionId
                xQuery["reason"] = reason
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Active Sessions
            * Description: Retrieve a list of currently active user sessions.
            **/
            public func getActiveSessions(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SessionListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Active Sessions
            * Description: Terminate all active user sessions.
            **/
            public func deleteActiveSessions(
                id: String,
                reason: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SessionsDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                xQuery["reason"] = reason
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionsDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Archive User
            * Description: Delete user from sales channel, allowing re-registration with the same mobile/email for a new user account.
            **/
            public func archiveUser(
                body: ArchiveUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ArchiveUserSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/archive",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ArchiveUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Platform Config
            * Description: Retrieve platform sales channel authentication configuration.
            **/
            public func getPlatformConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Platform Config
            * Description: Modify and update platform sales channel authentication configuration.
            **/
            public func updatePlatformConfig(
                body: PlatformSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create User Group
            * Description: Form and add a new user group.
            **/
            public func createUserGroup(
                body: CreateUserGroup,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Groups
            * Description: Retrieve a list of user groups.
            **/
            public func getUserGroups(
                pageNo: String?,
                pageSize: String?,
                name: String?,
                type: String?,
                status: String?,
                groupUid: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = name {
                    xQuery["name"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                if let value = groupUid {
                    xQuery["group_uid"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update User Group
            * Description: Modify and update user group details.
            **/
            public func updateUserGroup(
                groupId: String,
                body: UpdateUserGroupSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Group
            * Description: Retrieve a user group by its unique identifier.
            **/
            public func getUserGroupById(
                groupId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Modify User Group
            * Description: Update user group partially on the platform.
            **/
            public func updateUserGroupPartially(
                groupId: String,
                body: PartialUserGroupUpdateSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get users belonging to user group by Id
            * Description: Use this API to users belonging to user Group
            **/
            public func getUsersByByGroupId(
                groupId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomerListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)/users",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomerListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a User Attribute Definition
            * Description: Create a new User Attribute Definition
            **/
            public func createUserAttributeDefinition(
                body: CreateUserAttributeDefinition,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeDefinitionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinitionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute Definitions
            * Description: Retrieve user attribute definitions.
            **/
            public func getUserAttributeDefinitions(
                excludingIds: String?,
                slug: String?,
                type: String?,
                customerEditable: Bool?,
                encrypted: Bool?,
                pinned: Bool?,
                pinOrder: Int?,
                isLocked: Bool?,
                name: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = excludingIds {
                    xQuery["excluding_ids"] = value
                }
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = customerEditable {
                    xQuery["customer_editable"] = value
                }
                
                if let value = encrypted {
                    xQuery["encrypted"] = value
                }
                
                if let value = pinned {
                    xQuery["pinned"] = value
                }
                
                if let value = pinOrder {
                    xQuery["pin_order"] = value
                }
                
                if let value = isLocked {
                    xQuery["is_locked"] = value
                }
                
                if let value = name {
                    xQuery["name"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update User Attribute Definition
            * Description: Update an existing user attribute definition.
            **/
            public func updateUserAttributeDefinition(
                attributeDefId: String,
                body: CreateUserAttributeDefinition,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Attribute Definition
            * Description: Delete a user attribute definition by its unique identifier.
            **/
            public func deleteUserAttributeDefinitionById(
                attributeDefId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute Definition
            * Description: Get a user attribute definition by its unique identifier.
            **/
            public func getUserAttributeDefinitionById(
                attributeDefId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Or Create User Attribute
            * Description: Update Or Create User Attribute
            **/
            public func updateUserAttribute(
                attributeDefId: String,
                userId: String,
                body: CreateUserAttributeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute
            * Description: Get User Attribute
            **/
            public func getUserAttribute(
                attributeDefId: String,
                userId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Attribute
            * Description: Delete User Attribute
            **/
            public func deleteUserAttribute(
                attributeDefId: String,
                userId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get All Customer Attributes
            * Description: Retrieve all user attributes for a specific user
            **/
            public func getUserAttributesForUser(
                userId: String,
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/user/\(userId)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute
            * Description: Retrieve User Attribute details by ID.
            **/
            public func getUserAttributeById(
                attributeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/attribute/\(attributeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
    }
}