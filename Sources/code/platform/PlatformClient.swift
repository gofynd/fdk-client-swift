

import Foundation

public class PlatformClient {
    public let config: PlatformConfig

    public let auditTrail: AuditTrail

    public let billing: Billing

    public let catalog: Catalog

    public let common: Common

    public let communication: Communication

    public let companyProfile: CompanyProfile

    public let configuration: Configuration

    public let content: Content

    public let discount: Discount

    public let fileStorage: FileStorage

    public let finance: Finance

    public let lead: Lead

    public let serviceability: Serviceability

    public let order: Order

    public let payment: Payment

    public let theme: Theme

    public let webhook: Webhook

    public init(config: PlatformConfig) {
        self.config = config
        
        auditTrail = AuditTrail(config: config)
        
        billing = Billing(config: config)
        
        catalog = Catalog(config: config)
        
        common = Common(config: config)
        
        communication = Communication(config: config)
        
        companyProfile = CompanyProfile(config: config)
        
        configuration = Configuration(config: config)
        
        content = Content(config: config)
        
        discount = Discount(config: config)
        
        fileStorage = FileStorage(config: config)
        
        finance = Finance(config: config)
        
        lead = Lead(config: config)
        
        serviceability = Serviceability(config: config)
        
        order = Order(config: config)
        
        payment = Payment(config: config)
        
        theme = Theme(config: config)
        
        webhook = Webhook(config: config)
        
    }
    public func setLocationDetails(details: PlatformConfig.LocationDetails?){
        config.locationDetails = details
    }
    public func applicationClient(id: String) -> ApplicationClient {
        return ApplicationClient(applicationId: id, config: config)
    }

    public class ApplicationClient {
        var config: PlatformConfig
        var companyId: String
        var applicationId: String

        
        public let analytics: Analytics
        
        public let cart: Cart
        
        public let catalog: Catalog
        
        public let communication: Communication
        
        public let configuration: Configuration
        
        public let content: Content
        
        public let fileStorage: FileStorage
        
        public let lead: Lead
        
        public let serviceability: Serviceability
        
        public let order: Order
        
        public let partner: Partner
        
        public let payment: Payment
        
        public let rewards: Rewards
        
        public let share: Share
        
        public let theme: Theme
        
        public let user: User
        
        
        public init(applicationId: String, config: PlatformConfig) {
            self.config = config
            self.companyId = config.companyId
            self.applicationId = applicationId

            
            analytics = Analytics(config: config, applicationId: applicationId)
            
            cart = Cart(config: config, applicationId: applicationId)
            
            catalog = Catalog(config: config, applicationId: applicationId)
            
            communication = Communication(config: config, applicationId: applicationId)
            
            configuration = Configuration(config: config, applicationId: applicationId)
            
            content = Content(config: config, applicationId: applicationId)
            
            fileStorage = FileStorage(config: config, applicationId: applicationId)
            
            lead = Lead(config: config, applicationId: applicationId)
            
            serviceability = Serviceability(config: config, applicationId: applicationId)
            
            order = Order(config: config, applicationId: applicationId)
            
            partner = Partner(config: config, applicationId: applicationId)
            
            payment = Payment(config: config, applicationId: applicationId)
            
            rewards = Rewards(config: config, applicationId: applicationId)
            
            share = Share(config: config, applicationId: applicationId)
            
            theme = Theme(config: config, applicationId: applicationId)
            
            user = User(config: config, applicationId: applicationId)
            
        }

        
            
        public class Analytics {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Executes given sql(Base64 Encoded) query
            * Description: Query click events data
            **/
            public func executeJobForProvidedParametersV2(
                body: JobExecute,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/job/execute",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Initiates download job
            * Description: Initiates download job and returns job name
            **/
            public func startDownloadForQueryV2(
                exportType: String,
                body: FileDownloadRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["export_type"] = exportType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/job/download",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checks download job status
            * Description: Takes job name in path param to check the status of job Returns file URL if downloading is done else returns status of job
            **/
            public func checkJobStatusByNameV2(
                fileName: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/job/\(fileName)/status",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Cart {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List coupons
            * Description: Retrieve a list of all created coupons for specific sales channel. It also supports searching based on text search, pagination and other flags to filter coupons.
            **/
            public func getCoupons(
                pageNo: Int?,
                pageSize: Int?,
                isArchived: Bool?,
                title: String?,
                isPublic: Bool?,
                isDisplay: Bool?,
                typeSlug: String?,
                code: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = isArchived {
                    xQuery["is_archived"] = value
                }
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                if let value = isPublic {
                    xQuery["is_public"] = value
                }
                
                if let value = isDisplay {
                    xQuery["is_display"] = value
                }
                
                if let value = typeSlug {
                    xQuery["type_slug"] = value
                }
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a coupon
            * Description: Creates a new coupon based on the selected coupon type. Sellers can choose from multiple supported coupon types, including percentage value, fixed amount value, bundled discount, buy X get Y items, and more, along with customizable coupon criteria to meet specific business requirements.
            **/
            public func createCoupon(
                body: CouponAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a coupon
            * Description: Retrieve details of a specific coupon by providing its unique identifier to obtain information such as coupon type, rules, validity period and other related information.
            **/
            public func getCouponById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CouponUpdate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a coupon
            * Description: Update the details of an existing coupon by specifying its unique identifier. This includes modifying coupon attributes such as discount percentage, validity period, and associated conditions. Leveraging this functionality allows businesses to quickly adapt their promotional strategies to changing market dynamics.
            **/
            public func updateCoupon(
                id: String,
                body: CouponUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a coupon partially 
            * Description: Seller can make partial adjustments of an existing coupon by specifying its unique identifier. It enables businesses to modify specific attributes of the coupon while preserving other details intact.
            **/
            public func updateCouponPartially(
                id: String,
                body: CouponPartialUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List promotions
            * Description: Retrieve a list of all created promotions for specific sales channel. It also supports efficient text search and pagination functionalities, ensuring optimized promotion listing for streamlined navigation and management.
            **/
            public func getPromotions(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                promoGroup: String?,
                promotionType: String?,
                fpPanel: String?,
                promotionId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = promoGroup {
                    xQuery["promo_group"] = value
                }
                
                if let value = promotionType {
                    xQuery["promotion_type"] = value
                }
                
                if let value = fpPanel {
                    xQuery["fp_panel"] = value
                }
                
                if let value = promotionId {
                    xQuery["promotion_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a promotion
            * Description: Creates a new promotion based on the selected promotion type. Sellers can choose from multiple supported promotion types, including percentage value, fixed amount value, bundled discount, buy X get Y items, and more, along with customizable promotion criteria to meet specific business requirements.
            **/
            public func createPromotion(
                body: PromotionAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionAdd?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a promotion
            * Description: Retrieve details of a specific promotion by providing its unique identifier to obtain information such as promotion type, rules, validity period and other related information.
            **/
            public func getPromotionById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionUpdate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a promotion
            * Description: Update the details of an existing promotion by specifying its unique identifier. This includes modifying promotion attributes such as discount percentage, validity period, and associated conditions. Leveraging this functionality allows businesses to quickly adapt their promotional strategies to changing market dynamics.
            **/
            public func updatePromotion(
                id: String,
                body: PromotionUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionUpdate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a promotion partially 
            * Description: Seller can make partial adjustments of an existing promotion by specifying its unique identifier. It enables businesses to modify specific attributes of the promotion while preserving other details intact.
            **/
            public func updatePromotionPartially(
                id: String,
                body: PromotionPartialUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get promotion and coupon type
            * Description: Retrieve the configuration settings related to promotions and coupons for a specific seller. It provides details of the supported types of coupons and promotions along with their descriptions, examples, and related attributes.
            **/
            public func getPromosCouponConfig(
                entityType: String?,
                isHidden: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ActivePromosResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = entityType {
                    xQuery["entity_type"] = value
                }
                
                if let value = isHidden {
                    xQuery["is_hidden"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promo-coupons",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ActivePromosResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List available promotion offers
            * Description: Retrieve a list of all promotional offers available for the items in the cart, including details such as offer text, unique promotion ID, and validity period.
            **/
            public func getPromotionOffers(
                slug: String?,
                pageSize: Int?,
                promotionGroup: String?,
                storeId: Int?,
                cartType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionOffersResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = promotionGroup {
                    xQuery["promotion_group"] = value
                }
                
                if let value = storeId {
                    xQuery["store_id"] = value
                }
                
                if let value = cartType {
                    xQuery["cart_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/available-promotions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionOffersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Fetch available promotions payment offers
            * Description: Use this API to get top 5 payment offers available for current product
            **/
            public func getPromotionPaymentOffers(
                id: String?,
                uid: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PromotionPaymentOffersResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/available-payment-offers",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionPaymentOffersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart meta
            * Description: Modify the configuration settings for cart metadata associated with a specific sales channel. Cart meta includes configuration settings such as allowed maximum cart value, allowed minimum cart value, maximum allowed cart items, delivery charges, etc.
            **/
            public func updateCartMetaConfig(
                cartMetaId: String,
                body: CartMetaConfigUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigUpdate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration/\(cartMetaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get cart meta
            * Description: Retrieve meta configuration settings tailored for customizing the cart experience within a specific sales channel. Cart meta includes configuration settings such as allowed maximum cart value, allowed minimum cart value, maximum allowed cart items, delivery charges, etc.
            **/
            public func fetchCartMetaConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigAdd?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a new cart meta
            * Description: Create custom meta configurations for carts associated with a specific sales channel. By specifying the company ID and application ID, seller can define unique cart settings, including preferences, rules, and constraints, tailored to their business needs.
            **/
            public func createCartMetaConfig(
                body: CartMetaConfigAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaConfigAdd?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update price adjustments
            * Description: Modify price adjustments for specific items in the cart. By providing the seller ID, sales channel ID, and price adjustment ID, seller can apply discounts or other adjustments to the prices of cart items, facilitating dynamic pricing strategies.
            **/
            public func updatePriceAdjustment(
                id: String,
                body: PriceAdjustmentUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove price adjustments
            * Description: Remove the applied price adjustments for specific items within the cart based on unique price adjustment ID.
            **/
            public func removePriceAdjustment(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create price adjustments
            * Description: Create custom price adjustments for items in the cart, facilitating the application of discounts or promotions. Price adjustments can be tailored based on specific sales channel contexts, enhancing flexibility in pricing strategies.
            **/
            public func addPriceAdjustment(
                body: PriceAdjustmentAdd,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a list of all price adjustments associated with a cart
            * Description: This API helps to get price adjustments data associated to a particular cart
            **/
            public func getPriceAdjustments(
                cartId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["cart_id"] = cartId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get and validate cart items
            * Description: Retrieve cart details for a provided list of cart items and validate its contents. This ensures accuracy and completeness in cart information, including item quantities, prices, discounts, and applicable taxes.
            **/
            public func fetchAndvalidateCartItems(
                body: OpenapiCartDetailsRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OpenapiCartDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenapiCartDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check cart serviceability
            * Description: Verify the serviceability of items in the cart at a specific pin code and ensure accurate delivery promises. System checks each item's availability and delivery feasibility, providing real-time information on serviceability and estimated delivery times.
            **/
            public func checkCartServiceability(
                body: OpenApiCartServiceabilityRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OpenApiCartServiceabilityResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/serviceability",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCartServiceabilityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checkout cart
            * Description: The checkout cart initiates the order creation process based on the selected address and payment method. It revalidates the cart details to ensure safe and seamless order placement.
            **/
            public func checkoutCart(
                body: OpenApiPlatformCheckoutReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OpenApiCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/checkout",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get abandoned carts
            * Description: Retrieve the list of abandoned carts that have been active for the specified period of time and have not yet been archived for the specific sales channel.
            **/
            public func getAbandonedCart(
                pageNo: Int?,
                pageSize: Int?,
                fromDate: String?,
                toDate: String?,
                anonymousCart: Bool?,
                lastId: String?,
                sortOn: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AbandonedCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                if let value = anonymousCart {
                    xQuery["anonymous_cart"] = value
                }
                
                if let value = lastId {
                    xQuery["last_id"] = value
                }
                
                if let value = sortOn {
                    xQuery["sort_on"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AbandonedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get abandoned cart details
            * Description: Retrieves abandoned cart details linked to a specific customer using a unique cart ID. It offers an overview of the items, quantities, prices, and other relevant information associated with the cart.
            **/
            public func getAbandonedCartDetails(
                id: String?,
                i: Bool?,
                b: Bool?,
                c: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/cart/detail",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add items to cart
            * Description: Add product items to the customer's existing shopping cart. If there is no existing cart associated with the customer, it creates a new one and adds the items to it.
            **/
            public func addItems(
                cartId: String,
                b: Bool?,
                body: AddCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart items
            * Description: Customers can modify added product attributes such as quantity and size, as well as remove items from the cart.
            **/
            public func updateCart(
                cartId: String,
                b: Bool?,
                body: UpdateCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get coupon option values
            * Description: Retrieves the available values for coupon options used to create and update coupons.
            **/
            public func getCouponOptionValues(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_options",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check coupon code exists
            * Description: Validates the presence of a coupon code for the specified sales channel to verify whether the provided code already exists or not.
            **/
            public func getCouponCodeExists(
                code: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check promotion code exists
            * Description: Validates the presence of a promotion code for the specified sales channel to verify whether the provided code already exists or not.
            **/
            public func getPromotionCodeExists(
                code: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = code {
                    xQuery["code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart checkout
            * Description: Overrides the cart's checkout process with a new provided cart items. It provides flexibility in customizing checkout flows to meet specific business requirements, enhancing the user experience and optimizing order processing workflows.
            **/
            public func overrideCart(
                body: OverrideCheckoutReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OverrideCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout/over-ride",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OverrideCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Share cart link
            * Description: Generate a unique shareable link for the customer's cart for a specific sales channel. This link enables easy sharing of the cart contents with other users, facilitating collaborative shopping experiences.
            **/
            public func getCartShareLink(
                body: GetShareCartLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetShareCartLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetShareCartLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List shared cart items
            * Description: Retrieve the cart items from the shared cart link based on unique token.
            **/
            public func getCartSharedItems(
                token: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart/\(token)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update shared cart items
            * Description: Customer can either merge or replace shared cart items with existing cart.
            **/
            public func updateCartWithSharedItems(
                token: String,
                action: String,
                cartId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart/\(token)/\(action)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List carts
            * Description: Retrieve the list of active carts associated with a specific customer. 
            **/
            public func getCartList(
                fromDate: String?,
                toDate: String?,
                filterOn: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MultiCartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                if let value = filterOn {
                    xQuery["filter_on"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart-list",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MultiCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update user of a cart
            * Description: Modify the cart user to a new valid customer for the provided customer ID.
            **/
            public func updateCartUser(
                id: String?,
                body: UpdateUserCartMapping,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserCartMappingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/update-user",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserCartMappingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a cart
            * Description: Retrieve details of a cart linked to a specific customer using either the customer's ID or a unique cart ID. It offers an overview of the items, quantities, prices, and other relevant information associated with the cart.
            **/
            public func getCart(
                id: String?,
                userId: String?,
                orderType: String?,
                i: Bool?,
                b: Bool?,
                assignCardId: Int?,
                buyNow: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = assignCardId {
                    xQuery["assign_card_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Add items to cart
            * Description: Add product items to the customer's existing shopping cart. If there is no existing cart associated with the customer, it creates a new one and adds the items to it.
            **/
            public func platformAddItems(
                i: Bool?,
                b: Bool?,
                buyNow: Bool?,
                orderType: String?,
                id: String?,
                body: PlatformAddCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart items
            * Description: Customers can modify added product attributes such as quantity and size, as well as remove items from the cart.
            **/
            public func platformUpdateCart(
                id: String?,
                i: Bool?,
                orderType: String?,
                b: Bool?,
                buyNow: Bool?,
                body: PlatformUpdateCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a cart
            * Description: Delete all items from the user's cart and resets it to its initial state, providing a clean slate for new selections.
            **/
            public func deleteCart(
                id: String?,
                body: DeleteCartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_archive",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a cart items count
            * Description: Retrieve the total count of items currently present in the customer's cart.
            **/
            public func getItemCount(
                id: String?,
                buyNow: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartItemCountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/basic",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartItemCountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List coupons
            * Description: Retrieve a list of all available coupons that customer can apply to their carts. It provides details about each coupon, including its code, discount amount, and applicable conditions.
            **/
            public func getAppCoupons(
                id: String?,
                buyNow: Bool?,
                slug: String?,
                storeId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCouponResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = storeId {
                    xQuery["store_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCouponResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Apply coupon
            * Description: 
Apply a coupon code to the customer's cart to trigger discounts on eligible items
            **/
            public func applyCoupon(
                i: Bool?,
                b: Bool?,
                p: Bool?,
                id: String?,
                buyNow: Bool?,
                body: ApplyCouponRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                if let value = p {
                    xQuery["p"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove coupon
            * Description: Remove an applied coupon from the customer's cart, thereby removing the associated discount from the cart total.
            **/
            public func removeCoupon(
                uid: String?,
                buyNow: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a list of addresses for a customer
            * Description: Retrieves a list of all addresses saved by the customer, simplifying the checkout process by offering pre-saved address options for delivery.
            **/
            public func getAddresses(
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformGetAddressesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = mobileNo {
                    xQuery["mobile_no"] = value
                }
                
                if let value = checkoutMode {
                    xQuery["checkout_mode"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = isDefault {
                    xQuery["is_default"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformGetAddressesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Creates a new address for a customer
            * Description: Customers can add a new address to their cart to save details such as name, email, contact information, and address.
            **/
            public func addAddress(
                body: PlatformAddress,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SaveAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SaveAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get details for a single customer address
            * Description: Retrieve a specific customer address stored in the system by providing its unique identifier. This API provides detailed information about the address, including the recipient's name, address, city, postal code, and other relevant details.
            **/
            public func getAddressById(
                id: String,
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformAddress?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = mobileNo {
                    xQuery["mobile_no"] = value
                }
                
                if let value = checkoutMode {
                    xQuery["checkout_mode"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = isDefault {
                    xQuery["is_default"] = value
                }
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformAddress.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Updates an existing customer address
            * Description: Update the user address
            **/
            public func updateAddress(
                id: String,
                body: PlatformAddress,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Removes an address from a customer's address list
            * Description: Remove an existing customer address from the system.
            **/
            public func removeAddress(
                id: String,
                userId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteAddressResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = userId {
                    xQuery["user_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select customer address for order processing
            * Description: Select an address from the saved customer addresses and validates the availability of items in the cart. Additionally, it verifies and updates the delivery promise based on the selected address.
            **/
            public func selectAddress(
                cartId: String?,
                buyNow: Bool?,
                i: Bool?,
                b: Bool?,
                body: PlatformSelectCartAddressRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = b {
                    xQuery["b"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/select-address",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get shipments details
            * Description: Use this API to get shipment details, expected delivery date, items and price breakup of the shipment.
            **/
            public func getShipments(
                pickAtStoreUid: Int?,
                orderingStoreId: Int?,
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pickAtStoreUid {
                    xQuery["pick_at_store_uid"] = value
                }
                
                if let value = orderingStoreId {
                    xQuery["ordering_store_id"] = value
                }
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = p {
                    xQuery["p"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = addressId {
                    xQuery["address_id"] = value
                }
                
                if let value = areaCode {
                    xQuery["area_code"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update shipments
            * Description: Update the quantity or delivery type of the shipments. Customers can switch the order type from Home Delivery to Pick At Store and vice versa.
            **/
            public func updateShipments(
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                body: UpdateCartShipmentRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = i {
                    xQuery["i"] = value
                }
                
                if let value = p {
                    xQuery["p"] = value
                }
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = addressId {
                    xQuery["address_id"] = value
                }
                
                if let value = areaCode {
                    xQuery["area_code"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update cart metadata
            * Description: Add or modify metadata associated with a cart, which includes customer preferences, delivery instructions, or any special requirements related to the cart items.
            **/
            public func updateCartMeta(
                id: String?,
                buyNow: Bool?,
                body: PlatformCartMetaRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartMetaResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/meta",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checkout cart
            * Description: The checkout cart initiates the order creation process based on the selected address and payment method. It revalidates the cart details to ensure safe and seamless order placement.
            **/
            public func platformCheckoutCart(
                id: String?,
                body: PlatformCartCheckoutDetailRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get delivery modes
            * Description: Retrieve a list of delivery modes (home delivery/store pickup) along with a list of available pickup stores for a given cart at a specified PIN Code.
            **/
            public func getAvailableDeliveryModes(
                areaCode: String,
                id: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDeliveryModesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["area_code"] = areaCode
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/available-delivery-mode",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDeliveryModesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Store Address
            * Description: Retrieve store details by entering the unique identifier of the pickup stores. Store details include the seller's name, contact information such as email address or phone number and business address.
            **/
            public func getStoreAddressByUid(
                storeUid: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["store_uid"] = storeUid
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/store-address",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select payment mode
            * Description: Customers can select a preferred payment mode from available options during the cart checkout process to securely and efficiently complete their transaction.
            **/
            public func selectPaymentMode(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate applied coupon
            * Description: Validates the applicability of a coupon code for the selected payment mode for the existing cart. This ensures the coupon's validity before proceeding with the payment process, enhancing user experience and preventing potential errors during transactions.
            **/
            public func validateCouponForPayment(
                id: String?,
                buyNow: Bool?,
                addressId: String?,
                paymentMode: String?,
                paymentIdentifier: String?,
                aggregatorName: String?,
                merchantCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentCouponValidate?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = addressId {
                    xQuery["address_id"] = value
                }
                
                if let value = paymentMode {
                    xQuery["payment_mode"] = value
                }
                
                if let value = paymentIdentifier {
                    xQuery["payment_identifier"] = value
                }
                
                if let value = aggregatorName {
                    xQuery["aggregator_name"] = value
                }
                
                if let value = merchantCode {
                    xQuery["merchant_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment/validate/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCouponValidate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Checkout cart
            * Description: The checkout cart initiates the order creation process based on the items in the user's cart,  their selected address, and chosen payment methods. It also supports multiple payment method  options and revalidates the cart details to ensure a secure and seamless order placement.
            **/
            public func platformCheckoutCartV2(
                id: String?,
                body: PlatformCartCheckoutDetailV2Request,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select payment mode (latest)
            * Description: Selection of payment mode that supports multiple MOP(mode of payment).
            **/
            public func selectPaymentModeV2(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequestV2,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = id {
                    xQuery["id"] = value
                }
                
                if let value = buyNow {
                    xQuery["buy_now"] = value
                }
                
                if let value = orderType {
                    xQuery["order_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create price adjustments in Bulk
            * Description: Create custom price adjustments for items in the cart, facilitating the application of discounts or promotions. Price adjustments can be tailored based on specific sales channel contexts, enhancing flexibility in pricing strategies.
            **/
            public func addBulkPriceAdjustment(
                body: BulkPriceAdjustmentAddRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BulkPriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/bulk-price-adjustment",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BulkPriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update price adjustments
            * Description: Modify price adjustments for specific items in the cart. By providing the seller ID, sales channel ID, and price adjustment ID, seller can apply discounts or other adjustments to the prices of cart items, facilitating dynamic pricing strategies.
            **/
            public func updateBulkPriceAdjustment(
                body: BulkPriceAdjustmentUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BulkPriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/bulk-price-adjustment",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BulkPriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove price adjustments in bulk.
            * Description: Remove the applied price adjustments for specific items within the cart based on unique price adjustment IDs.
            **/
            public func removeBulkPriceAdjustment(
                priceAdjustmentIds: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["price_adjustment_ids"] = priceAdjustmentIds
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/bulk-price-adjustment",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Catalog {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get catalog counts
            * Description: Retrieve the count of catalog related data like products, brands, departments and categories that have been made live as per configuration of the sales channel.
            **/
            public func getCatalogInsights(
                brand: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CatalogInsightResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = brand {
                    xQuery["brand"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/analytics/insights/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CatalogInsightResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel brands
            * Description: Retrieve brand listings related to the sales channel. A brand is the name under which a product is being sold
            **/
            public func getApplicationBrandListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationBrandListingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationBrandListingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrandListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandListingPaginator(
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationBrandListingSchema> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationBrandListingSchema>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrandListing(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update sales channel brand
            * Description: Modify data associated to the brand for that particular sales channel.
            **/
            public func updateAppBrand(
                brandUid: Int,
                body: ApplicationBrandJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand/\(brandUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List brands
            * Description: List all the brands.
            **/
            public func getApplicationBrands(
                department: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = department {
                    xQuery["department"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = brandId {
                    xQuery["brand_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brands",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrands
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandsPaginator(
                department: String?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrands(
                        department: department,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        brandId: brandId,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: List categories
            * Description: Retrieve a list of categories associated to company and sales channel. user can filter on departments.
            **/
            public func getCategories(
                department: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CategoryListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = department {
                    xQuery["department"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/categories",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CategoryListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel categories
            * Description: Retrieve category listings related to the sales channel , with the ability to filter results based on department ,category names etc.
            **/
            public func getApplicationCategoryListing(
                departmentId: Int?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationCategoryListingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = departmentId {
                    xQuery["department_id"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationCategoryListingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationCategoryListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationCategoryListingPaginator(
                departmentId: Int?,
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationCategoryListingSchema> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationCategoryListingSchema>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationCategoryListing(
                        departmentId: departmentId,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update sales channel category
            * Description: Modify category data related to the sales channel .
            **/
            public func updateAppCategory(
                categoryUid: String,
                body: ApplicationCategoryJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category/\(categoryUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List collections
            * Description: Retrieve all collections based on criteria such as collection name, schedule status, and active status.
            **/
            public func getAllCollections(
                q: String?,
                scheduleStatus: String?,
                type: String?,
                tags: [String]?,
                isActive: Bool?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCollectionListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = scheduleStatus {
                    xQuery["schedule_status"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAllCollections
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAllCollectionsPaginator(
                q: String?,
                scheduleStatus: String?,
                type: String?,
                tags: [String]?,
                isActive: Bool?,
                pageSize: Int?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<GetCollectionListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<GetCollectionListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAllCollections(
                        q: q,
                        scheduleStatus: scheduleStatus,
                        type: type,
                        tags: tags,
                        isActive: isActive,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create a collection
            * Description: Create a collection for a sales channel linked to a company.
            **/
            public func createCollection(
                body: CreateCollection,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CollectionCreateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CollectionCreateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List product filters
            * Description: This API is designed to retrieve the filter values for all available options within the selected filter, such as "red" for color.

            **/
            public func getApplicationFilterValues(
                filterKey: String,
                c: String?,
                collectionId: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetQueryFiltersValuesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                if let value = collectionId {
                    xQuery["collection_id"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filter-options/\(filterKey)/values",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersValuesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List filter keys
            * Description: Retrieve the details of all applicable product filters, such as Color, Brand, and Category, indicating the criteria keys where filters can be applied.
            **/
            public func getApplicationFilterKeys(
                c: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetQueryFiltersKeysResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filter-options/keys",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersKeysResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get collection query filters
            * Description: Retrieve query filters to configure a collection for a company and a sales channel.
            **/
            public func getQueryFilters(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetQueryFiltersResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/query-options/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a collection
            * Description: Delete a collection by it's id. Returns an object that tells whether the collection was deleted successfully
            **/
            public func deleteCollection(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a collection
            * Description: Update a collection by it's id. On successful request, returns the updated collection
            **/
            public func updateCollection(
                id: String,
                body: UpdateCollection,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List items of collection
            * Description: Get items from a collection specified by its id.
            **/
            public func getCollectionItems(
                id: String,
                sortOn: String?,
                pageId: String?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCollectionItemsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = sortOn {
                    xQuery["sort_on"] = value
                }
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionItemsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create items in a collection
            * Description: Adds items to a collection specified by its id
            **/
            public func addCollectionItems(
                id: String,
                body: CollectionItemUpdateSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a collection
            * Description: Get the details of a collection by its slug.
            **/
            public func getCollectionDetail(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCollectionDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(slug)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel departments
            * Description: Retrieve department listings related to the sales channel. Departments are used to categorize similar products, and you can filter the results based on department names
            **/
            public func getApplicationDepartmentListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationDepartmentListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDepartmentListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationDepartmentListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationDepartmentListingPaginator(
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationDepartmentListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationDepartmentListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationDepartmentListing(
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update sales channel department
            * Description: Modify department data associated to the sales channel.
            **/
            public func updateAppDepartment(
                departmentUid: String,
                body: ApplicationDepartmentJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department/\(departmentUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List departments
            * Description: Retrieve a list of departments associated with a comapny and sales channel.
            **/
            public func getDepartments(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DepartmentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/departments",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DepartmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel inventory
            * Description: Retrieve inventory data related to the sales channel. this can be used  to get the Inventory status of products with the filters of timestamp, store_ids, brand_ids, item_id, Items, Pagination.
            **/
            public func getAppInventory(
                itemIds: [Int]?,
                storeIds: [Int]?,
                brandIds: [Int]?,
                sellerIdentifiers: [String]?,
                timestamp: String?,
                pageSize: Int?,
                pageId: String?,
                qtyGt: Int?,
                qtyLt: Int?,
                qtyType: String?,
                fromDate: String?,
                toDate: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: InventoryStockResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                if let value = storeIds {
                    xQuery["store_ids"] = value
                }
                
                if let value = brandIds {
                    xQuery["brand_ids"] = value
                }
                
                if let value = sellerIdentifiers {
                    xQuery["seller_identifiers"] = value
                }
                
                if let value = timestamp {
                    xQuery["timestamp"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = qtyGt {
                    xQuery["qty_gt"] = value
                }
                
                if let value = qtyLt {
                    xQuery["qty_lt"] = value
                }
                
                if let value = qtyType {
                    xQuery["qty_type"] = value
                }
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/inventory/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventoryStockResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channels
            * Description: Retrieve all stores associated with an sales channel, with support for searching by store name and filtering by store type and status (verified/unverified)
            **/
            public func getAppLocations(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageNo: Int?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LocationListSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = storeType {
                    xQuery["store_type"] = value
                }
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = stage {
                    xQuery["stage"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = storeTypes {
                    xQuery["store_types"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/locations",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LocationListSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppLocations
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppLocationsPaginator(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<LocationListSerializer> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<LocationListSerializer>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppLocations(
                        storeType: storeType,
                        uid: uid,
                        q: q,
                        stage: stage,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        tags: tags,
                        storeTypes: storeTypes,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get product configurations
            * Description: Retrieve a detailed configurations for product catalog specific to a company and an sales channel.
            **/
            public func getConfigurations(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create product listing configuration
            * Description: Add configuration for products & listing specific to a company and an sales channel.
            **/
            public func createConfigurationProductListing(
                body: AppConfiguration,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get catalog configuration meta data
            * Description: Retrieve configuration meta data for the catalog specific to a company and an sales channel.
            **/
            public func getCatalogConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetCatalogConfigurationMetaData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/metadata/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCatalogConfigurationMetaData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get configuration
            * Description: Retrieve configuration details based on a specific type in the catalog for a company and an sales channel.
            **/
            public func getConfigurationByType(
                type: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogEntityConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(type)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogEntityConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create configuration
            * Description: Add configuration details based on a specific type in the catalog for a company and an sales channel.
            **/
            public func createConfigurationByType(
                type: String,
                body: AppConfiguration,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(type)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel product
            * Description: Retrieve sales channel product details by its item_id and depending upon filters sent in request.
            **/
            public func getAppProduct(
                itemId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OwnerAppItemResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OwnerAppItemResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel product
            * Description: Allows to update data associated to a item by its item_id for an sales channel.
            **/
            public func updateAppProduct(
                itemId: String,
                body: ApplicationItemMeta,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel products
            * Description: Retrieve products associated with the sales channel. List all the products associated with a brand, collection or category in a requested sort order.
            **/
            public func getAppicationProducts(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageId: String?,
                pageSize: Int?,
                pageNo: Int?,
                pageType: String?,
                itemIds: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = f {
                    xQuery["f"] = value
                }
                
                if let value = c {
                    xQuery["c"] = value
                }
                
                if let value = filters {
                    xQuery["filters"] = value
                }
                
                if let value = isDependent {
                    xQuery["is_dependent"] = value
                }
                
                if let value = sortOn {
                    xQuery["sort_on"] = value
                }
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageType {
                    xQuery["page_type"] = value
                }
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppicationProducts
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppicationProductsPaginator(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageSize: Int?,
                itemIds: [Int]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<ApplicationProductListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationProductListingResponse>(pageSize: pageSize, type: "cursor")
                paginator.onPage = {
                    self.getAppicationProducts(
                        q: q,
                        f: f,
                        c: c,
                        filters: filters,
                        isDependent: isDependent,
                        sortOn: sortOn,
                        pageId: paginator.pageId,
                        pageSize: paginator.pageSize,
                        pageNo: paginator.pageNo,
                        pageType: paginator.type,
                        itemIds: itemIds,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageId = response.page.nextId
                            
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get discounted inventory
            * Description: Allows to retrieve Inventory data for particular company grouped by size and store.
            **/
            public func getDiscountedInventoryBySizeIdentifier(
                itemId: Int,
                sizeIdentifier: String,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                locationIds: [Int]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: InventorySellerIdentifierResponsePaginated?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = locationIds {
                    xQuery["location_ids"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(itemId)/inventory/\(sizeIdentifier)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventorySellerIdentifierResponsePaginated.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getDiscountedInventoryBySizeIdentifier
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getDiscountedInventoryBySizeIdentifierPaginator(
                itemId: Int,
                sizeIdentifier: String,
                pageSize: Int?,
                q: String?,
                locationIds: [Int]?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<InventorySellerIdentifierResponsePaginated> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<InventorySellerIdentifierResponsePaginated>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getDiscountedInventoryBySizeIdentifier(
                        itemId: itemId,
                        sizeIdentifier: sizeIdentifier,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        locationIds: locationIds,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get product details
            * Description: Retrieve detailed product information using a product slug. 
            **/
            public func getProductDetailBySlug(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ProductDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel products
            * Description: Retrieve products specific to the sales channel, with filtering options available for brand, category, department, tags, item IDs, product name, and pagination support
            **/
            public func getAppProducts(
                brandIds: [Int]?,
                categoryIds: [Int]?,
                departmentIds: [Int]?,
                tags: [String]?,
                itemIds: [Int]?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RawProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = brandIds {
                    xQuery["brand_ids"] = value
                }
                
                if let value = categoryIds {
                    xQuery["category_ids"] = value
                }
                
                if let value = departmentIds {
                    xQuery["department_ids"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = itemIds {
                    xQuery["item_ids"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/raw-products/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RawProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppProducts
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppProductsPaginator(
                brandIds: [Int]?,
                categoryIds: [Int]?,
                departmentIds: [Int]?,
                tags: [String]?,
                itemIds: [Int]?,
                pageSize: Int?,
                q: String?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<RawProductListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<RawProductListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppProducts(
                        brandIds: brandIds,
                        categoryIds: categoryIds,
                        departmentIds: departmentIds,
                        tags: tags,
                        itemIds: itemIds,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        q: q,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: get product-return configuration
            * Description: Get Product Return configuration set at an sales channel level
            **/
            public func getAppReturnConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create product return configuration
            * Description: This allows you to configure all return-related settings, such as is_returnable and return window etc. for sales channel level
            **/
            public func createAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update product return configuration
            * Description: Update Return configuration level set for an sales channel.
            **/
            public func updateAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete product return configuration
            * Description: Delete Category level sales channel Return Configuration setttings
            **/
            public func deleteAppCategoryReturnConfiguration(
                body: DeleteAppCategoryReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get category return configuration
            * Description: Get all category level configuration level set for an sales channel.
            **/
            public func getAppCategoryReturnConfig(
                q: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BaseAppCategoryReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BaseAppCategoryReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create return configuration
            * Description: Create Category level sales channel Return Configuration setttings
            **/
            public func createAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update return Configuration
            * Description: Update Category level sales channel Return Configuration setttings
            **/
            public func updateAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get autocomplete configuration
            * Description: Get custom autocomplete keyword configuration for a specific sales channel which allows you to map any endpoint with these keywords to give you the ultimate suggestion results.
            **/
            public func getAutocompleteConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create autocomplete configurations
            * Description: Create custom autocomplete keyword configurations for a specific sales channel to map any endpoint with these keywords.
            **/
            public func createCustomAutocompleteRule(
                body: CreateAutocompleteKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete autocomplete keyword
            * Description: Delete custom autocomplete keyword configurations for a specific sales channel by its id.
            **/
            public func deleteAutocompleteKeyword(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get autocomplete keyword
            * Description: Retrieve detailed information about a specific autocomplete keyword for a specific sales channel by its id.
            **/
            public func getAutocompleteKeywordDetail(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update autocomplete keyword
            * Description: Update a specific autocomplete keyword configuration by its id for a specific sales channel.
            **/
            public func updateAutocompleteKeyword(
                id: String,
                body: CreateAutocompleteKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete search configuration
            * Description: Delete Search Configuration for a specific sales channel.
            **/
            public func deleteSearchConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Search configuration
            * Description: Get search configuration for a specific company and sales channel.
            **/
            public func getSearchConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create search configuration
            * Description: Create search configuration for the catalog for a specific company and sales channel.
            **/
            public func createSearchConfiguration(
                body: CreateSearchConfigurationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update search configuration
            * Description: Allows you to modify searchable attributes for an sales channel. searchable attributes are the fields on which the products are searched.
            **/
            public func updateSearchConfiguration(
                body: UpdateSearchConfigurationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UpdateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List search keywords
            * Description: Get all custom search keywords for a specific company and sales channel allows you to map certain conditions with the keywords to give you ultimate results.
            **/
            public func getAllSearchKeyword(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create search keywords
            * Description: Create a Custom Search Keywords for a specific company and sales channel allows you to map certail conditions with the keywords to give you ultimate results.
            **/
            public func createCustomKeyword(
                body: CreateSearchKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete search keywords
            * Description: Delete a search keywords by its id for a specific company and sales channel.
            **/
            public func deleteSearchKeywords(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get search keywords
            * Description: Retrieve a list of a specific list of keywords by its id for a specific company and sales channel.
            **/
            public func getSearchKeywords(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsDetailResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update search keywords
            * Description: Update a specific search keyword by its id for a specific company and sales channel.
            **/
            public func updateSearchKeywords(
                id: String,
                body: CreateSearchKeyword,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel location
            * Description: Modify location data related to the sales channel.
            **/
            public func updateAppLocation(
                storeUid: String,
                body: ApplicationStoreJson,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessResponseObject?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/store/\(storeUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseObject.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update 'Allow Single' setting
            * Description: Modify allow single flag for filters of the sales channel for a company and an sales channel.
            **/
            public func updateAllowSingle(
                body: AllowSingleRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/filter/allow_single",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update default sorting
            * Description: Modify the default sort key configuration for a company and an sales channel.
            **/
            public func updateDefaultSort(
                body: DefaultKeyRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/sort/default_key",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get listing configurations
            * Description: Retrieve product listing configurations based on specific config_type for a company and an sales channel.
            **/
            public func getListingConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create listing configuration
            * Description: Add configuration for product catalog listing specific to a company and an sales channel.
            **/
            public func createListingConfiguration(
                configType: String,
                body: AppConfigurationsSort,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationsSort?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsSort.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get group configurations
            * Description: Retrieve the details of product group configurations based on config types for a company and an sales channel.
            **/
            public func getGroupConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                templateSlug: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                if let value = templateSlug {
                    xQuery["template_slug"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create group configuration
            * Description: Create group configuration for a specific config_type for a company and an sales channel.
            **/
            public func createGroupConfiguration(
                configType: String,
                body: AppConfigurationDetail,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete group configuration
            * Description: Delete group configurations by its slug for a specific config_type for a company and an sales channel.
            **/
            public func deleteGroupConfiguration(
                configType: String,
                groupSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update group configuration
            * Description: Modify group configurations by its slug for specific config_type for a company and an sales channel.
            **/
            public func updateGroupConfiguration(
                configType: String,
                groupSlug: String,
                body: AppConfigurationDetail,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete listing configuration
            * Description: Remove a specific product listing configuration by its config_id for a specific config_type for a company and an sales channel.
            **/
            public func deleteListingConfiguration(
                configType: String,
                configId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/item/\(configId)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update listing configuration
            * Description: Modify a specific product listing configuration by its config_id for a specific config_type for a company and an sales channel.
            **/
            public func updateListingConfiguration(
                configType: String,
                configId: String,
                body: AppConfigurationsSort,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppConfigurationsSort?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/item/\(configId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsSort.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get configuration metadata
            * Description: Retrieve the configuraion metadata details for specific config_type for a company and an sales channel.
            **/
            public func getConfigurationMetadata(
                configType: String,
                templateSlug: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetConfigMetadataResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = templateSlug {
                    xQuery["template_slug"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/\(configType)/metadata/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigMetadataResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }
        
        
            
        public class Communication {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get application providers
            * Description: Retrieve a list of providers associated with the sales channel.
            **/
            public func getAppProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/get-provider",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update application providers
            * Description: Modify provider configuration using provider object id .
            **/
            public func updateAppProviders(
                body: AppProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/update-provider",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get global providers
            * Description: Retrieve a list of global communication providers associated with the sales channel..
            **/
            public func getGlobalProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GlobalProviders?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/global-providers",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all email providers
            * Description: Retrieves a list of all email communication providers associated with the sales channel..
            **/
            public func getEmailProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProviders?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create an email provider
            * Description: Creates a new email communication provider.
            **/
            public func createEmailProvider(
                body: EmailProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a email provider
            * Description: Retrieves detailed information about a specific email communication provider.
            **/
            public func getEmailProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update email provider
            * Description: Modifys the configurations of a specific email communication provider.
            **/
            public func updateEmailProviderById(
                id: String,
                body: EmailProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an email provider
            * Description: Removes a specific email communication provider from the platform permenantly.
            **/
            public func deleteEmailProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all SMS providers
            * Description: Retrieves a list of SMS communication providers.
            **/
            public func getSmsProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create SMS provider
            * Description: Creates a new SMS communication provider.
            **/
            public func createSmsProvider(
                body: SmsProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all default SMS providers
            * Description: Retrieve all the default SMS communication providers.
            **/
            public func getDefaultSmsProviders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [DefaultSmsProviders]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/default-providers",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DefaultSmsProviders].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a SMS provider
            * Description: Retrieve detailed information about a specific SMS communication provider.
            **/
            public func getSmsProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update SMS provider
            * Description: Modifys the configurations of a specific SMS communication provider.
            **/
            public func updateSmsProviderById(
                id: String,
                body: SmsProviderReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an SMS provider
            * Description: Removes a specific SMS communication provider from the platform permenantly.
            **/
            public func deleteSmsProviderById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all campaigns
            * Description: Retrieves a list of communication campaigns.
            **/
            public func getCampaigns(
                query: [String: Any]?,
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaigns?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaigns.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a campaign
            * Description: Creates a new communication campaign.
            **/
            public func createCampaign(
                body: CampaignReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a campaign
            * Description: Retrieves detailed information about a specific communication campaign.
            **/
            public func getCampaignById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a campaign
            * Description: Modify the configuration of a specific communication campaign.
            **/
            public func updateCampaignById(
                id: String,
                body: CampaignReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get campaign statistics
            * Description: Retrieves statistical data for a specific a communication campaign.
            **/
            public func getStatsOfCampaignById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetStats?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/get-stats/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStats.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get BigQuery row count
            * Description: Retrieves big query row count by id
            **/
            public func getBigQueryRowCountById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-row-count/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a BigQuery row count
            * Description: Creates big query row count
            **/
            public func createBigQueryRowCount(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-row-count",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get BigQuery headers
            * Description: Retrieves header information from BigQuery.
            **/
            public func getBigQueryHeadersById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-headers/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create BigQuery N-count
            * Description: Creates big query n count
            **/
            public func createBigQueryNCount(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-n-records",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create BigQuery headers
            * Description: Create BigQuery headers
            **/
            public func createBigQueryHeaders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/bigquery-headers",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get system audiences
            * Description: Retrieves a list of  system-defined audiences for communication.
            **/
            public func getSystemAudiences(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/system-datasources",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all the audiences
            * Description: Retrieves a list of all the audiences.
            **/
            public func getAudiences(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audiences?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audiences.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create an audience
            * Description: Creates a new email audience.
            **/
            public func createAudience(
                body: AudienceReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get an audience
            * Description: Retrieves detailed information about an specific audience.
            **/
            public func getAudienceById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update an audience
            * Description: Modify the configuration of a specific audience.
            **/
            public func updateAudienceById(
                id: String,
                body: AudienceReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an audience
            * Description: Remove a specific audience permenantly.
            **/
            public func deleteAudienceById(
                id: String,
                body: AudienceReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get dummy data sources
            * Description: Retrieve a list of dummy data sources.
            **/
            public func getDummyDatasources(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [DummyDatasources]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/dummy-data-sources",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DummyDatasources].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get dummy data sources metadata
            * Description: Retrieve metadata information about dummy data sources.
            **/
            public func getDummyDatasourcesMeta(
                id: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DummyDatasourcesMeta?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/dummy-data-sources-meta/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyDatasourcesMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get N sample records of a CSV
            * Description: Retrieve a specified number of sample records from a CSV data source.
            **/
            public func getNSampleRecordsFromCsvByGet(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get N sample records of a CSV
            * Description: Retrieve a specified number of sample records from a CSV data source.
            **/
            public func getNSampleRecordsFromCsv(
                body: GetNRecordsCsvReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all email templates
            * Description: Retrieves a list of available email communication templates.
            **/
            public func getEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Creat an email template
            * Description: Creates a new email communication template.
            **/
            public func createEmailTemplate(
                body: EmailTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all system email templates
            * Description: Retrieves system-defined email communication templates.
            **/
            public func getSystemEmailTemplates(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SystemEmailTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/system-templates",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SystemEmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get an email template
            * Description: Retrieves detailed information about a specific email communication template.
            **/
            public func getEmailTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update an email template
            * Description: Modifys the content and settings of a specific email communication template.
            **/
            public func updateEmailTemplateById(
                id: String,
                body: EmailTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an email template
            * Description: Removes a specific email communication template from the platform permenantly.
            **/
            public func deleteEmailTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all subscribed email templates
            * Description: Retrieves a list of email communication templates that are subscribed to an event.
            **/
            public func getSubscribedEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EmailTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all SMS templates
            * Description: Retrieve a list of all SMS communication templates.
            **/
            public func getSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a SMS template
            * Description: Creates a new SMS communication template.
            **/
            public func createSmsTemplate(
                body: SmsTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Gets all system SMS templates
            * Description: Retrieves system-defined SMS communication templates.
            **/
            public func getSystemSmsTemplates(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [SystemSmsTemplates]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/system-templates",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([SystemSmsTemplates].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a SMS template
            * Description: Retrieves detailed information about a specific SMS communication template.
            **/
            public func getSmsTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a SMS template
            * Description: Modifys the content and settings of a specific SMS communication template.
            **/
            public func updateSmsTemplateById(
                id: String,
                body: SmsTemplateReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an SMS template
            * Description: Removes a specific SMS communication template from the platform permenantly.
            **/
            public func deleteSmsTemplateById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all subscribed SMS templates
            * Description: Retrieve a list of SMS communication templates that are subscribed to an event.
            **/
            public func getSubscribedSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SmsTemplates?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Send communication synchronously
            * Description: Sends real-time communications to sellers with immediate delivery.
            **/
            public func sendCommunicationSynchronously(
                body: EngineRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EngineResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-instant",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EngineResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Send communication asynchronously
            * Description: Sends communications to sellers with deffered delivery.
            **/
            public func sendCommunicationAsynchronously(
                body: EngineRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EngineResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-async",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EngineResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all event subscriptions
            * Description: Retrieves a list of all event subscriptions.
            **/
            public func getEventSubscriptions(
                pageNo: Int?,
                pageSize: Int?,
                populate: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscriptions?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = populate {
                    xQuery["populate"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptions.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create an event subscription
            * Description: Creates a new event subscription.
            **/
            public func createEventSubscriptions(
                body: SubscriptionsObject,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscriptionsBulkUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptionsBulkUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get an event subscription
            * Description: Retrieves detailed information about a specific event subscription.
            **/
            public func getEventSubscriptionsById(
                id: String,
                populate: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = populate {
                    xQuery["populate"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update an event subscriptions
            * Description: Modifys the configuration and settings of a specific event subscription.
            **/
            public func editEventSubscriptions(
                id: String,
                body: SubscriptionsObject,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EventSubscriptionsBulkUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptionsBulkUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an event subscriptions
            * Description: Removes a specific event subscription from the platform permenantly.
            **/
            public func deleteEventSubscriptionsById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GenericDelete?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GenericDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create event subscriptions in bulk
            * Description: Creates a new event subscription in bulk.
            **/
            public func createEventSubscriptionsByBulk(
                body: EventSubscriptionsBulkUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [EventSubscriptionsBulkUpdateResponse]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/bulkUpdate",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([EventSubscriptionsBulkUpdateResponse].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all global variables
            * Description: Retrieves a list of communication global variables.
            **/
            public func getGlobalVariables(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GlobalVariablesGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create global variables
            * Description: Updates and creates communication global variables.
            **/
            public func postGlobalVariables(
                body: GlobalVariablesReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GlobalVariablesPostResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesPostResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all campaign jobs
            * Description: Retrieves a list of campaign jobs.
            **/
            public func getJobs(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Jobs?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Jobs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a campaign  jobs
            * Description: Creates a new campaign  job.
            **/
            public func createJobs(
                body: CreateJobsReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateJobsRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateJobsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Trigger a campaign job
            * Description: Initiates a job to execute a communication campaign.
            **/
            public func triggerCampaignJob(
                body: TriggerJobRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TriggerJobResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/trigger-job",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TriggerJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get logs of all campaign job
            * Description: Retrieve logs and details related to campaign jobs.
            **/
            public func getJobLogs(
                pageNo: Int?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: JobLogs?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/logs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(JobLogs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get communication reports
            * Description: Retrieve a lsit of logs and records of communication activities.
            **/
            public func getCommunicationLogs(
                pageId: String?,
                pageSize: Int?,
                sort: [String: Any]?,
                query: [String: Any]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Logs?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = sort {
                    xQuery["sort"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/log",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Logs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Send OTP
            * Description: Sends a one-time password (OTP) for authentication or verification.
            **/
            public func sendOtp(
                body: SendOtpCommsReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SendOtpCommsRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/send-otp-comms",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendOtpCommsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Verify OTP
            * Description: Verifies the one-time password (OTP) for authentication or verification.
            **/
            public func verfiyOtp(
                body: VerifyOtpCommsReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: VerifyOtpCommsSuccessRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/verify-otp-comms",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(VerifyOtpCommsSuccessRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get configuration of otp
            * Description: Retrieves all configurations related to OTP.
            **/
            public func getOtpConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update configuration of otp
            * Description: Updates all configurations related to OTP.
            **/
            public func updateOtpConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Configuration {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get Build Configuration
            * Description: Retrieve latest build configuration, such as app name, landing page image, splash image used in a mobile build.
            **/
            public func getBuildConfig(
                platformType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MobileAppConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MobileAppConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update build configuration
            * Description: Modify the existing build configuration, such as app name, landing page image, splash image used in a mobile build.
            **/
            public func updateBuildConfig(
                platformType: String,
                body: MobileAppConfigRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MobileAppConfiguration?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MobileAppConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get previous versions
            * Description: Retrieve version details of the app, this includes the build status, build date, version name, latest version, and a lot more.
            **/
            public func getPreviousVersions(
                platformType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BuildVersionHistory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/versions",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BuildVersionHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel
            * Description: Shows feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func getAppFeatures(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppFeatureResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeatureResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel
            * Description: Modify the feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func updateAppFeatures(
                body: AppFeatureRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: update  sales channel features
            * Description: Modify the feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func modifyAppFeatures(
                body: AppFeatureRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel
            * Description: Shows basic sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func getAppBasicDetails(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel basic details
            * Description: Modify sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func updateAppBasicDetails(
                body: ApplicationDetail,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel contact
            * Description: Fetch data such as social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the sales channel.
            **/
            public func getAppContactInfo(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel contact
            * Description: Modify the social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the sales channel.
            **/
            public func updateAppContactInfo(
                body: ApplicationInformation,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel API tokens
            * Description: Retrieve the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google, and Facebook auth. 
            **/
            public func getAppApiTokens(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel API tokens
            * Description: Add and edit the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google and Facebook auth.
            **/
            public func updateAppApiTokens(
                body: TokenResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List sales channel companies
            * Description: Retrieve info of all the companies (e.g. name, uid, and company type) whose inventory is fetched into the current sales channel sales channel
            **/
            public func getAppCompanies(
                uid: Int?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CompaniesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = uid {
                    xQuery["uid"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/companies",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompaniesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: list sales channel stores
            * Description: Retrieve information of all the companies (e.g. uid, name, display name, store type, store code and company id) whose inventory is fetched into the current sales channel sales channel
            **/
            public func getAppStores(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoresResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/stores",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get inventory configuration
            * Description: Retrieve configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func getInventoryConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update inventory configuration
            * Description: Modify the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func updateInventoryConfig(
                body: ApplicationInventory,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Partially update inventory configuration
            * Description: Modify the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func partiallyUpdateInventoryConfig(
                body: AppInventoryPartialUpdate,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel currency configuration
            * Description: Retrieve a list of currencies supported in the current sales channel. Moreover, get the cuurency that is set as the default one in the sales channel.
            **/
            public func getAppCurrencyConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel currency configuration
            * Description: Modify currency configuration settings for the sales channel. Add and edit the currencies supported in the sales channel. Initially, INR will be enabled by default.
            **/
            public func updateAppCurrencyConfig(
                body: AppSupportedCurrency,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List supported currencies
            * Description: Retrieve a list of supported currencies for the sales channel. A list of currencies allowed in the current sales channel. Moreover, get the name, code, symbol, and the decimal digits of the currencies.
            **/
            public func getAppSupportedCurrency(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppCurrencyResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency/supported",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppCurrencyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List ordering stores 
            * Description: Retrieve ordering stores based on specified filters. Use filters and retrieve the details of the deployment stores (the selling locations where the sales channel will be utilised for placing orders).
            **/
            public func getOrderingStoresByFilter(
                pageNo: Int?,
                pageSize: Int?,
                body: FilterOrderingStoreRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStores?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/stores/filter",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStores.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update ordering store configuration
            * Description: Modify configuration settings for ordering stores. Edit the details of the deployment stores (the selling locations where the sales channel will be utilised for placing orders)
            **/
            public func updateOrderingStoreConfig(
                body: OrderingStoreConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DeploymentMeta?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeploymentMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ordering store configuration
            * Description: Retrieve configuration settings for ordering stores. Retrieve the details of the deployment stores (the selling locations where the sales channel will be utilised for placing orders).
            **/
            public func getOrderingStoreConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStoreConfig?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoreConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get staff ordering stores
            * Description: Retrieve ordering stores accessible to staff members. Retrieve the details of all stores access given to the staff member (the selling locations where the sales channel will be utilized for placing orders).
            **/
            public func getStaffOrderingStores(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderingStoresResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/staff-stores",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ordering store signed cookie
            * Description: Use this API to get an Ordering Store signed cookie upon selecting an ordering store. This will be used by the cart service to verify a coupon against the selected ordering store in cart.
            **/
            public func getOrderingStoreCookie(
                body: OrderingStoreSelectRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete Ordering Store signed cookie
            * Description: Use this API to unset the Ordering Store cookie upon changing the sales channel, by its domain URL, in the Universal Fynd Store app.
            **/
            public func removeOrderingStoreCookie(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List  domains
            * Description: Retrieve a list of existing domains by its sales channel id.
            **/
            public func getDomains(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create domain
            * Description: Creates a domain for an sales channel. Note - Only 15 domains can be added to the sales channel
            **/
            public func addDomain(
                body: DomainAddRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Domain?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Domain.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove domain
            * Description: Delete a specific domain from the sales channel. Delete a domain (secondary or shortlink domain) added to a sales channel. It will disable user's access to website, shared links, and other features associated with this domain.
            **/
            public func removeDomainById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update domain
            * Description: Modify the type of a specific domain. Primary domain is used as the URL of your website. Short link domain is comparatively smaller and used while generating short links.
            **/
            public func changeDomainType(
                body: UpdateDomainTypeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/set-domain",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get domain status
            * Description: Retrieve the status of a specific domain. Shows if the A records and TXT records of the domain correctly points to appropriate IP on Fynd Servers.
            **/
            public func getDomainStatus(
                body: DomainStatusRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DomainStatusResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/domain-status",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainStatusResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get sales channel by id
            * Description: Retrieve detailed information about a specific sales channel. Use sales channel ID to get the current sales channel details which includes channel name, description, banner, logo, favicon, domain details, token, etc.
            **/
            public func getApplicationById(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationById?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
        }
        
        
            
        public class Content {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List announcements
            * Description: Lists all announcements
            **/
            public func getAnnouncementsList(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetAnnouncementListSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAnnouncementListSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create announcement
            * Description: Generate and add a new announcement.
            **/
            public func createAnnouncement(
                body: AdminAnnouncementSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get announcement
            * Description: Get detailed information about a specific announcement
            **/
            public func getAnnouncementById(
                announcementId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AdminAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AdminAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update announcement
            * Description: Modify the content and settings of a specific announcement.
            **/
            public func updateAnnouncement(
                announcementId: String,
                body: AdminAnnouncementSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update announcement schedule
            * Description: Modify the scheduling of a specific announcement.
            **/
            public func updateAnnouncementSchedule(
                announcementId: String,
                body: ScheduleSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete an announcement
            * Description: Remove a specific announcement.
            **/
            public func deleteAnnouncement(
                announcementId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create blog
            * Description: Generate and add a new blog.
            **/
            public func createBlog(
                body: BlogRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List blogs
            * Description: List all blogs
            **/
            public func getBlogs(
                pageNo: Int?,
                pageSize: Int?,
                tags: String?,
                q: String?,
                slug: String?,
                title: String?,
                status: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = tags {
                    xQuery["tags"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a blog
            * Description: Modify the content and settings of a specific blog.
            **/
            public func updateBlog(
                id: String,
                body: BlogRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a blog
            * Description: Remove a specific blog.
            **/
            public func deleteBlog(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create data loader
            * Description: Create and add a new data loader.
            **/
            public func addDataLoader(
                body: DataLoaderSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List data loaders
            * Description: List all Dataloaders
            **/
            public func getDataLoaders(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoadersSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoadersSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a data loader
            * Description: Remove a specific data loader.
            **/
            public func deleteDataLoader(
                dataLoaderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(dataLoaderId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a data loader
            * Description: Modify the settings of a specific data loader.
            **/
            public func editDataLoader(
                dataLoaderId: String,
                body: DataLoaderSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(dataLoaderId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List all data loaders
            * Description: Use this to get all data loaders of an application by service name
            **/
            public func getDataLoadersByService(
                serviceName: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/service/\(serviceName)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Select a data loader
            * Description: Choose and set a data loader for use.
            **/
            public func selectDataLoader(
                dataLoaderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(dataLoaderId)/select",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Reset a data loader
            * Description: Clear and reset data loader settings.
            **/
            public func resetDataLoader(
                service: String,
                operationId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DataLoaderResetResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/\(service)/\(operationId)/reset",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResetResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List FAQ Categories
            * Description: List all FAQ Categories
            **/
            public func getFaqCategories(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetFaqCategoriesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/categories",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoriesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get FAQ category
            * Description: Get detailed information about a specific FAQ category
            **/
            public func getFaqCategoryBySlugOrId(
                idOrSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetFaqCategoryBySlugSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoryBySlugSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create FAQ Category
            * Description: Generate and add a new FAQ category.
            **/
            public func createFaqCategory(
                body: CreateFaqCategoryRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update FAQ category
            * Description: Modify the content and settings of a specific FAQ category.
            **/
            public func updateFaqCategory(
                id: String,
                body: UpdateFaqCategoryRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete FAQ category
            * Description: Remove a specific FAQ category.
            **/
            public func deleteFaqCategory(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: FaqSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FaqSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List FAQs
            * Description: Retrieve a list of FAQs within a specific category.
            **/
            public func getFaqsByCategoryIdOrSlug(
                idOrSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetFaqSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)/faqs",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create FAQ
            * Description: Create and add a new FAQ.
            **/
            public func addFaq(
                categoryId: String,
                body: CreateFaqSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update FAQ
            * Description: Modify the content and settings of a specific FAQ.
            **/
            public func updateFaq(
                categoryId: String,
                faqId: String,
                body: CreateFaqSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete FAQ
            * Description: Remove a specific FAQ.
            **/
            public func deleteFaq(
                categoryId: String,
                faqId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get FAQ or slug
            * Description: Get detailed information about a specific FAQ
            **/
            public func getFaqByIdOrSlug(
                idOrSlug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Generate SEO title
            * Description: Create an SEO-friendly title for content.
            **/
            public func generateSEOTitle(
                type: GenerationEntityType,
                body: GenerateSEOContent,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GeneratedSEOContent?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/generate-seo/\(type)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeneratedSEOContent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get landing pages
            * Description: Lists a list landing pages as per device types
            **/
            public func getLandingPages(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create landing page
            * Description: Generate and add a new landing page.
            **/
            public func createLandingPage(
                body: LandingPageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update landing page
            * Description: Modify the content and settings of a specific landing page.
            **/
            public func updateLandingPage(
                id: String,
                body: LandingPageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete landing page
            * Description: Remove a specific landing page.
            **/
            public func deleteLandingPage(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Legal Pages
            * Description: Get legal information and terms
            **/
            public func getLegalInformation(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Legal Pages
            * Description: Modify legal information and terms.
            **/
            public func updateLegalInformation(
                body: ApplicationLegal,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get navigation items
            * Description: Retrieve a list of navigational elements.
            **/
            public func getNavigations(
                devicePlatform: String,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["device_platform"] = devicePlatform
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create navigation items
            * Description: Generate and add a new navigation element.
            **/
            public func createNavigation(
                body: NavigationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default navigations
            * Description: Retrieve default navigation elements.
            **/
            public func getDefaultNavigations(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DefaultNavigationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/default",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultNavigationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get navigation by slug
            * Description: Retrieve detailed information about a specific navigation element.
            **/
            public func getNavigationBySlug(
                slug: String,
                devicePlatform: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["device_platform"] = devicePlatform
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(slug)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update navigation
            * Description: Modify the content and settings of a specific navigation element.
            **/
            public func updateNavigation(
                id: String,
                body: NavigationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete navigation
            * Description: Remove a specific navigation element.
            **/
            public func deleteNavigation(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get page meta
            * Description: Use this API to Get metadata for a specific page.
            **/
            public func getPageMeta(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageMetaSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/meta",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageMetaSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get page specification
            * Description: Use this API to Get specifications and details for a specific page
            **/
            public func getPageSpec(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSpec?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/spec",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSpec.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create page preview
            * Description: Generate and add a new page preview.
            **/
            public func createPagePreview(
                body: PageRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/preview/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update page preview
            * Description: Modify the content and settings of a specific page preview.
            **/
            public func updatePagePreview(
                slug: String,
                body: PagePublishRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/publish/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete page
            * Description: Remove a page from the platform.
            **/
            public func deletePage(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create path redirection rules
            * Description: Create and add rules for path redirection.
            **/
            public func addPathRedirectionRules(
                body: PathMappingSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List Path Redirection Rules
            * Description: Use this API to List Path Redirection Rules
            **/
            public func getPathRedirectionRules(
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Path Redirection Rule
            * Description: Use this API to Get detailed information about a specific path redirection rule
            **/
            public func getPathRedirectionRule(
                pathId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update path redirection rule
            * Description: Modify settings for path redirection rules.
            **/
            public func updatePathRedirectionRules(
                pathId: String,
                body: PathMappingSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings/\(pathId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete path redirection rule
            * Description: Remove specific path redirection rules.
            **/
            public func deletePathRedirectionRules(
                pathId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel SEO
            * Description: Retrieve configuration settings for SEO.
            **/
            public func getSEOConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SeoComponent?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update sales channel SEO information
            * Description: Modify configuration settings for SEO.
            **/
            public func updateSEOConfiguration(
                body: SeoComponent,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SeoSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List default SEO Markup Schemas
            * Description: Use this API to List default SEO Markup Schemas
            **/
            public func getDefaultSEOMarkupSchema(
                pageType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DefaultSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageType {
                    xQuery["page_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/default",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List default SEO Markup Schemas
            * Description: Use this API to List default SEO Markup Schemas
            **/
            public func getSEOMarkupSchemas(
                title: String?,
                active: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SeoSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                if let value = active {
                    xQuery["active"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create SEO Markup Schema
            * Description: Use this API to Create SEO Markup Schema
            **/
            public func createSEOMarkupSchema(
                body: SEOSchemaMarkupTemplateRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SEO Markup Schema
            * Description: Use this API to Get SEO Markup Schema
            **/
            public func getSEOMarkupSchema(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get SEO Markup Schema
            * Description: Use this API to Get SEO Markup Schema
            **/
            public func editSEOMarkupSchema(
                id: String,
                body: SEOSchemaMarkupTemplateRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete SEO Markup Schema
            * Description: Use this API to Delete SEO Markup Schema
            **/
            public func deleteSEOMarkupSchema(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List Slideshows
            * Description: Use this API to list all Slideshows
            **/
            public func getSlideshows(
                devicePlatform: String,
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SlideshowGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["device_platform"] = devicePlatform
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getSlideshows
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getSlideshowsPaginator(
                devicePlatform: String,
                pageSize: Int?,
                headers: [(key: String, value: String)]? = nil
                ) -> Paginator<SlideshowGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<SlideshowGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getSlideshows(
                        devicePlatform: devicePlatform,
                        pageNo: paginator.pageNo,
                        pageSize: paginator.pageSize,
                        
                        headers: headers
                    ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create a slideshow
            * Description: Use this API to create a slideshow.
            **/
            public func createSlideshow(
                body: SlideshowRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Slideshow
            * Description: Use this API to get the details of a slideshow by its slug.
            **/
            public func getSlideshowBySlug(
                slug: String,
                devicePlatform: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["device_platform"] = devicePlatform
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows/\(slug)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a slideshow
            * Description: Use this API to Update Slideshow
            **/
            public func updateSlideshow(
                id: String,
                body: SlideshowRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a slideshow
            * Description: Use this API to delete an existing slideshow.
            **/
            public func deleteSlideshow(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SlideshowSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/slideshows/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SlideshowSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get support information
            * Description: Retrieve information related to customer support.
            **/
            public func getSupportInformation(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Customer Support Information
            * Description: Modify information related to customer support.
            **/
            public func updateSupportInformation(
                body: Support,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update HTML tag
            * Description: Modify settings for an injectable tag.
            **/
            public func updateInjectableTag(
                body: CreateTagRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get all HTML tags
            * Description: Retrieve a list of injectable tags.
            **/
            public func getInjectableTags(
                all: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = all {
                    xQuery["all"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create HTML tag
            * Description: Create and add a new injectable tag.
            **/
            public func addInjectableTag(
                body: CreateTagRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/add",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove HTML tag
            * Description: Delete a specific injectable tag.
            **/
            public func removeInjectableTag(
                body: RemoveHandpickedSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagDeleteSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/remove/handpicked",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagDeleteSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update HTML tag
            * Description: Modify settings for an injectable tag.
            **/
            public func editInjectableTag(
                tagId: String,
                body: UpdateHandpickedSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/edit/handpicked/\(tagId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get blog by slug
            * Description: Retrieve detailed information about a specific blog using its slug.
            **/
            public func getBlogBySlug(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create page
            * Description: Generate and add a new page to the platform.
            **/
            public func createPage(
                body: PageRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get pages
            * Description: Retrieve a list of available pages.
            **/
            public func getPages(
                pageNo: Int?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageGetResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update page
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                id: String,
                body: PageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get page by slug
            * Description: Get detailed information about a specific page using its slug.
            **/
            public func getPageBySlug(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get custom field types
            * Description: Each custom field and custom field definition has a type, which defines the type of information that it can store. The custom field types have built-in validation. This api will give list of supported custom fields types
            **/
            public func getAppCustomFieldTypes(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/types",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get resources
            * Description: Each custom fields is assosiated with a resource such as product, promotion, coupon, selling location etc, This will gives list of supported resource list.
            **/
            public func getAppResources(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ResourcesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/resources",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResourcesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom fields definitions
            * Description: Custom field definitions enable you to include data validation for custom fields, and enable sellers to add custom fields values for resources. With the help of this seller can retrive list of custom field definitions list.
            **/
            public func getAppCustomFieldDefinitions(
                pageNo: String,
                pageSize: String,
                resource: String?,
                type: String?,
                search: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page_no"] = pageNo
                xQuery["page_size"] = pageSize
                
                if let value = resource {
                    xQuery["resource"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom field definition
            * Description: You can create custom fields definition to any resource so you can extend property of resource.
            **/
            public func createAppCustomFieldDefinition(
                body: CustomFieldDefinitionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom fields definition
            * Description: Custom field definitions can be fetch using definition id.
            **/
            public func getAppCustomFieldDefinition(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom field definition
            * Description: Custom fields definition can be update using this api, You can update custom field definition name and description.
            **/
            public func updateAppCustomFieldDefinition(
                definitionId: String,
                body: CustomFieldDefinitionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(definitionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete custom fields definition
            * Description: Custom field definition and its assosiated custom fields value can be deleted using this api on the basis of definition id.
            **/
            public func deleteAppCustomFieldDefinition(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of custom fields of gives resource
            * Description: Retrieves a list of custom fields attached to a particular resource by using the resource.
            **/
            public func getAppCustomFields(
                resource: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of custom fields of given resource and resource id
            * Description: Retrieves a list of custom fields attached to a particular resource by using the resource and resource id.
            **/
            public func getAppCustomFieldsByResourceId(
                resource: String,
                resourceId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom field entries for gives resource and resource_id
            * Description: You can add a custom field using this endpoint to any resource by providing the resource ID.
            **/
            public func createAppCustomFieldByResourceId(
                resource: String,
                resourceId: String,
                body: CustomFieldRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom object definition
            * Description: Create a custom object that will have a collection of custom fields and can be used anywhere in the custom field for any resource.
            **/
            public func createAppCustomObjectDefinition(
                body: CustomObjectDefinitionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom object definitions
            * Description: Custom object definition lists can be obtained using this endpoint.
            **/
            public func getAppCustomObjectDefinitions(
                pageNo: String,
                pageSize: String,
                search: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page_no"] = pageNo
                xQuery["page_size"] = pageSize
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom object definition
            * Description: Custom object definitions can be fetched using their definition ID.
            **/
            public func getAppCustomObjectDefinition(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom object definition
            * Description: Custom object definitions can be updated using this endpoint. You can update the name and description of the custom object and add more custom field definitions to the existing custom object.
            **/
            public func updateAppCustomObjectDefinition(
                definitionId: String,
                body: CustomObjectDefinitionUpdateRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(definitionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete custom object definition
            * Description: Custom object definitions can be deleted using this endpoint by providing the definition ID.
            **/
            public func deleteAppCustomObjectDefinition(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectDefinitionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(definitionId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get list of custom objects
            * Description: Custom object entries can fetch using this endpoint.
            **/
            public func getAppCustomObjects(
                definitionId: String?,
                pageNo: String,
                pageSize: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = definitionId {
                    xQuery["definition_id"] = value
                }
                xQuery["page_no"] = pageNo
                xQuery["page_size"] = pageSize
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom object entries
            * Description: Custom object entries against the custom object definition can be added using this API.
            **/
            public func createAppCustomObject(
                body: CustomObjectRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom object details
            * Description: Details of custom objects, their field details, definitions, and references can be obtained using this endpoint.
            **/
            public func getAppCustomObject(
                metaobjectId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(metaobjectId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete custom object
            * Description: Custom object entries can be deleted by providing the delete ID using this endpoint.
            **/
            public func deleteAppCustomObject(
                metaobjectId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(metaobjectId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom object details
            * Description: Custom object entries can be updated using this endpoint.
            **/
            public func updateAppCustomObject(
                metaobjectId: String,
                body: CustomObjectRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(metaobjectId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get bulk import and export job list
            * Description: Custom object bulk import and export jobs status and details can be obtained using this endpoint.
            **/
            public func getAppJobs(
                page: String,
                pageSize: String,
                actionType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectBulkEntry?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page"] = page
                xQuery["page_size"] = pageSize
                xQuery["action_type"] = actionType
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/jobs",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntry.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Bulk custom object entries upload
            * Description: Custom object bulk import of bulk entries can be performed using this endpoint.
            **/
            public func importAppCustomObjectEntries(
                definitionId: String,
                body: CustomObjectBulkSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectEntryBulkUploadResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/upload",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectEntryBulkUploadResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Initiate download for bulk custom object entries
            * Description: Custom object bulk export of bulk entries can be perform using this endpoint.
            **/
            public func exportAppCustomObjectEntries(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomObjectBulkEntryInitiateDownload?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/download",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntryInitiateDownload.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Download sample for custom object bulk entry
            * Description: Sample files for custom object bulk import can be obtained from this endpoint.
            **/
            public func sampleAppCustomObjectBulkEntry(
                definitionId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: String?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/sample",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = String(decoding: data, as: UTF8.self)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class FileStorage {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Initiates file upload for Application
            * Description: Inititates the process of uploading a file to storage location, and returns a storage link in response on platofrm at application level. Please refer group description for more details.
            **/
            public func appStartUpload(
                namespace: String,
                body: StartRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StartResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/start",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Complete file upload for Application
            * Description: Complete the file upload and store the file details such as name, size, content type, and namespace to maintain integrity within the system's database on platform at application level
            **/
            public func appCompleteUpload(
                namespace: String,
                body: StartResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CompleteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/complete",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Copy files for Application
            * Description: Handle multiple file uploads, updating progress and providing detailed status reports.
            **/
            public func appCopyFiles(
                sync: Bool?,
                body: CopyFiles,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = sync {
                    xQuery["sync"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/uploads/copy",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Browse files for Application
            * Description: View and navigate through available files.
            **/
            public func appbrowse(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = page {
                    xQuery["page"] = value
                }
                
                if let value = limit {
                    xQuery["limit"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Browse files for Application
            * Description: View and navigate through available files.
            **/
            public func browsefiles(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                body: ExtensionSlug,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = page {
                    xQuery["page"] = value
                }
                
                if let value = limit {
                    xQuery["limit"] = value
                }
                
                if let value = search {
                    xQuery["search"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Get PDF types
            * Description: Retrieve a list of available invoice types.
            **/
            public func getPdfTypes(
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: InvoiceTypesResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InvoiceTypesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default PDF data
            * Description: Retrieve default pdf payload data for invoice generation.
            **/
            public func getDefaultPdfData(
                pdfTypeId: Int,
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: DummyTemplateDataItems?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["pdf_type_id"] = pdfTypeId
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyTemplateDataItems.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update HTML Template
            * Description: Update the HTML Template.
            **/
            public func updateHtmlTemplate(
                id: String,
                body: PdfConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get html template for Application
            * Description: 
Get the saved html template for provided sales channel

            **/
            public func getDefaultHtmlTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfConfigSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["pdf_type_id"] = pdfTypeId
                xQuery["format"] = format
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save PDF template
            * Description: Save html template for provided sales channel
            **/
            public func saveHtmlTemplate(
                body: PdfConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get default PDF template
            * Description: Retrieve to get the default Invoice template.
            **/
            public func getDefaultPdfTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PdfDefaultTemplateSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["pdf_type_id"] = pdfTypeId
                xQuery["format"] = format
                
                if let value = countryCode {
                    xQuery["country_code"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/default-template",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfDefaultTemplateSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Generate payment receipt
            * Description: Generate Payment Receipt for Jiomart Digital
            **/
            public func generatePaymentReceipt(
                body: PaymentReceiptRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/payment-receipt",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Lead {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: List sales channel tickets 
            * Description: Gets the list of Application level Tickets and/or ticket filters
            **/
            public func getNewTickets(
                items: Bool?,
                filters: Bool?,
                q: String?,
                status: String?,
                priority: PriorityEnum?,
                category: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TicketList?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = items {
                    xQuery["items"] = value
                }
                
                if let value = filters {
                    xQuery["filters"] = value
                }
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                if let value = priority {
                    xQuery["priority"] = value.rawValue
                }
                
                if let value = category {
                    xQuery["category"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Ticket Details
            * Description: Get ticket details of a application level ticket with ticket ID
            **/
            public func getNewTicket(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Ticket Details
            * Description: Edits ticket details of a application level ticket such as status, priority, category, tags, attachments, assigne & ticket content changes
            **/
            public func editNewTicket(
                id: String,
                body: EditTicketPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Create ticket history interaction
            * Description: Create history for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func createNewHistory(
                id: String,
                body: TicketHistoryPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TicketHistory?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get ticket history interaction
            * Description: Gets history list for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func getNewTicketHistory(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: TicketHistoryList?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistoryList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom form
            * Description: Get information about a custom form which includes corresponding field details and any validation regex required against that field or not
            **/
            public func getCustomForm(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update custom form
            * Description: Modify the content and associated settings of a custom form.
            **/
            public func editCustomForm(
                slug: String,
                body: EditCustomFormPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a custom form
            * Description: Delete a custom form using it's slug
            **/
            public func deleteCustomForm(
                slug: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get custom forms
            * Description: List all available custom forms
            **/
            public func getCustomForms(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomFormList?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFormList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create custom form
            * Description: Create a new custom form for application users to fill
            **/
            public func createCustomForm(
                body: CreateCustomFormPayload,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
        }
        
        
            
        public class Serviceability {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update pincode COD support
            * Description: Modify and update views related to pincode MOP (Mode of Payment).
            **/
            public func updatePincodeMopView(
                body: PincodeMopData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeMOPresponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-update",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMOPresponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Bulk update pincode COD support 
            * Description: Updates the cash on delivery settings for multiple specified pin codes simultaneously.
            **/
            public func updatePincodeBulkView(
                body: PincodeMopBulkData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeBulkViewResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-bulk-update",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeBulkViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get COD enabled pincodes
            * Description: Retrieves a list of pincodes along with the count based on whether cash on delivery settings.
            **/
            public func updatePincodeCoDListing(
                body: PincodeCodStatusListingRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeCodStatusListingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-data",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeCodStatusListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get audit trail
            * Description: Retrieves the history of changes made to cash on delivery settings for pincodes.
            **/
            public func updatePincodeAuditHistory(
                body: PincodeMopUpdateAuditHistoryRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PincodeMopUpdateAuditHistoryResponseData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMopUpdateAuditHistoryResponseData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update courier rule
            * Description: Updates an existing rule within the delivery configuration.
            **/
            public func updateCourierRule(
                ruleId: String,
                body: CourierPartnerRule,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/\(ruleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get courier rule
            * Description: Retrieves a single rule within the delivery configuration.
            **/
            public func getCourierPartnerRule(
                ruleId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create rourier rule
            * Description: Creates a rule within the delivery configuration.
            **/
            public func createCourierPartnerRule(
                body: CourierPartnerRule,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRuleResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get courier rules
            * Description: Retrieve a list of rules within the delivery configuration.
            **/
            public func getCourierPartnerRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CourierPartnerRulesListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRulesListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update delivery configuration
            * Description: Updates an existing delivery setup for an application, which involves updating sorting settings or rule priorities.
            **/
            public func updateApplicationConfiguration(
                body: ApplicationConfig,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationConfig?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get delivery configuration
            * Description: Retrieves information about the delivery setup for an application
            **/
            public func getApplicationConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationConfig?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update self ship configuration
            * Description: Updates self ship setup for an existing application
            **/
            public func patchApplicationServiceabilitySelfShipment(
                body: SelfShipResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationSelfShipConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/selfship",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationSelfShipConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get self ship configuration
            * Description: Retrieves the self ship setup for a single application
            **/
            public func getApplicationServiceabilitySelfShipment(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ApplicationSelfShipConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/selfship",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationSelfShipConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rule configuration
            * Description: Retrieves information about the order routing setup for a single application
            **/
            public func getApplicationConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create store rule configuration
            * Description: Creates a order routing setup for an application, which involves updating sorting settings or rule priorities.
            **/
            public func insertApplicationConfig(
                body: StoreRuleConfigData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update store rules configuration
            * Description: Updates an existing order routing setup for a single application, which involves updating sorting settings or rule priorities.
            **/
            public func updateStoreRulesConfig(
                body: StoreRuleConfigData,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rules
            * Description: Retrieves an existing order routing setup for a single application
            **/
            public func getStoreRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetStoreRulesApiResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStoreRulesApiResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create store rule
            * Description: Create a rule within the order routing rules
            **/
            public func createStoreRules(
                body: CreateStoreRuleRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get store rule
            * Description: Retrieves a single rule within the order routing rules
            **/
            public func getStoreRule(
                ruleUid: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleDataSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleDataSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update store rule
            * Description: Updates an existing rule within the order routing rules.
            **/
            public func updateStoreRules(
                ruleUid: String,
                body: CreateStoreRuleRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: StoreRuleUpdateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleUpdateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update courier partner rule priority
            * Description: Updates a courier partner rule priority for a single application
            **/
            public func updateCourierPartnerRulePriority(
                body: RulePriorityRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RulePriorityResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/priority",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RulePriorityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
        }
        
        
            
        public class Order {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: List bag cancellation reasons
            * Description: Get reasons to perform full or partial cancellation of a shipment
            **/
            public func getShipmentBagReasons(
                shipmentId: String,
                lineNumber: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentBagReasons?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/line_number/\(lineNumber)/reasons",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentBagReasons.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: List sales channel shipments
            * Description: Get shipments of a particular sales channel based on the filters provided
            **/
            public func getApplicationShipments(
                lane: String?,
                searchType: String?,
                searchId: String?,
                fromDate: String?,
                toDate: String?,
                dpIds: String?,
                orderingCompanyId: String?,
                stores: String?,
                salesChannel: String?,
                requestByExt: String?,
                pageNo: Int?,
                pageSize: Int?,
                customerId: String?,
                isPrioritySort: Bool?,
                excludeLockedShipments: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentInternalPlatformViewResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = lane {
                    xQuery["lane"] = value
                }
                
                if let value = searchType {
                    xQuery["search_type"] = value
                }
                
                if let value = searchId {
                    xQuery["search_id"] = value
                }
                
                if let value = fromDate {
                    xQuery["from_date"] = value
                }
                
                if let value = toDate {
                    xQuery["to_date"] = value
                }
                
                if let value = dpIds {
                    xQuery["dp_ids"] = value
                }
                
                if let value = orderingCompanyId {
                    xQuery["ordering_company_id"] = value
                }
                
                if let value = stores {
                    xQuery["stores"] = value
                }
                
                if let value = salesChannel {
                    xQuery["sales_channel"] = value
                }
                
                if let value = requestByExt {
                    xQuery["request_by_ext"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = customerId {
                    xQuery["customer_id"] = value
                }
                
                if let value = isPrioritySort {
                    xQuery["is_priority_sort"] = value
                }
                
                if let value = excludeLockedShipments {
                    xQuery["exclude_locked_shipments"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/shipments/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentInternalPlatformViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Track shipment
            * Description: Track shipment by shipment Id for an application
            **/
            public func trackShipmentPlatform(
                shipmentId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformShipmentTrack?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/track",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformShipmentTrack.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: List shipment cancellation reasons
            * Description: Get reasons to perform full or partial cancellation of a shipment
            **/
            public func getPlatformShipmentReasons(
                action: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShipmentReasonsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/reasons/\(action)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentReasonsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
        }
        
        
            
        public class Partner {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create extension proxy
            * Description: Extension proxy can be used to call extension API from storefront and make extension API integration seamless.
            **/
            public func addProxyPath(
                extensionId: String,
                body: AddProxyReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AddProxyResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Remove extension proxy
            * Description: Remove the proxy which are created earlier for the extension.
            **/
            public func removeProxyPath(
                extensionId: String,
                attachedPath: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RemoveProxyResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)/\(attachedPath)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RemoveProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Payment {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get secrets for brand payment gateway
            * Description: Retrieve configuration settings like key, secret, webhook url, merchant salt for brand payment gateways.
            **/
            public func getBrandPaymentGatewayConfig(
                aggregator: String,
                configType: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentGatewayConfigResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["aggregator"] = aggregator
                
                if let value = configType {
                    xQuery["config_type"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Save brand payment gateway config
            * Description: Store and update configuration settings for brand payment gateways i.e required for payment for a payment gateway like key, secret, merchant salt.
            **/
            public func saveBrandPaymentGatewayConfig(
                body: PaymentGatewayConfigRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentGatewayToBeReviewed?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayToBeReviewed.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment modes
            * Description: Get available payment methods on the payment page, specifying the aggregator for each option, such as 'Netbanking powered by Juspay' and 'Card powered by Razorpay'.
            **/
            public func getPaymentModeRoutes(
                refresh: Bool?,
                requestType: String?,
                orderId: String?,
                shipmentId: String?,
                amount: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentOptionsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = refresh {
                    xQuery["refresh"] = value
                }
                
                if let value = requestType {
                    xQuery["request_type"] = value
                }
                
                if let value = orderId {
                    xQuery["order_id"] = value
                }
                
                if let value = shipmentId {
                    xQuery["shipment_id"] = value
                }
                
                if let value = amount {
                    xQuery["amount"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOptionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get bank account details
            * Description: Retrieve bank account information 
            **/
            public func getBankAccountDetailsOpenAPI(
                orderId: String,
                requestHash: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["order_id"] = orderId
                
                if let value = requestHash {
                    xQuery["request_hash"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create refund account
            * Description: The addition of a bank account specifically for refunds, employing OTP verification for security
            **/
            public func addRefundBankAccountUsingOTP(
                body: AddBeneficiaryDetailsOTPRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            /**
            *
            * Summary: Get user order beneficiaries
            * Description: Retrieve beneficiary details like bank name , ifsc code , branch name associated with a specific order for refund processing 
            **/
            public func getUserOrderBeneficiaries(
                orderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["order_id"] = orderId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/order",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get user beneficiaries
            * Description: Retrieves information about beneficiaries associated with the user for processing refunds, based on the provided order ID
            **/
            public func getUserBeneficiaries(
                orderId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["order_id"] = orderId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/user",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Payment confirmation
            * Description: Authentication and confirmation of a payment.It requires details such as the order ID and payment methods in the request body to authenticate and confirm the payment.
            **/
            public func confirmPayment(
                body: PaymentConfirmationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentConfirmationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentConfirmationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get user COD 
            * Description: Retrieve user cod limt data of user i.e cod is active or not for user and remaining limit 
            **/
            public func getUserCODlimitRoutes(
                merchantUserId: String,
                mobileNo: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetUserCODLimitResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["merchant_user_id"] = merchantUserId
                xQuery["mobile_no"] = mobileNo
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetUserCODLimitResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Set user COD
            * Description: This allows access to seller to enable disable cod of specific user
            **/
            public func setUserCODlimitRoutes(
                body: SetCODForUserRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SetCODOptionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetCODOptionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: EDC aggregators and model list
            * Description: Retrieve a list of EDC (Electronic Data Capture) aggregators and models.
            **/
            public func edcAggregatorsAndModelList(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcAggregatorAndModelListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-aggregator-list",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcAggregatorAndModelListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: EDC device stats
            * Description: Information about EDC (Electronic Data Capture) devices linked to a specific application within a company. It provides statistics such as the count of active and inactive devices.
            **/
            public func edcDeviceStats(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceStatsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-stats",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceStatsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update EDC device
            * Description: Enables the modification of settings and details associated with an Electronic Data Capture (EDC) device linked to a specific application within a company. Upon success, it returns the updated information of the EDC device.
            **/
            public func updateEdcDevice(
                body: EdcAddRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceAddResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceAddResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get an EDC device
            * Description: Retrieve comprehensive details regarding an Electronic Data Capture (EDC) device associated with a particular terminal unique identifier within a company's application.Upon success, it returns the detailed information of the EDC device, including terminal serial number, EDC device serial number, merchant store POS code, store ID, aggregator ID and name, device tag, activation status, and EDC model.
            **/
            public func getEdcDevice(
                terminalUniqueIdentifier: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create an EDC device
            * Description: Registration and addition of a new EDC device to the system
            **/
            public func addEdcDevice(
                terminalUniqueIdentifier: String,
                body: EdcUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List EDC devices
            * Description: Retrieves a list of available Electronic Data Capture (EDC) devices.
            **/
            public func edcDeviceList(
                pageNo: Int?,
                pageSize: Int?,
                isActive: Bool?,
                storeId: Int?,
                deviceTag: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: EdcDeviceListResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = isActive {
                    xQuery["is_active"] = value
                }
                
                if let value = storeId {
                    xQuery["store_id"] = value
                }
                
                if let value = deviceTag {
                    xQuery["device_tag"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-list",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List POS payment modes
            * Description: Available payment methods on the payment page for POS, specifying the aggregator for each option, such as 'CARD powered by Juspay' and 'QR powered by Razorpay'.
            **/
            public func getPosPaymentModeRoutes(
                amount: Int,
                cartId: String?,
                pincode: String,
                checkoutMode: String?,
                refresh: Bool?,
                orderId: String?,
                cardReference: String?,
                orderType: String,
                userDetails: String?,
                displaySplit: Bool?,
                advancePayment: Bool?,
                shipmentId: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentModeRouteResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["amount"] = amount
                
                if let value = cartId {
                    xQuery["cart_id"] = value
                }
                xQuery["pincode"] = pincode
                
                if let value = checkoutMode {
                    xQuery["checkout_mode"] = value
                }
                
                if let value = refresh {
                    xQuery["refresh"] = value
                }
                
                if let value = orderId {
                    xQuery["order_id"] = value
                }
                
                if let value = cardReference {
                    xQuery["card_reference"] = value
                }
                xQuery["order_type"] = orderType
                
                if let value = userDetails {
                    xQuery["user_details"] = value
                }
                
                if let value = displaySplit {
                    xQuery["display_split"] = value
                }
                
                if let value = advancePayment {
                    xQuery["advance_payment"] = value
                }
                
                if let value = shipmentId {
                    xQuery["shipment_id"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/pos",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentModeRouteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Start payment process
            * Description: Initiates the payment procedure for an order.Upon successful initiation, it returns a  details including the success status, aggregator information, payment method, status, merchant order ID aggregator order , polling URL, timeout, virtual ID, Razorpay payment ID, customer ID, and device ID.
            **/
            public func initialisePayment(
                body: PaymentInitializationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentInitializationResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/request",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentInitializationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Poll and update payment status
            * Description: Polling process to confirm the payment status. It periodically checks and updates the current status of a payment, ensuring timely and accurate confirmation of payment transactions.
            **/
            public func checkAndUpdatePaymentStatus(
                body: PaymentStatusUpdateRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentStatusUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm/polling",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Resend or cancel payment
            * Description: Enable you to perform actions related to the resending and cancellation of payment links through SMS or EMAIL. resend or cancel payment link that have been initiated but may require modification or cancellation for various reasons, ensuring flexibility and control in payment processing.
            **/
            public func resendOrCancelPayment(
                body: ResendOrCancelPaymentRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ResendOrCancelPaymentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/cancel",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendOrCancelPaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Retrieve status of multiple payments in bulk
            * Description: Retrieve status of multiple payments in bulk and returns the status of each payment along with associated details such as payment ID, amount, currency, status, payment mode, and payment gateway in the response
            **/
            public func paymentStatusBulk(
                body: PaymentStatusBulkHandlerRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentStatusBulkHandlerResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/payment-status-bulk/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusBulkHandlerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get OAuth URL
            * Description: This has been used when merchant is setup their razorpay payment gateway, they will redirect to razorpay site after submitting all their secrets for authetication.
            **/
            public func oauthGetUrl(
                aggregator: String,
                successRedirectUrl: String?,
                failureRedirectUrl: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetOauthUrlResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = successRedirectUrl {
                    xQuery["success_redirect_url"] = value
                }
                
                if let value = failureRedirectUrl {
                    xQuery["failure_redirect_url"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/onboard/\(aggregator)/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetOauthUrlResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Revoke OAuth token
            * Description: Revoke the creds  for payment aggregator razropay.
            **/
            public func revokeOauthToken(
                aggregator: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RevokeOAuthToken?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/revoke/\(aggregator)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RevokeOAuthToken.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Repayment details for BNPL
            * Description: Retrieve repayment details for Buy Now Pay Later (BNPL) payment
            **/
            public func repaymentDetails(
                body: RepaymentDetailsSerialiserPayAll,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RepaymentResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/repayment-details",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RepaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Merchant onboarding for BNPL
            * Description: Initiate the merchant onboarding process for Buy Now Pay Later (BNPL).
            **/
            public func merchantOnBoarding(
                body: MerchantOnBoardingRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: MerchantOnBoardingResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/merchant-onboarding",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchantOnBoardingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Validate customer for paylater
            * Description: Verify whether the user is eligible for pay-later payment from the payment aggregator's side using the customer's phone number
            **/
            public func verifyCustomerForPayment(
                body: ValidateCustomerRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ValidateCustomerResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/customer/validation",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ValidateCustomerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment link
            * Description: Retrieve a payment link for making payments.
            **/
            public func getPaymentLink(
                paymentLinkId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["payment_link_id"] = paymentLinkId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create payment link
            * Description: Generate a payment link for accepting payments.
            **/
            public func createPaymentLink(
                body: CreatePaymentLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreatePaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Poll status of payment link
            * Description: Periodically checks the status of a payment link to monitor for any updates or changes.retrieve real-time information about the payment link's current status, such as whether it has been processed, cancelled, or expired. 
            **/
            public func pollingPaymentLink(
                paymentLinkId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PollingPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["payment_link_id"] = paymentLinkId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/polling-payment-link/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PollingPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Resend payment link
            * Description: Resends an existing payment link to the user to complete the payment.
            **/
            public func resendPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ResendPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/resend-payment-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Cancel payment link
            * Description: Deactivate and cancel a payment link.
            **/
            public func cancelPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CancelPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/cancel-payment-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CancelPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get offline/advance payment mode
            * Description: Get details of offline / advance payment mode like for cod  offline payment mode get user level cod limit, order level cod limit, cod charge.
            **/
            public func getPaymentModeControlRoutes(
                mode: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update offline payment mode
            * Description: Update offline payment mode details for the merchant like update for cod  offline payment mode get user level cod limit, order level cod limit, cod charge, enable/disable device for cod.
            **/
            public func setMerchantModeControlRoutes(
                mode: String,
                body: MerchantPaymentModeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get advance payment custom configurations 
            * Description: Merchants to fetch detailed information regarding advance payment custom configurations tailored to their specific business needs. merchants can access settings such as customer restrictions, available payment modes for both pre-order and post-order transactions
            **/
            public func getPaymentModeCustomConfig(
                mode: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update advance payment custom configurations
            * Description: Allows merchants to modify specific details of advance payment custom configurations tailored to their business requirements. By providing the company ID, application ID, and payment mode, merchants can update settings such as minimum order value, customer restrictions, and available payment modes for both pre-order and post-order transactions
            **/
            public func setPaymentModeCustomConfig(
                mode: String,
                body: PaymentCustomConfigRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment mode codes
            * Description: Enables users to retrieve options for payment codes.users can access information such as payment method names, networks, and associated codes, facilitating seamless integration and management of payment modes
            **/
            public func getPaymentCodeOption(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GetPaymentCodeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/codes",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentCodeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get payment session
            * Description: Allows users to fetch the payment session details associated with a given order ID or transaction ID
            **/
            public func getPaymentSession(
                gid: String,
                lineItem: Bool?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentSessionSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = lineItem {
                    xQuery["line-item"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentSessionSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update payment session 
            * Description: Update the details of a payment session associated with a given order ID or transaction ID.
            **/
            public func updatePaymentSession(
                gid: String,
                body: PaymentSessionRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update refund session
            * Description: Allows users to update the details of a refund session associated with a specific global identifier (GID) and request ID.
            **/
            public func updateRefundSession(
                gid: String,
                requestId: String,
                body: RefundSessionRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/\(gid)/refund/session/\(requestId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant payment option
            * Description: Retrieve available payment gateways and offline payment mode details for a merchant by providing company ID and application ID, returning a list of active payment gateways and their configurations, including online and offline options.
            **/
            public func getMerchantPaymentOption(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update payment gateways and payment mode
            * Description: Updated online/offline payment as active/inactive like disable offline payment mode will disable offline payment modes on checkout page on merchant's website
            **/
            public func patchMerchantPaymentOption(
                body: MerchnatPaymentModeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant aggregator and their payment mode
            * Description: Get available payment gateways and payment mode and it's sub payment mode details like for razorpay their active/inactive payment modes netbanking , wallet, upi are shown. 
            **/
            public func getMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["business_unit"] = businessUnit
                xQuery["device"] = device
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update merchant aggregator payment mode
            * Description: update payment gateway and it's payment mode and it's sub payment mode details like for razorpay update active/inactive payment modes.
            **/
            public func patchMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                body: PlatformPaymentModeResponse,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant aggregator payment mode
            * Description: Get payment gateway and it's payment mode and it's sub payment mode details like for razorpay update active/inactive payment modes.
            **/
            public func getPGConfigAggregators(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get merchant refund priority
            * Description: Retrieve merchant refund priority configurations, returning the status of the update and the refund sources priority with their descriptions and priorities.
            **/
            public func getMerchantRefundPriority(
                configType: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund_priority/config/\(configType)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create merchant refund priority
            * Description: Create merchant refund priority configurations, with the provided refund sources priority details, and return the status of the operation.
            **/
            public func createMerchantRefundPriority(
                configType: String,
                body: RefundPriorityRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund_priority/config/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update merchant refund priority
            * Description: Update merchant refund priority configurations, with the provided refund sources priority details, and return the status of the operation.
            **/
            public func updateMerchantRefundPriority(
                configType: String,
                body: RefundPriorityRequestSerializer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund_priority/config/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create Order
            * Description: Create an order and payment on the aggregator side
            **/
            public func createPaymentOrder(
                body: PaymentOrderRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PaymentOrderResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment-orders/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOrderResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get app version for  Aggregator
            * Description: Get app version required for Payment Mode or sub payment mode for an Aggregator.if merchant required any PG payment mode after certain version for mobile app.
            **/
            public func getMerchantAggregatorAppVersion(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                paymentModeId: Int?,
                subPaymentMode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AggregatorVersionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["business_unit"] = businessUnit
                xQuery["device"] = device
                
                if let value = paymentModeId {
                    xQuery["payment_mode_id"] = value
                }
                
                if let value = subPaymentMode {
                    xQuery["sub_payment_mode"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorVersionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update app version for Aggrgator
            * Description: Update app version required for Payment Mode or sub payment mode for an Aggregator.if merchant required any PG payment mode after certain version for mobile app.
            **/
            public func patchMerchantPaymentOptionVersion(
                aggregatorId: Int,
                body: AggregatorControlRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Rewards {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List giveaways
            * Description: Retrieve and display available giveaways.
            **/
            public func showGiveaways(
                pageId: String,
                pageSize: Int,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: GiveawayResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["page_id"] = pageId
                xQuery["page_size"] = pageSize
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GiveawayResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a giveaway
            * Description: Store and manage details of a giveaway.
            **/
            public func saveGiveAway(
                body: Giveaway,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a giveaway
            * Description: Retrieve specific giveaway details by its unique identifier.
            **/
            public func getGiveawayById(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a giveaway
            * Description: Modify and update information about a giveaway.
            **/
            public func updateGiveAway(
                id: String,
                body: Giveaway,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List offers
            * Description: Display available offers for users.
            **/
            public func showOffers(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [Offer]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([Offer].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get offer by name
            * Description: Retrieve an offer by its name.
            **/
            public func getOfferByName(
                name: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update offer by name
            * Description: Modify and manage an offer using its name.
            **/
            public func updateOfferByName(
                name: String,
                body: Offer,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update user status
            * Description: Change and update the status of a user in the rewards system.
            **/
            public func updateUserStatus(
                userId: String,
                body: AppUser,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AppUser?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppUser.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a user
            * Description: Retrieve comprehensive details about a user in the rewards program.
            **/
            public func getUserDetails(
                userId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get reward user points history
            * Description: Retrieve the history of points earned and redeemed by a user.
            **/
            public func getUserPointsHistory(
                userId: String,
                pageId: String?,
                pageSize: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: HistoryRes?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageId {
                    xQuery["page_id"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/points/history/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(HistoryRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get rewards configuration
            * Description: Retrieve the configuration settings for the rewards program.
            **/
            public func getRewardsConfiguration(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Set rewards configuration
            * Description: Configure and modify the settings for the rewards program.
            **/
            public func setRewardsConfiguration(
                body: ConfigurationRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SetConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Share {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create short link
            * Description: Generate a shortened URL link for sharing.
            **/
            public func createShortLink(
                body: ShortLinkReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get short links
            * Description: Retrieve a list of all generated short links.
            **/
            public func getShortLinks(
                pageNo: Int?,
                pageSize: Int?,
                createdBy: String?,
                active: String?,
                shortUrl: String?,
                originalUrl: String?,
                title: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkList?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = createdBy {
                    xQuery["created_by"] = value
                }
                
                if let value = active {
                    xQuery["active"] = value
                }
                
                if let value = shortUrl {
                    xQuery["short_url"] = value
                }
                
                if let value = originalUrl {
                    xQuery["original_url"] = value
                }
                
                if let value = title {
                    xQuery["title"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get short link by hash
            * Description: Retrieve a specific short link by its unique hash.
            **/
            public func getShortLinkByHash(
                hash: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/\(hash)/",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update short link
            * Description: Update details of a specific short link by its ID.
            **/
            public func updateShortLinkById(
                id: String,
                body: ShortLinkReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/\(id)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get short link click statistics
            * Description: Retrieve statistics and analytics for clicks on a short link.
            **/
            public func getShortLinkClickStats(
                surlId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ClickStatsResponse?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["surl_id"] = surlId
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link/click-stats",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ClickStatsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class Theme {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: List pages of a theme 
            * Description: Retrieve a list of all available pages.
            **/
            public func getAllPages(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create theme page
            * Description: Generate and add a new page to the selected theme of the Platform.
            **/
            public func createPage(
                themeId: String,
                body: AvailablePageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update theme pages
            * Description: Modify multiple pages simultaneously of a theme.
            **/
            public func updateMultiplePages(
                themeId: String,
                body: AllAvailablePageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get a page
            * Description: Retrieve detailed information about a specific page of a theme.
            **/
            public func getPage(
                themeId: String,
                pageValue: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update a page
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                themeId: String,
                pageValue: String,
                body: AvailablePageSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete a page
            * Description: Remove a page from a theme of the platform.
            **/
            public func deletePage(
                themeId: String,
                pageValue: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: List theme fonts 
            * Description: Retrieve a list of available fonts that can be used by themes in the platform.
            **/
            public func getFonts(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: FontsSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/fonts",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FontsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: List sales channel themes
            * Description: Retrieve all draft themes added to sales channel from theme collection.
            **/
            public func getApplicationThemes(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [ThemesSchema]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/themes",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([ThemesSchema].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get sales channel themes count
            * Description: Retrieve count of all draft themes added to sales channel from theme collection.
            **/
            public func getApplicationThemesCount(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/application_themes_count",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get theme
            * Description: Retrieve a theme by its unique identifier. Response contains theme template data and data stored in theme editor.
            **/
            public func getThemeById(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update theme
            * Description: Modify and update the content and settings of a theme.
            **/
            public func updateTheme(
                themeId: String,
                body: UpdateThemeRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete theme
            * Description: Remove a theme from theme drafts of a sales channel.
            **/
            public func deleteTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create theme in sales channel
            * Description: Include a theme in an application drafts from theme collection.
            **/
            public func addThemeToApplication(
                body: ThemeReq,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update theme name
            * Description: Modify the name of the draft theme by theme Id.
            **/
            public func updateThemeName(
                themeId: String,
                body: UpdateThemeNameRequestBody,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/name",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Apply a theme
            * Description: Change current applied theme with new draft theme.
            **/
            public func applyTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/apply",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Duplicate a theme
            * Description: Create a new copy of an existing theme by theme Id
            **/
            public func duplicateTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/duplicate",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get applied theme
            * Description: Retrieve the currently applied theme of a sales channel using application Id.
            **/
            public func getAppliedTheme(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get theme for preview
            * Description: Retrieve a theme by its unique identifier. Response contains theme template data and data stored in theme editor.
            **/
            public func getThemeForPreview(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/preview",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get theme last modified date
            * Description: Retrieve the last modification of a theme used for polling and identifing cross user changes in a theme.
            **/
            public func getThemeLastModified(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "HEAD",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/polling",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Check theme is upgradable 
            * Description: Determine if a public theme is eligible for an upgrade to a new version after any new version released in marketplace. 
            **/
            public func isUpgradable(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemeUpgradableResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgradable",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemeUpgradableResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Upgrade theme
            * Description: Update a draft theme to a new version of the marketplace.
            **/
            public func upgradeTheme(
                themeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgrade",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get extension sections
            * Description: Retrieve the list of extension sections for a given application in the specified company.
            **/
            public func getExtensionSections(
                type: String?,
                companyMode: String?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [GetExtensionSectionRes]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = companyMode {
                    xQuery["company_mode"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/extension-section",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([GetExtensionSectionRes].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
            
        public class User {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get a List of Users
            * Description: Retrieve details of users registered in the sales channel
            **/
            public func getCustomers(
                q: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CustomerListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/list",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomerListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Search an Existing Users
            * Description: Search and filter users details registered in the sales channel
            **/
            public func searchUsers(
                q: String?,
                query: [String]?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserSearchResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = q {
                    xQuery["q"] = value
                }
                
                if let value = query {
                    xQuery["query"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/search",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserSearchResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create User
            * Description: Register and add a new user to the sales channel.
            **/
            public func createUser(
                body: CreateUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Block/Unblock Users
            * Description: Manage user access by blocking or unblocking their accounts, restricting login for blocked accounts and allowing login for unblocked accounts.
            **/
            public func blockOrUnblockUsers(
                body: BlockUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: BlockUserSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/activation",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlockUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Restore Deleted User
            * Description: Restore a previously deleted user account.
            **/
            public func unDeleteUser(
                body: UnDeleteUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UnDeleteUserSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/undelete",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UnDeleteUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update User Details
            * Description: Modify and update user profile information.
            **/
            public func updateUser(
                userId: String,
                body: UpdateUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create User Session
            * Description: Create session for user interactions
            **/
            public func createUserSession(
                body: CreateUserSessionRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: CreateUserSessionResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserSessionResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Session
            * Description: Terminate an active user session.
            **/
            public func deleteSession(
                id: String,
                sessionId: String,
                reason: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SessionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                xQuery["session_id"] = sessionId
                xQuery["reason"] = reason
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Active Sessions
            * Description: Retrieve a list of currently active user sessions.
            **/
            public func getActiveSessions(
                id: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SessionListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Active Sessions
            * Description: Terminate all active user sessions.
            **/
            public func deleteActiveSessions(
                id: String,
                reason: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SessionsDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                xQuery["id"] = id
                xQuery["reason"] = reason
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionsDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Archive User
            * Description: Delete user from sales channel, allowing re-registration with the same mobile/email for a new user account.
            **/
            public func archiveUser(
                body: ArchiveUserRequestSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: ArchiveUserSuccess?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/archive",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ArchiveUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get Platform Config
            * Description: Retrieve platform sales channel authentication configuration.
            **/
            public func getPlatformConfig(
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Platform Config
            * Description: Modify and update platform sales channel authentication configuration.
            **/
            public func updatePlatformConfig(
                body: PlatformSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create User Group
            * Description: Form and add a new user group.
            **/
            public func createUserGroup(
                body: CreateUserGroup,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Groups
            * Description: Retrieve a list of user groups.
            **/
            public func getUserGroups(
                pageNo: String?,
                pageSize: String?,
                name: String?,
                type: String?,
                status: String?,
                groupUid: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = name {
                    xQuery["name"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = status {
                    xQuery["status"] = value
                }
                
                if let value = groupUid {
                    xQuery["group_uid"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update User Group
            * Description: Modify and update user group details.
            **/
            public func updateUserGroup(
                groupId: String,
                body: UpdateUserGroupSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Group
            * Description: Retrieve a user group by its unique identifier.
            **/
            public func getUserGroupById(
                groupId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Modify User Group
            * Description: Update user group partially on the platform.
            **/
            public func updateUserGroupPartially(
                groupId: String,
                body: PartialUserGroupUpdateSchema,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Create a User Attribute Definition
            * Description: Create a new User Attribute Definition
            **/
            public func createUserAttributeDefinition(
                body: CreateUserAttributeDefinition,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeDefinitionResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinitionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute Definitions
            * Description: Retrieve user attribute definitions.
            **/
            public func getUserAttributeDefinitions(
                excludingIds: String?,
                slug: String?,
                type: String?,
                customerEditable: Bool?,
                encrypted: Bool?,
                pinned: Bool?,
                pinOrder: Int?,
                isLocked: Bool?,
                name: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = excludingIds {
                    xQuery["excluding_ids"] = value
                }
                
                if let value = slug {
                    xQuery["slug"] = value
                }
                
                if let value = type {
                    xQuery["type"] = value
                }
                
                if let value = customerEditable {
                    xQuery["customer_editable"] = value
                }
                
                if let value = encrypted {
                    xQuery["encrypted"] = value
                }
                
                if let value = pinned {
                    xQuery["pinned"] = value
                }
                
                if let value = pinOrder {
                    xQuery["pin_order"] = value
                }
                
                if let value = isLocked {
                    xQuery["is_locked"] = value
                }
                
                if let value = name {
                    xQuery["name"] = value
                }
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update User Attribute Definition
            * Description: Update an existing user attribute definition.
            **/
            public func updateUserAttributeDefinition(
                attributeDefId: String,
                body: CreateUserAttributeDefinition,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Attribute Definition
            * Description: Delete a user attribute definition by its unique identifier.
            **/
            public func deleteUserAttributeDefinitionById(
                attributeDefId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute Definition
            * Description: Get a user attribute definition by its unique identifier.
            **/
            public func getUserAttributeDefinitionById(
                attributeDefId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Update Or Create User Attribute
            * Description: Update Or Create User Attribute
            **/
            public func updateUserAttribute(
                attributeDefId: String,
                userId: String,
                body: CreateUserAttributeRequest,
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute
            * Description: Get User Attribute
            **/
            public func getUserAttribute(
                attributeDefId: String,
                userId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Delete User Attribute
            * Description: Delete User Attribute
            **/
            public func deleteUserAttribute(
                attributeDefId: String,
                userId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get All Customer Attributes
            * Description: Retrieve all user attributes for a specific user
            **/
            public func getUserAttributesForUser(
                userId: String,
                pageSize: Int?,
                pageNo: Int?,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                                
                var xQuery: [String: Any] = [:] 
                
                if let value = pageSize {
                    xQuery["page_size"] = value
                }
                
                if let value = pageNo {
                    xQuery["page_no"] = value
                }
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/user/\(userId)",
                    query: xQuery,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            /**
            *
            * Summary: Get User Attribute
            * Description: Retrieve User Attribute details by ID.
            **/
            public func getUserAttributeById(
                attributeId: String,
                
                headers: [(key: String, value: String)]? = nil,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                                
                 
                
                var xHeaders: [(key: String, value: String)] = []
                
                
                if let headers = headers {
                    xHeaders.append(contentsOf: headers)
                }
                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/attribute/\(attributeId)",
                    query: nil,
                    body: nil,
                    headers: xHeaders,
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
        }
        
        
    }
}