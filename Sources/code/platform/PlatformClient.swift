

import Foundation

public class PlatformClient {
    public let config: PlatformConfig

    public let auditTrail: AuditTrail

    public let billing: Billing

    public let catalog: Catalog

    public let common: Common

    public let communication: Communication

    public let companyProfile: CompanyProfile

    public let configuration: Configuration

    public let content: Content

    public let discount: Discount

    public let fileStorage: FileStorage

    public let finance: Finance

    public let inventory: Inventory

    public let lead: Lead

    public let serviceability: Serviceability

    public let order: Order

    public let payment: Payment

    public let theme: Theme

    public let webhook: Webhook

    public init(config: PlatformConfig) {
        self.config = config
        
        auditTrail = AuditTrail(config: config)
        
        billing = Billing(config: config)
        
        catalog = Catalog(config: config)
        
        common = Common(config: config)
        
        communication = Communication(config: config)
        
        companyProfile = CompanyProfile(config: config)
        
        configuration = Configuration(config: config)
        
        content = Content(config: config)
        
        discount = Discount(config: config)
        
        fileStorage = FileStorage(config: config)
        
        finance = Finance(config: config)
        
        inventory = Inventory(config: config)
        
        lead = Lead(config: config)
        
        serviceability = Serviceability(config: config)
        
        order = Order(config: config)
        
        payment = Payment(config: config)
        
        theme = Theme(config: config)
        
        webhook = Webhook(config: config)
        
    }
    public func setLocationDetails(details: PlatformConfig.LocationDetails?){
        config.locationDetails = details
    }
    public func applicationClient(id: String) -> ApplicationClient {
        return ApplicationClient(applicationId: id, config: config)
    }

    public class ApplicationClient {
        var config: PlatformConfig
        var companyId: String
        var applicationId: String

        
        public let analytics: Analytics
        
        public let cart: Cart
        
        public let catalog: Catalog
        
        public let communication: Communication
        
        public let configuration: Configuration
        
        public let content: Content
        
        public let fileStorage: FileStorage
        
        public let lead: Lead
        
        public let serviceability: Serviceability
        
        public let order: Order
        
        public let partner: Partner
        
        public let payment: Payment
        
        public let rewards: Rewards
        
        public let share: Share
        
        public let theme: Theme
        
        public let user: User
        
        
        public init(applicationId: String, config: PlatformConfig) {
            self.config = config
            self.companyId = config.companyId
            self.applicationId = applicationId

            
            analytics = Analytics(config: config, applicationId: applicationId)
            
            cart = Cart(config: config, applicationId: applicationId)
            
            catalog = Catalog(config: config, applicationId: applicationId)
            
            communication = Communication(config: config, applicationId: applicationId)
            
            configuration = Configuration(config: config, applicationId: applicationId)
            
            content = Content(config: config, applicationId: applicationId)
            
            fileStorage = FileStorage(config: config, applicationId: applicationId)
            
            lead = Lead(config: config, applicationId: applicationId)
            
            serviceability = Serviceability(config: config, applicationId: applicationId)
            
            order = Order(config: config, applicationId: applicationId)
            
            partner = Partner(config: config, applicationId: applicationId)
            
            payment = Payment(config: config, applicationId: applicationId)
            
            rewards = Rewards(config: config, applicationId: applicationId)
            
            share = Share(config: config, applicationId: applicationId)
            
            theme = Theme(config: config, applicationId: applicationId)
            
            user = User(config: config, applicationId: applicationId)
            
        }

        
            
        public class Analytics {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Execute given query and returns paginated data
            * Description: accepts QueryModel and page object as an request body and returns paginated JSON response alog with page object
            **/
            public func executeJobForProvidedParametersV2(
                provider: String,
                datasource: String,
                exportType: String,
                body: JobExecute,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["datasource"] = datasource




    xQuery["export_type"] = exportType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/provider/\(provider)/job/execute",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: start_download
            * Description: accepts query model as an argument and create job for exporting result to csv file and returns job id as a response
            **/
            public func startDownloadForQueryV2(
                provider: String,
                datasource: String,
                exportType: String,
                body: JobExecute,
                onResponse: @escaping (_ response: String?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["datasource"] = datasource




    xQuery["export_type"] = exportType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/provider/\(provider)/job/download",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = String(decoding: data, as: UTF8.self)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: check export status
            * Description: Takes job id in path param to check the status of job Returns file URL if downloading is done else returns status of job
            **/
            public func checkJobStatusByNameV2(
                provider: String,
                exportType: String,
                fileName: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["export_type"] = exportType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/insights/v2.0/company/\(companyId)/application/\(applicationId)/provider/\(provider)/job/\(fileName)/status",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Cart {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Retrieve available coupons.
            * Description: Retrieve a list of available coupons for use in the shopping cart.
            **/
            public func getCoupons(
                pageNo: Int?,
                pageSize: Int?,
                isArchived: Bool?,
                title: String?,
                isPublic: Bool?,
                isDisplay: Bool?,
                typeSlug: String?,
                code: String?,
                
                onResponse: @escaping (_ response: CouponsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = isArchived {
    
    xQuery["is_archived"] = value
    
}


if let value = title {
    
    xQuery["title"] = value
    
}


if let value = isPublic {
    
    xQuery["is_public"] = value
    
}


if let value = isDisplay {
    
    xQuery["is_display"] = value
    
}


if let value = typeSlug {
    
    xQuery["type_slug"] = value
    
}


if let value = code {
    
    xQuery["code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getCoupons
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getCouponsPaginator(
                pageSize: Int?,
                isArchived: Bool?,
                title: String?,
                isPublic: Bool?,
                isDisplay: Bool?,
                typeSlug: String?,
                code: String?
                
                ) -> Paginator<CouponsResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<CouponsResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getCoupons(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            isArchived: isArchived,
                            title: title,
                            isPublic: isPublic,
                            isDisplay: isDisplay,
                            typeSlug: typeSlug,
                            code: code
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create a new coupon.
            * Description: Generate and add a new coupon to the cart.
            **/
            public func createCoupon(
                body: CouponAdd,
                onResponse: @escaping (_ response: CouponDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a list of all coupon tags associated with a application.
            * Description: This API helps to get coupon tags data associated to a particular application.
            **/
            public func getCouponTags(
                
                onResponse: @escaping (_ response: TagsViewResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon-tags",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a list of all Promotion tags associated with a application.
            * Description: This API helps to get Promotion tags data associated to a particular application.
            **/
            public func getPromotionTags(
                
                onResponse: @escaping (_ response: TagsViewResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promo-tags",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get coupon details by ID.
            * Description: Retrieve detailed information about a specific coupon using its unique ID.
            **/
            public func getCouponById(
                id: String,
                
                onResponse: @escaping (_ response: CouponUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a coupon.
            * Description: Modify the details and settings of an existing coupon in the cart system.
            **/
            public func updateCoupon(
                id: String,
                body: CouponUpdate,
                onResponse: @escaping (_ response: CouponDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Partially update a coupon.
            * Description: Make partial modifications to the settings of an existing coupon in the cart system.
            **/
            public func updateCouponPartially(
                id: String,
                body: CouponPartialUpdate,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve available promotions.
            * Description: Retrieve a list of available promotions to apply to the cart.
            **/
            public func getPromotions(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                promoGroup: String?,
                promotionType: String?,
                fpPanel: String?,
                promotionId: String?,
                
                onResponse: @escaping (_ response: PromotionsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = promoGroup {
    
    xQuery["promo_group"] = value
    
}


if let value = promotionType {
    
    xQuery["promotion_type"] = value
    
}


if let value = fpPanel {
    
    xQuery["fp_panel"] = value
    
}


if let value = promotionId {
    
    xQuery["promotion_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getPromotions
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getPromotionsPaginator(
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                promoGroup: String?,
                promotionType: String?,
                fpPanel: String?,
                promotionId: String?
                
                ) -> Paginator<PromotionsResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<PromotionsResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getPromotions(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q,
                            isActive: isActive,
                            promoGroup: promoGroup,
                            promotionType: promotionType,
                            fpPanel: fpPanel,
                            promotionId: promotionId
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create a new promotion.
            * Description: Generate and add a new promotion to the cart system 
            **/
            public func createPromotion(
                body: PromotionAdd,
                onResponse: @escaping (_ response: PromotionAdd?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionAdd.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get promotion details by ID.
            * Description: Retrieve detailed information about a specific promotion using its unique ID.
            **/
            public func getPromotionById(
                id: String,
                
                onResponse: @escaping (_ response: PromotionUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a promotion.
            * Description: Modify the details and settings of an existing promotion in the cart system.
            **/
            public func updatePromotion(
                id: String,
                body: PromotionUpdate,
                onResponse: @escaping (_ response: PromotionUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PromotionUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Partially update a promotion.
            * Description: Make partial modifications to the settings of an existing promotion in the cart system.
            **/
            public func updatePromotionPartially(
                id: String,
                body: PromotionPartialUpdate,
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get promotion and coupon configuration.
            * Description: Retrieve configuration settings for promotions and coupons.
            **/
            public func getPromosCouponConfig(
                entityType: String?,
                isHidden: Bool?,
                
                onResponse: @escaping (_ response: ActivePromosResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = entityType {
    
    xQuery["entity_type"] = value
    
}


if let value = isHidden {
    
    xQuery["is_hidden"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promo-coupons",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ActivePromosResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get cart meta configuration by id
            * Description: Get cart meta configuration by id
            **/
            public func getCartMetaConfig(
                cartMetaId: String,
                
                onResponse: @escaping (_ response: CartMetaConfigDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cartConfiguration/\(cartMetaId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart metadata configuration.
            * Description: Modify the configuration settings for cart metadata.
            **/
            public func updateCartMetaConfig(
                cartMetaId: String,
                body: CartMetaConfigUpdate,
                onResponse: @escaping (_ response: CartMetaConfigUpdate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cartConfiguration/\(cartMetaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigUpdate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete cart meta configuration
            * Description: Delete cart meta configuration
            **/
            public func deleteCartMetaConfig(
                cartMetaId: String,
                
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cartConfiguration/\(cartMetaId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch cart meta configuration
            * Description: Fetch cart meta configuration
            **/
            public func getCartMetaConfigs(
                
                onResponse: @escaping (_ response: CartMetaConfigListResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create new cart meta configuration
            * Description: Create new cart meta configuration
            **/
            public func createCartMetaConfig(
                body: CartMetaConfigAdd,
                onResponse: @escaping (_ response: CartMetaConfigAddResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaConfigAddResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create new price adjustment
            * Description: Create new price adjustment
            **/
            public func addPriceAdjustment(
                body: PriceAdjustmentAdd,
                onResponse: @escaping (_ response: AddPriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddPriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a list of all price adjustments associated with a cart
            * Description: This API helps to get price adjustments data associated to a particular cart
            **/
            public func getPriceAdjustments(
                cartId: String,
                
                onResponse: @escaping (_ response: PriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["cart_id"] = cartId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/price-adjustment",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update price adjustments.
            * Description: Modify price adjustments for items in the cart.
            **/
            public func updatePriceAdjustment(
                id: String,
                body: PriceAdjustmentUpdate,
                onResponse: @escaping (_ response: UpdatePriceAdjustmentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/priceAdjustment/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdatePriceAdjustmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove price adjustments.
            * Description: Remove price adjustments applied to items in the cart.
            **/
            public func removePriceAdjustment(
                id: String,
                
                onResponse: @escaping (_ response: SuccessMessage?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/priceAdjustment/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessage.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch and validate cart items.
            * Description: Retrieve and validate items currently in the cart.
            **/
            public func fetchAndvalidateCartItems(
                body: OpenapiCartDetailsRequest,
                onResponse: @escaping (_ response: OpenapiCartDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenapiCartDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check cart serviceability.
            * Description: Verify if the items in the cart are serviceable.
            **/
            public func checkCartServiceability(
                body: OpenApiCartServiceabilityRequest,
                onResponse: @escaping (_ response: OpenApiCartServiceabilityResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/serviceability",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCartServiceabilityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Proceed to cart checkout.
            * Description: Initiate the checkout process for the items in the cart.
            **/
            public func checkoutCart(
                body: OpenApiPlatformCheckoutReq,
                onResponse: @escaping (_ response: OpenApiCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart/checkout",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OpenApiCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve abandoned carts.
            * Description: Retrieve abandoned carts for analysis and potential recovery.
            **/
            public func getAbandonedCart(
                pageNo: Int?,
                pageSize: Int?,
                fromDate: String?,
                toDate: String?,
                anonymousCart: Bool?,
                lastId: String?,
                sortOn: String?,
                
                onResponse: @escaping (_ response: AbandonedCartResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = fromDate {
    
    xQuery["from_date"] = value
    
}


if let value = toDate {
    
    xQuery["to_date"] = value
    
}


if let value = anonymousCart {
    
    xQuery["anonymous_cart"] = value
    
}


if let value = lastId {
    
    xQuery["last_id"] = value
    
}


if let value = sortOn {
    
    xQuery["sort_on"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AbandonedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAbandonedCart
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAbandonedCartPaginator(
                pageSize: Int?,
                fromDate: String?,
                toDate: String?,
                anonymousCart: Bool?,
                lastId: String?,
                sortOn: String?
                
                ) -> Paginator<AbandonedCartResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<AbandonedCartResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAbandonedCart(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            fromDate: fromDate,
                            toDate: toDate,
                            anonymousCart: anonymousCart,
                            lastId: lastId,
                            sortOn: sortOn
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get abandoned cart details.
            * Description: Retrieve detailed information about a specific abandoned cart.
            **/
            public func getAbandonedCartDetails(
                id: String?,
                i: Bool?,
                b: Bool?,
                c: Bool?,
                
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = c {
    
    xQuery["c"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/cart/detail",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add items to the cart.
            * Description: Add items to the shopping cart 
            **/
            public func addItems(
                cartId: String,
                b: Bool?,
                body: AddCartRequest,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = b {
    
    xQuery["b"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update items in the abandoned cart
            * Description: Use this API to update items added to the cart with the help of a request object containing attributes like item_quantity and item_size. These attributes will be fetched from the following APIs operation Operation for current api call.update_item for update items. remove_item for removing items. item_id "/platform/content/v1/products/" "/platform/content/v1/products/:slug/sizes/" quantity item quantity (must be greater than or equal to 1) article_id "/content​/v1​/products​/:identifier​/sizes​/price​/"  item position in the cart (must be greater than or equal to 0)
            **/
            public func updateCart(
                cartId: String,
                b: Bool?,
                body: UpdateCartRequest,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = b {
    
    xQuery["b"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/abandoned/carts/\(cartId)",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get coupon option values.
            * Description: Retrieve available values for coupon options.
            **/
            public func getCouponOptionValues(
                
                onResponse: @escaping (_ response: CouponOptions?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_options",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CouponOptions.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check if a coupon code exists.
            * Description: Verify the existence of a specific coupon code.
            **/
            public func getCouponCodeExists(
                code: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = code {
    
    xQuery["code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/coupon_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check if a promotion code exists.
            * Description: Verify the existence of a specific promotion code.
            **/
            public func getPromotionCodeExists(
                code: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = code {
    
    xQuery["code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/promotion_code_exists",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Override the cart.
            * Description: Override the current cart with a new configuration.
            **/
            public func overrideCart(
                body: OverrideCheckoutReq,
                onResponse: @escaping (_ response: OverrideCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout/over-ride",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OverrideCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Generate token for sharing the cart
            * Description: Use this API to generate a shared cart snapshot and return a shortlink token. The link can be shared with other users for getting the same items in their cart.
            **/
            public func getCartShareLink(
                body: GetShareCartLinkRequest,
                onResponse: @escaping (_ response: GetShareCartLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/share-cart",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetShareCartLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get items shared via a cart link.
            * Description: Retrieve the items shared with you via a cart link.
            **/
            public func getCartSharedItems(
                token: String,
                
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shareCart/\(token)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart with shared items.
            * Description: Modify your cart by adding shared items from a cart link.
            **/
            public func updateCartWithSharedItems(
                token: String,
                action: String,
                cartId: String?,
                
                onResponse: @escaping (_ response: SharedCartResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shareCart/\(token)/\(action)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SharedCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve a list of carts.
            * Description: Retrieve a list of saved shopping carts.
            **/
            public func getCartList(
                fromDate: String?,
                toDate: String?,
                filterOn: String?,
                
                onResponse: @escaping (_ response: MultiCartResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = fromDate {
    
    xQuery["from_date"] = value
    
}


if let value = toDate {
    
    xQuery["to_date"] = value
    
}


if let value = filterOn {
    
    xQuery["filter_on"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart-list",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MultiCartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart user details.
            * Description: Modify user-related details for a shopping cart.
            **/
            public func updateCartUser(
                id: String?,
                body: UpdateUserCartMapping,
                onResponse: @escaping (_ response: UserCartMappingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/update-user",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserCartMappingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Count items in the customer's cart
            * Description: Use this API to get the total number of items present in cart.
            **/
            public func getItemCount(
                id: String?,
                buyNow: Bool?,
                cartType: String?,
                
                onResponse: @escaping (_ response: CartItemCountResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/basic",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartItemCountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add items via platform integration.
            * Description: Add items to the cart through platform integration.
            **/
            public func platformAddItems(
                i: Bool?,
                b: Bool?,
                buyNow: Bool?,
                id: String?,
                cartType: String?,
                body: PlatformAddCartRequest,
                onResponse: @escaping (_ response: AddCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch all items added to the customer cart using cart id
            * Description: Use this API to get details of all the items added to a cart.
            **/
            public func getCart(
                id: String?,
                userId: String?,
                i: Bool?,
                b: Bool?,
                assignCardId: Double?,
                buyNow: Bool?,
                cartType: String?,
                
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = userId {
    
    xQuery["user_id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = assignCardId {
    
    xQuery["assign_card_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update items in the customer 's cart using cart id
            * Description: Use this API to update items added to the cart with the help of a request object containing attributes like item_quantity and item_size. These attributes will be fetched from the following APIs operation Operation for current api call. update_item for update items. remove_item for removing items.item_id "/platform/content/v1/products/" item_size "/platform/content/v1/products/:slug/sizes/" quantity  item quantity (must be greater than or equal to 1) article_id "/content​/v1​/products​/:identifier​/sizes​/price​/" item_index item position in the cart (must be greater than or equal to 0)
            **/
            public func platformUpdateCart(
                id: String?,
                i: Bool?,
                b: Bool?,
                buyNow: Bool?,
                cartType: String?,
                body: PlatformUpdateCartRequest,
                onResponse: @escaping (_ response: UpdateCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a cart.
            * Description: Delete a specific shopping cart from the system.
            **/
            public func deleteCart(
                id: String?,
                cartType: String?,
                body: DeleteCartRequest,
                onResponse: @escaping (_ response: DeleteCartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/cart_archive",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteCartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get app-specific coupons.
            * Description: Retrieve coupons specific to the mobile app.
            **/
            public func getAppCoupons(
                id: String?,
                buyNow: Bool?,
                slug: String?,
                storeId: String?,
                
                onResponse: @escaping (_ response: GetCouponResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = slug {
    
    xQuery["slug"] = value
    
}


if let value = storeId {
    
    xQuery["store_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCouponResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Apply a coupon to the cart.
            * Description: Apply a selected coupon to the items in the shopping cart.
            **/
            public func applyCoupon(
                i: Bool?,
                b: Bool?,
                p: Bool?,
                id: String?,
                buyNow: Bool?,
                body: ApplyCouponRequest,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


if let value = p {
    
    xQuery["p"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove a coupon from the cart.
            * Description: Remove a coupon from the items in the shopping cart.
            **/
            public func removeCoupon(
                uid: String?,
                buyNow: Bool?,
                cartType: String?,
                
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = uid {
    
    xQuery["uid"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/platform-pos-coupon",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add address to an account
            * Description: Use this API to add an address to an account.
            **/
            public func addAddress(
                body: PlatformAddress,
                onResponse: @escaping (_ response: SaveAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SaveAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch address
            * Description: Use this API to get all the addresses associated with an account. If successful, returns a Address resource in the response body specified in GetAddressesResponse.attibutes listed below are optional uid address_id mobile_no checkout_mode tags default
            **/
            public func getAddresses(
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                onResponse: @escaping (_ response: PlatformGetAddressesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = mobileNo {
    
    xQuery["mobile_no"] = value
    
}


if let value = checkoutMode {
    
    xQuery["checkout_mode"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = isDefault {
    
    xQuery["is_default"] = value
    
}


if let value = userId {
    
    xQuery["user_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformGetAddressesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch a single address by its ID
            * Description: Use this API to get an addresses using its ID. If successful, returns a Address resource in the response body specified in `PlatformAddress`. Attibutes listed below are optional mobile_no checkout_mode tags default
            **/
            public func getAddressById(
                id: String,
                cartId: String?,
                buyNow: Bool?,
                mobileNo: String?,
                checkoutMode: String?,
                tags: String?,
                isDefault: Bool?,
                userId: String?,
                
                onResponse: @escaping (_ response: PlatformAddress?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = mobileNo {
    
    xQuery["mobile_no"] = value
    
}


if let value = checkoutMode {
    
    xQuery["checkout_mode"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = isDefault {
    
    xQuery["is_default"] = value
    
}


if let value = userId {
    
    xQuery["user_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformAddress.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update address added to an account
            * Description: Use this API to update an existing address in the account. Request object should contain attributes mentioned in Address can be updated. These attributes are:is_default_address landmark area pincode email address_type name address_id address
            **/
            public func updateAddress(
                id: String,
                body: PlatformAddress,
                onResponse: @escaping (_ response: UpdateAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove a user address.
            * Description: Delete an existing user address from the system.
            **/
            public func removeAddress(
                id: String,
                userId: String?,
                
                onResponse: @escaping (_ response: DeleteAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = userId {
    
    xQuery["user_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/address/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select an address from available addresses
            * Description: Select Address from all addresses associated with the account in order to ship the cart items to that address, otherwise default address will be selected implicitly. See `PlatformSelectCartAddressRequest` in schema of request body for the list of attributes needed to select Address from account. On successful request, this API returns a Cart object. Below address attributes are required. address_id billing_address_id uid
            **/
            public func selectAddress(
                cartId: String?,
                buyNow: Bool?,
                i: Bool?,
                b: Bool?,
                body: PlatformSelectCartAddressRequest,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = cartId {
    
    xQuery["cart_id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = b {
    
    xQuery["b"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/select-address",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get delivery date and options before checkout
            * Description: Use this API to get shipment details, expected delivery date, items and price breakup of the shipment.
            **/
            public func getShipments(
                pickAtStoreUid: Int?,
                orderingStoreId: Int?,
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pickAtStoreUid {
    
    xQuery["pick_at_store_uid"] = value
    
}


if let value = orderingStoreId {
    
    xQuery["ordering_store_id"] = value
    
}


if let value = i {
    
    xQuery["i"] = value
    
}


if let value = p {
    
    xQuery["p"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = addressId {
    
    xQuery["address_id"] = value
    
}


if let value = areaCode {
    
    xQuery["area_code"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update shipment details.
            * Description: Modify the details and settings of cart shipments.
            **/
            public func updateShipments(
                i: Bool?,
                p: Bool?,
                id: String?,
                addressId: String?,
                areaCode: String?,
                orderType: String?,
                body: UpdateCartShipmentRequest,
                onResponse: @escaping (_ response: PlatformCartShipmentsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = i {
    
    xQuery["i"] = value
    
}


if let value = p {
    
    xQuery["p"] = value
    
}


if let value = id {
    
    xQuery["id"] = value
    
}


if let value = addressId {
    
    xQuery["address_id"] = value
    
}


if let value = areaCode {
    
    xQuery["area_code"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/shipment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformCartShipmentsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update cart metadata.
            * Description: Modify the metadata associated with the shopping cart.
            **/
            public func updateCartMeta(
                id: String?,
                buyNow: Bool?,
                body: PlatformCartMetaRequest,
                onResponse: @escaping (_ response: CartMetaResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/meta",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartMetaResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Platform-specific cart checkout.
            * Description: Initiate cart checkout through platform-specific integration.
            **/
            public func platformCheckoutCart(
                id: String?,
                cartType: String?,
                body: PlatformCartCheckoutDetailRequest,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get available delivery modes.
            * Description: Retrieve a list of available delivery modes for cart checkout.
            **/
            public func getAvailableDeliveryModes(
                areaCode: String,
                id: String?,
                
                onResponse: @escaping (_ response: CartDeliveryModesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["area_code"] = areaCode



if let value = id {
    
    xQuery["id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/available-delivery-mode",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDeliveryModesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get store address by UID.
            * Description: Retrieve the store address using a unique identifier (UID).
            **/
            public func getStoreAddressByUid(
                storeUid: Int,
                
                onResponse: @escaping (_ response: StoreDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["store_uid"] = storeUid



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/store-address",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select a payment mode.
            * Description: Choose a payment mode for cart checkout.
            **/
            public func selectPaymentMode(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequest,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Validate a coupon for payment.
            * Description:  Verify the validity of a coupon code for the payment process.
            **/
            public func validateCouponForPayment(
                id: String?,
                buyNow: Bool?,
                addressId: String?,
                paymentMode: String?,
                paymentIdentifier: String?,
                aggregatorName: String?,
                merchantCode: String?,
                iin: String?,
                network: String?,
                type: String?,
                cardId: String?,
                cartType: String?,
                
                onResponse: @escaping (_ response: PaymentCouponValidate?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = addressId {
    
    xQuery["address_id"] = value
    
}


if let value = paymentMode {
    
    xQuery["payment_mode"] = value
    
}


if let value = paymentIdentifier {
    
    xQuery["payment_identifier"] = value
    
}


if let value = aggregatorName {
    
    xQuery["aggregator_name"] = value
    
}


if let value = merchantCode {
    
    xQuery["merchant_code"] = value
    
}


if let value = iin {
    
    xQuery["iin"] = value
    
}


if let value = network {
    
    xQuery["network"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = cardId {
    
    xQuery["card_id"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/cart/v1.0/company/\(companyId)/application/\(applicationId)/payment/validate/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCouponValidate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Platform-specific cart checkout v2.
            * Description: Initiate cart checkout through an updated platform-specific integration.
            **/
            public func platformCheckoutCartV2(
                id: String?,
                cartType: String?,
                body: PlatformCartCheckoutDetailV2Request,
                onResponse: @escaping (_ response: CartCheckoutResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = cartType {
    
    xQuery["cart_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/checkout",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartCheckoutResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select a payment mode v2.
            * Description: Choose a payment mode for cart checkout in the updated platform integration.
            **/
            public func selectPaymentModeV2(
                id: String?,
                buyNow: Bool?,
                orderType: String?,
                body: UpdateCartPaymentRequestV2,
                onResponse: @escaping (_ response: CartDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = buyNow {
    
    xQuery["buy_now"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/cart/v2.0/company/\(companyId)/application/\(applicationId)/payment",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CartDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Catalog {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get catalog insights.
            * Description: Retrieve the count of catalog related data like products, brands, departments and categories that have been made live as per configuration of the application.
            **/
            public func getCatalogInsights(
                brand: String?,
                
                onResponse: @escaping (_ response: CatalogInsightResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = brand {
    
    xQuery["brand"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/analytics/insights",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CatalogInsightResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application brand listing.
            * Description: Retrieve brand listings related to the application. A brand is the name under which a product is being sold
            **/
            public func getApplicationBrandListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrandListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandListingPaginator(
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrandListing(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application brand.
            * Description: Modify data associated to a item custom meta.
            **/
            public func updateAppBrand(
                brandUid: Int,
                body: ApplicationBrandJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brand/\(brandUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application brands.
            * Description: List all the brands. A brand is the name under which a product is being sold.
            **/
            public func getApplicationBrands(
                department: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?,
                
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = department {
    
    xQuery["department"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = brandId {
    
    xQuery["brand_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/brands",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationBrands
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationBrandsPaginator(
                department: String?,
                pageSize: Int?,
                q: String?,
                brandId: [Int]?
                
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationBrands(
                            
                            department: department,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q,
                            brandId: brandId
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get categories.
            * Description: Retrieve a list of categories. Optionally pass filter the brands by the department.
            **/
            public func getCategories(
                department: String?,
                
                onResponse: @escaping (_ response: CategoryListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = department {
    
    xQuery["department"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/categories",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CategoryListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application category listing.
            * Description: Retrieve category listings related to the application. A brand is the name under which a product is being sold.
            **/
            public func getApplicationCategoryListing(
                departmentId: Int?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: BrandListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = departmentId {
    
    xQuery["department_id"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BrandListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationCategoryListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationCategoryListingPaginator(
                departmentId: Int?,
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<BrandListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BrandListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationCategoryListing(
                            
                            departmentId: departmentId,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application category.
            * Description: Modify category data related to the application. Helps to update data associated to a item custom meta.
            **/
            public func updateAppCategory(
                categoryUid: Int,
                body: ApplicationCategoryJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/category/\(categoryUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add a Collection
            * Description: Create a collection to the catalog.
            **/
            public func createCollection(
                body: CreateCollection,
                onResponse: @escaping (_ response: CollectionCreateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CollectionCreateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve all collections.
            * Description: A Collection allows you to organize your products into hierarchical groups.
            **/
            public func getAllCollections(
                q: String?,
                scheduleStatus: String?,
                type: String?,
                tag: [String]?,
                isActive: Bool?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: GetCollectionListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = scheduleStatus {
    
    xQuery["schedule_status"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = tag {
    
    xQuery["tag"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get values of the selected value for the filter options.
            * Description: Get query filters keys to configure a collection
            **/
            public func getApplicationFilterValues(
                filterKey: String,
                c: String?,
                collectionId: String?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: GetQueryFiltersValuesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = c {
    
    xQuery["c"] = value
    
}


if let value = collectionId {
    
    xQuery["collection_id"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filterOptions/\(filterKey)/values",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersValuesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get filters keys of the filter options.
            * Description: Get query filters keys to configure a collection
            **/
            public func getApplicationFilterKeys(
                c: String?,
                
                onResponse: @escaping (_ response: GetQueryFiltersKeysResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = c {
    
    xQuery["c"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/filter-options/keys",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersKeysResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve query filters.
            * Description: Retrieve query filters to configure a collection
            **/
            public func getQueryFilters(
                
                onResponse: @escaping (_ response: GetQueryFiltersResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/query-options",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetQueryFiltersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get the items for a collection
            * Description: Get items from a collection specified by its `id`.
            **/
            public func getCollectionItems(
                id: String,
                sortOn: String?,
                pageSize: Int?,
                pageNo: Int?,
                isPinned: Bool?,
                q: String?,
                isExcluded: Bool?,
                
                onResponse: @escaping (_ response: GetCollectionItemsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = sortOn {
    
    xQuery["sort_on"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = isPinned {
    
    xQuery["is_pinned"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = isExcluded {
    
    xQuery["is_excluded"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionItemsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Clear priorities set for collection items.
            * Description: Clear priorities set for collection items.
            **/
            public func clearCollectionItemsPriority(
                id: String,
                
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add items to a collection
            * Description: Adds items to a collection specified by its `id`. See `CollectionItemRequest` for the list of attributes needed to add items to an collection.
            **/
            public func addCollectionItems(
                id: String,
                body: CollectionItemUpdateSchema,
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/collections/\(id)/items",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get collection details.
            * Description: Get the details of a collection by its slug.
            **/
            public func getCollectionDetail(
                slug: String,
                
                onResponse: @escaping (_ response: GetCollectionDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCollectionDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a collection
            * Description: Update a collection by it's id. On successful request, returns the updated collection
            **/
            public func updateCollection(
                id: String,
                body: UpdateCollection,
                onResponse: @escaping (_ response: UpdateCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a collection.
            * Description: Delete a collection by it's id. Returns an object that tells whether the collection was deleted successfully
            **/
            public func deleteCollection(
                id: String,
                
                onResponse: @escaping (_ response: CommonResponseSchemaCollection?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/collections/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CommonResponseSchemaCollection.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application department listing.
            * Description: Retrieve department listings related to the application. Departments are a way to categorise similar products. A product can lie in multiple departments.
            **/
            public func getApplicationDepartmentListing(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: ApplicationDepartmentListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDepartmentListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getApplicationDepartmentListing
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getApplicationDepartmentListingPaginator(
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<ApplicationDepartmentListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationDepartmentListingResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getApplicationDepartmentListing(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update application department.
            * Description: Modify department data related to the application.
            **/
            public func updateAppDepartment(
                departmentUid: Int,
                body: ApplicationDepartmentJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/department/\(departmentUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get filter details for application
            * Description: configured details for catalog.
            **/
            public func getConfigurationsFilterMetadata(
                filter: String,
                
                onResponse: @escaping (_ response: FilterResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/productConfiguration/metadata/\(filter)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FilterResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get departments.
            * Description: Retrieve a list of departments. Departments are a way to categorise similar products. A product can lie in multiple departments.
            **/
            public func getDepartments(
                
                onResponse: @escaping (_ response: DepartmentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/departments",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DepartmentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application inventory.
            * Description: Retrieve inventory data related to the application. Retrieve the available Inventory of the products. Use this API to get the Inventory status of products with the filters of timestamp, store_ids, brand_ids, item_id, Items, Pagination
            **/
            public func getAppInventory(
                itemIds: [Int]?,
                storeIds: [Int]?,
                brandIds: [Int]?,
                sellerIdentifiers: [String]?,
                timestamp: String?,
                pageSize: Int?,
                pageId: String?,
                
                onResponse: @escaping (_ response: InventoryStockResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


if let value = storeIds {
    
    xQuery["store_ids"] = value
    
}


if let value = brandIds {
    
    xQuery["brand_ids"] = value
    
}


if let value = sellerIdentifiers {
    
    xQuery["seller_identifiers"] = value
    
}


if let value = timestamp {
    
    xQuery["timestamp"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageId {
    
    xQuery["page_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/inventory",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventoryStockResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application locations.
            * Description: Retrieve locations specific to the application. View all the locations asscoiated to a application.
            **/
            public func getAppLocations(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageNo: Int?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                companyUids: [Int]?,
                
                onResponse: @escaping (_ response: LocationListSerializer?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = storeType {
    
    xQuery["store_type"] = value
    
}


if let value = uid {
    
    xQuery["uid"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = stage {
    
    xQuery["stage"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = storeTypes {
    
    xQuery["store_types"] = value
    
}


if let value = companyUids {
    
    xQuery["company_uids"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/locations",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LocationListSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppLocations
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppLocationsPaginator(
                storeType: String?,
                uid: [Int]?,
                q: String?,
                stage: String?,
                pageSize: Int?,
                tags: [String]?,
                storeTypes: [String]?,
                companyUids: [Int]?
                
                ) -> Paginator<LocationListSerializer> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<LocationListSerializer>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppLocations(
                            
                            storeType: storeType,
                            uid: uid,
                            q: q,
                            stage: stage,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            tags: tags,
                            storeTypes: storeTypes,
                            companyUids: companyUids
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Retrieve configurations.
            * Description: Retrieve a configured details for catalog.
            **/
            public func getConfigurations(
                
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create configuration for product listing.
            * Description: Add configuration for products & listing.
            **/
            public func createConfigurationProductListing(
                body: AppConfiguration,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve catalog configuration.
            * Description: Retrieve configuration meta details for the catalog.
            **/
            public func getCatalogConfiguration(
                
                onResponse: @escaping (_ response: GetCatalogConfigurationMetaData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-configuration/metadata",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetCatalogConfigurationMetaData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve configuration by type.
            * Description: Retrieve configuration details based on a specific type in the catalog.
            **/
            public func getConfigurationByType(
                type: String,
                
                onResponse: @escaping (_ response: GetAppCatalogEntityConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(type)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogEntityConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create configuration by type.
            * Description: Add configuration for categories & brands.
            **/
            public func createConfigurationByType(
                type: String,
                body: AppConfiguration,
                onResponse: @escaping (_ response: GetAppCatalogConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(type)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppCatalogConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve application product data.
            * Description: Products are the core resource of an application. If successful, returns a Company Application Product resource in the response body depending upon filter sent.
            **/
            public func getAppProduct(
                itemId: Int,
                
                onResponse: @escaping (_ response: OwnerAppItemResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OwnerAppItemResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application product data.
            * Description: Allows to update data associated to a item custom meta.
            **/
            public func updateAppProduct(
                itemId: Int,
                body: ApplicationItemMeta,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product/\(itemId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application products.
            * Description: Retrieve products associated with the application. List all the products associated with a brand, collection or category in a requested sort order.
            **/
            public func getAppicationProducts(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageId: String?,
                pageSize: Int?,
                pageNo: Int?,
                pageType: String?,
                itemIds: [String]?,
                
                onResponse: @escaping (_ response: ApplicationProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = f {
    
    xQuery["f"] = value
    
}


if let value = c {
    
    xQuery["c"] = value
    
}


if let value = filters {
    
    xQuery["filters"] = value
    
}


if let value = isDependent {
    
    xQuery["is_dependent"] = value
    
}


if let value = sortOn {
    
    xQuery["sort_on"] = value
    
}


if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageType {
    
    xQuery["page_type"] = value
    
}


if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppicationProducts
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppicationProductsPaginator(
                q: String?,
                f: String?,
                c: String?,
                filters: Bool?,
                isDependent: Bool?,
                sortOn: String?,
                pageSize: Int?,
                itemIds: [String]?
                
                ) -> Paginator<ApplicationProductListingResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<ApplicationProductListingResponse>(pageSize: pageSize, type: "cursor")
                paginator.onPage = {
                    self.getAppicationProducts(
                            
                            q: q,
                            f: f,
                            c: c,
                            filters: filters,
                            isDependent: isDependent,
                            sortOn: sortOn,
                            pageId: paginator.pageId
                            ,
                            pageSize: paginator.pageSize
                            ,
                            pageNo: paginator.pageNo
                            ,
                            pageType: paginator.type
                            ,
                            itemIds: itemIds
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page.hasNext ?? false
                            paginator.pageId = response.page.nextId
                            
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get discounted inventory by size identifier.
            * Description: Allows to retrieve Inventory data for particular company grouped by size and store.
            **/
            public func getDiscountedInventoryBySizeIdentifier(
                itemId: Int,
                sizeIdentifier: Int,
                pageNo: Int?,
                pageSize: Int?,
                locationIds: [Int]?,
                
                onResponse: @escaping (_ response: InventorySellerIdentifierResponsePaginated?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = locationIds {
    
    xQuery["location_ids"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(itemId)/inventory/\(sizeIdentifier)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InventorySellerIdentifierResponsePaginated.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get product details by slug.
            * Description: Retrieve detailed product information using a product slug. Products are the core resource of an application. Products can be associated by categories, collections, brands and more.
            **/
            public func getProductDetailBySlug(
                slug: String,
                
                onResponse: @escaping (_ response: ProductDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/products/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application products.
            * Description: Retrieve products specific to the application. Products are the core resource of an application. Products can be associated by categories, collections, brands and more.
            **/
            public func getAppProducts(
                brandIds: [Int]?,
                categoryIds: [Int]?,
                departmentIds: [Int]?,
                tags: [String]?,
                itemIds: [Int]?,
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: RawProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = brandIds {
    
    xQuery["brand_ids"] = value
    
}


if let value = categoryIds {
    
    xQuery["category_ids"] = value
    
}


if let value = departmentIds {
    
    xQuery["department_ids"] = value
    
}


if let value = tags {
    
    xQuery["tags"] = value
    
}


if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/raw-products",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RawProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Return configuration level set for an application
            * Description: Get Product Return configuration set at an application level
            **/
            public func getAppReturnConfiguration(
                
                onResponse: @escaping (_ response: AppReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Return configuration level set for an application
            * Description: Create Return configuration level set for an application.
            **/
            public func createAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Return configuration level set for an application
            * Description: Update Return configuration level set for an application.
            **/
            public func updateAppReturnConfiguration(
                body: CreateUpdateAppReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete Category level Application Return Configuration setttings
            * Description: Delete Category level Application Return Configuration setttings
            **/
            public func deleteAppCategoryReturnConfiguration(
                body: DeleteAppCategoryReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all category level configuration level set for an application
            * Description: Get all category level configuration level set for an application.
            **/
            public func getAppCategoryReturnConfig(
                
                onResponse: @escaping (_ response: BaseAppCategoryReturnConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BaseAppCategoryReturnConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Category level Application Return Configuration setttings
            * Description: Create Category level Application Return Configuration setttings
            **/
            public func createAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Category level Application Return Configuration setttings
            * Description: Update Category level Application Return Configuration setttings
            **/
            public func updateAppCategoryReturnConfiguration(
                body: BaseAppCategoryReturnConfig,
                onResponse: @escaping (_ response: SuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/return-config/categories",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom autocomplete rules.
            * Description: Generate and add custom autocomplete rules to the catalog.
            **/
            public func createCustomAutocompleteRule(
                body: CreateAutocompleteKeyword,
                onResponse: @escaping (_ response: CreateAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get autocomplete configuration.
            * Description: Custom Autocomplete Keyword allows you to map conditions with keywords to give you the ultimate results
            **/
            public func getAutocompleteConfig(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                
                onResponse: @escaping (_ response: GetAutocompleteWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get autocomplete keyword details.
            * Description: Retrieve detailed information about a specific autocomplete keyword.
            **/
            public func getAutocompleteKeywordDetail(
                id: String,
                
                onResponse: @escaping (_ response: GetAutocompleteWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update autocomplete keywords.
            * Description: Update a mapping by it's id. On successful request, returns the updated Keyword mapping
            **/
            public func updateAutocompleteKeyword(
                id: String,
                body: CreateAutocompleteKeyword,
                onResponse: @escaping (_ response: GetAutocompleteWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAutocompleteWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete autocomplete keywords.
            * Description: Delete a keywords by it's id. Returns an object that tells whether the keywords was deleted successfully
            **/
            public func deleteAutocompleteKeyword(
                id: String,
                
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create search rerank for an application
            * Description: This view allows you to create search rerank attributes for an application
            **/
            public func createSearchRerank(
                body: CreateSearchRerankRequest,
                onResponse: @escaping (_ response: CreateSearchRerankResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateSearchRerankResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get search rerank for an application
            * Description: This view allows you to create search rerank attributes for an application
            **/
            public func getSearchRerank(
                
                onResponse: @escaping (_ response: GetSearchRerankResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchRerankResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get search rerank for an application
            * Description: This view allows you to retrieve search rerank attribute detail for an application
            **/
            public func getSearchRerankDetail(
                id: String,
                
                onResponse: @escaping (_ response: GetSearchRerankDetailResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchRerankDetailResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update search rerank for an application
            * Description: This view allows you to update search rerank attribute for an application
            **/
            public func updateSearchRerankConfiguration(
                id: String,
                body: UpdateSearchRerankRequest,
                onResponse: @escaping (_ response: UpdateSearchRerankResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateSearchRerankResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete search rerank configuration for an application
            * Description: This view allows you to delete search rerank configuration for an application
            **/
            public func deleteSearchRerankConfiguration(
                id: String,
                
                onResponse: @escaping (_ response: DeleteSearchRerankConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/rerank/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteSearchRerankConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create search configuration
            * Description: Create search configuration for the catalog.
            **/
            public func createSearchConfiguration(
                body: CreateSearchConfigurationRequest,
                onResponse: @escaping (_ response: CreateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Search Configuration
            * Description: Get search configuration in the catalog.
            **/
            public func getSearchConfiguration(
                
                onResponse: @escaping (_ response: GetSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update search configuration for an application
            * Description: This view allows you to modify searchable attributes for an application
            **/
            public func updateSearchConfiguration(
                body: UpdateSearchConfigurationRequest,
                onResponse: @escaping (_ response: UpdateSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete Search Configuration
            * Description: Delete search configuration in the catalog.
            **/
            public func deleteSearchConfiguration(
                
                onResponse: @escaping (_ response: DeleteSearchConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteSearchConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom search keywords.
            * Description: Create a Custom Search Keywords. 
            **/
            public func createCustomKeyword(
                body: CreateSearchKeyword,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all search keywords.
            * Description: Custom Search Keyword allows you to map conditions with keywords to give you the ultimate results
            **/
            public func getAllSearchKeyword(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: Bool?,
                
                onResponse: @escaping (_ response: GetSearchWordsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve search keywords.
            * Description: Retrieve a list of search keywords from the catalog.
            **/
            public func getSearchKeywords(
                id: String,
                
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update search keywords.
            * Description: Update Search Keyword by its id. On successful request, returns the updated collection
            **/
            public func updateSearchKeywords(
                id: String,
                body: CreateSearchKeyword,
                onResponse: @escaping (_ response: GetSearchWordsData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetSearchWordsData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete search keywords.
            * Description: Delete a keywords by it's id. Returns an object that tells whether the keywords was deleted successfully
            **/
            public func deleteSearchKeywords(
                id: String,
                
                onResponse: @escaping (_ response: DeleteResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/keyword/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application location.
            * Description: Modify location data related to the application. Helps to update data associated to a item custom meta
            **/
            public func updateAppLocation(
                storeUid: Int,
                body: ApplicationStoreJson,
                onResponse: @escaping (_ response: SuccessResponse1?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/store/\(storeUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponse1.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update 'Allow Single' setting.
            * Description: Modify allow single flag for filters of the application.
            **/
            public func updateAllowSingle(
                body: AllowSingleRequest,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/filter/allow_single",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update default sorting.
            * Description: Modify the default sort key configuration for the application.
            **/
            public func updateDefaultSort(
                body: DefaultKeyRequest,
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/product-configuration/sort/default_key",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create listing configuration.
            * Description: Add configuration for catalog listing.
            **/
            public func createListingConfiguration(
                configType: String,
                body: AppConfigurationsFilter,
                onResponse: @escaping (_ response: AppConfigurationsFilterResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsFilterResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve listing configurations.
            * Description: Retrieve the details of the application configured configurations of listing config types.
            **/
            public func getListingConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                uids: [Int]?,
                
                onResponse: @escaping (_ response: GetListingConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


if let value = uids {
    
    xQuery["uids"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetListingConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create group configuration.
            * Description: Create configuration for group configuration types.
            **/
            public func createGroupConfiguration(
                configType: String,
                body: AppConfigurationCreateDetail,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve group configurations.
            * Description: Retrieve the details of the application configured configurations of group config types.
            **/
            public func getGroupConfigurations(
                configType: String,
                pageNo: Int?,
                pageSize: Int?,
                search: String?,
                templateSlug: String?,
                
                onResponse: @escaping (_ response: GetConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


if let value = templateSlug {
    
    xQuery["template_slug"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update group configuration.
            * Description: Modify the group configurations for the application.
            **/
            public func updateGroupConfiguration(
                configType: String,
                groupSlug: String,
                body: AppConfigurationDetail,
                onResponse: @escaping (_ response: AppConfigurationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete group configuration.
            * Description: Delete configuration of the product config type of the application.
            **/
            public func deleteGroupConfiguration(
                configType: String,
                groupSlug: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/groups/\(groupSlug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update listing configuration.
            * Description: Modify the details and settings of an existing listing configuration.
            **/
            public func updateListingConfiguration(
                configType: String,
                configId: String,
                body: AppConfigurationsFilterResponse,
                onResponse: @escaping (_ response: AppConfigurationsFilterResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/item/\(configId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppConfigurationsFilterResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete listing configuration.
            * Description: Remove a specific listing configuration from the catalog.
            **/
            public func deleteListingConfiguration(
                configType: String,
                configId: String,
                
                onResponse: @escaping (_ response: ConfigSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/item/\(configId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Retrieve configuration metadata.
            * Description: Retrieve the configuraion metadata details for catalog.
            **/
            public func getConfigurationMetadata(
                configType: String,
                templateSlug: String?,
                
                onResponse: @escaping (_ response: GetConfigMetadataResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = templateSlug {
    
    xQuery["template_slug"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v2.0/company/\(companyId)/application/\(applicationId)/productConfiguration/\(configType)/metadata",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetConfigMetadataResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Create autocomplete settings config for an application
            * Description: This API allows to create autocomplete settings for an application.
            **/
            public func createAutocompleteSettings(
                body: AutocompleteRequestSchema,
                onResponse: @escaping (_ response: AutocompleteUpsertResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/settings",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompleteUpsertResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get autocomplete settings config for an application
            * Description: This API allows to get autocomplete settings config for an application.
            **/
            public func getAutocompleteSettings(
                
                onResponse: @escaping (_ response: AutocompleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/settings",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update autocomplete settings config for an application
            * Description: This API allows to update autocomplete settings for an application.
            **/
            public func updateAutocompleteSettings(
                id: String,
                body: AutocompleteRequestSchema,
                onResponse: @escaping (_ response: AutocompleteUpsertResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/settings/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompleteUpsertResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get autocomplete suggestions as per config for an application
            * Description: This API allows to get autocomplete suggestions as per config.
            **/
            public func getAutocompletePreview(
                q: String?,
                categorySuggestion: Int?,
                brandSuggestion: Int?,
                collectionSuggestion: Int?,
                productSuggestion: Int?,
                querySuggestion: Int?,
                
                onResponse: @escaping (_ response: AutocompletePreviewResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = categorySuggestion {
    
    xQuery["category_suggestion"] = value
    
}


if let value = brandSuggestion {
    
    xQuery["brand_suggestion"] = value
    
}


if let value = collectionSuggestion {
    
    xQuery["collection_suggestion"] = value
    
}


if let value = productSuggestion {
    
    xQuery["product_suggestion"] = value
    
}


if let value = querySuggestion {
    
    xQuery["query_suggestion"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/autocomplete/preview",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AutocompletePreviewResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Merchandising Rule's action details
            * Description: This allows you to create pin action of a merchandising rule.
            **/
            public func createMerchandisingRulePinAction(
                merchandisingRuleId: String,
                body: PinRequest,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/pin",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's action details
            * Description: This allows you to update pin action of a merchandising rule.
            **/
            public func updateMerchandisingRulePinAction(
                merchandisingRuleId: String,
                body: PinRequest,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/pin",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's action details
            * Description: This allows you to get details of pin action of a merchandising rule.
            **/
            public func getMerchandisingRulePinAction(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: PinResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/pin",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PinResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Merchandising Rule's Hide action details
            * Description: This allows you to create hide action of a merchandising rule.
            **/
            public func createMerchandisingRuleHideAction(
                merchandisingRuleId: String,
                body: HideRequest,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/hide",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's Hide action details
            * Description: This allows you to update hide action of a merchandising rule.
            **/
            public func updateMerchandisingRuleHideAction(
                merchandisingRuleId: String,
                body: HideRequest,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/hide",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Hide action details
            * Description: This allows you to get details of hide action of a merchandising rule.
            **/
            public func getMerchandisingRuleHideAction(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: HideResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/hide",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(HideResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Merchandising Rule's Boost action details
            * Description: This allows you to create Boost action of a merchandising rule.
            **/
            public func createMerchandisingRuleBoostAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/boost",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's Boost action details
            * Description: This allows you to update Boost action of a merchandising rule.
            **/
            public func updateMerchandisingRuleBoostAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/boost",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Boost action details
            * Description: This allows you to get details of Boost action of a merchandising rule.
            **/
            public func getMerchandisingRuleBoostAction(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: GetMerchandisingRuleBoostAction?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/boost",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetMerchandisingRuleBoostAction.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Bury action details
            * Description: This allows you to create Bury action of a merchandising rule.
            **/
            public func createMerchandisingRuleBuryAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/bury",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Merchandising Rule's Bury action details
            * Description: This allows you to update Bury action of a merchandising rule.
            **/
            public func updateMerchandisingRuleBuryAction(
                merchandisingRuleId: String,
                body: PostMerchandisingRuleBoostAction,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/bury",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's Bury action details
            * Description: This allows you to get details of Bury action of a merchandising rule.
            **/
            public func getMerchandisingRuleBuryAction(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: GetMerchandisingRuleBuryAction?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/bury",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetMerchandisingRuleBuryAction.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a Merchandising Rule's query
            * Description: This allows you to Create a merchandising rule's query.
            **/
            public func createMerchandisingRuleQuery(
                body: MerchandisingRuleQueryPost,
                onResponse: @escaping (_ response: MerchandiseQueryResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/query",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchandiseQueryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Merchandising Rule's query details
            * Description: This allows you to get details of a merchandising rule's query.
            **/
            public func getMerchandisingQuery(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: SearchResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/query",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SearchResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a Merchandising Rule's query
            * Description: This allows you to Update a merchandising rule's query.
            **/
            public func updateMerchandisingRuleQuery(
                merchandisingRuleId: String,
                body: MerchandisingRuleQueryPost,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/query",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save a Merchandising Rule
            * Description: This allows you to Save a merchandising rule's preview state.
            **/
            public func saveMerchandisingRules(
                merchandisingRuleId: String,
                body: MerchandisingRuleSave,
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a Merchandising Rule
            * Description: This allows you to Update a merchandising rule.
            **/
            public func deleteMerchandisingRule(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of all Merchandising Rule's details
            * Description: This allows you to get details of all merchandising rule's details.
            **/
            public func getMerchandisingRules(
                pageId: String?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: MerchandisingRulesList?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchandisingRulesList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a Merchandising Rule's preview
            * Description: This allows you to Update a merchandising rule's preview.
            **/
            public func deleteMerchandisingRulesPreview(
                merchandisingRuleId: String,
                
                onResponse: @escaping (_ response: SuccessResponseMerchandising?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/preview",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessResponseMerchandising.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get live preview of a Merchandising Rule
            * Description: This allows you to get live preview of a merchandising rule.
            **/
            public func getLivePreview(
                merchandisingRuleId: String,
                searchKeyword: String?,
                
                onResponse: @escaping (_ response: ProductListingResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = searchKeyword {
    
    xQuery["search_keyword"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/merchandise/rules/\(merchandisingRuleId)/preview",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create price factory
            * Description: This API allows to create price factory.
            **/
            public func createAppPriceFactory(
                body: CreateAppPriceFactoryRequestSchema,
                onResponse: @escaping (_ response: CreateAppPriceFactoryResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/price-factory",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get price factory
            * Description: This API allows to get price factories.
            **/
            public func getAppPriceFactories(
                isActive: Bool?,
                factoryTypeId: String?,
                code: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: GetAppPriceFactoryResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = factoryTypeId {
    
    xQuery["factory_type_id"] = value
    
}


if let value = code {
    
    xQuery["code"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/price-factory",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAppPriceFactoryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get price factory
            * Description: This API allows to get price factory.
            **/
            public func getAppPriceFactory(
                id: String,
                
                onResponse: @escaping (_ response: AppPriceFactory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppPriceFactory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to update price factory.
            **/
            public func editAppPriceFactory(
                id: String,
                body: EditAppPriceFactoryRequestSchema,
                onResponse: @escaping (_ response: AppPriceFactory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppPriceFactory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to add products in price factory.
            **/
            public func addProductsInPriceFactoryByZoneId(
                id: String,
                body: CreatePriceFactoryProductRequest,
                onResponse: @escaping (_ response: CreatePriceFactoryProductResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/products",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePriceFactoryProductResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to get products in price factory.
            **/
            public func getProductsInPriceFactoryByZoneId(
                id: String,
                zoneId: String,
                itemId: Double?,
                q: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["zone_id"] = zoneId



if let value = itemId {
    
    xQuery["item_id"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/products",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to create bulk job for adding products in price factory.
            **/
            public func createProductPriceFactoryBulkJob(
                id: String,
                body: CreateAppPriceFactoryProductBulkJobRequest,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to poll bulk job for adding products in price factory.
            **/
            public func pollProductPriceFactoryBulkJob(
                id: String,
                jobId: String,
                
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobPollResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/poll/\(jobId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobPollResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to validate bulk job for adding products in price factory.
            **/
            public func validateProductPriceFactoryBulkJob(
                id: String,
                jobId: String,
                body: CreateAppPriceFactoryProductBulkJobRequest,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobValidateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/bulk/\(jobId)/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobValidateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to process bulk job for adding products in price factory.
            **/
            public func processProductPriceFactoryBulkJob(
                id: String,
                jobId: String,
                body: CreateAppPriceFactoryProductBulkJobRequest,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductBulkJobResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/bulk/\(jobId)/process",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductBulkJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to export products in price factory.
            **/
            public func exportProductsInPriceFactory(
                id: String,
                body: CreateAppPriceFactoryProductExportJobRequest,
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductExportJobResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/export",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductExportJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows to poll job for adding products in price factory.
            **/
            public func pollPriceFactoryJobs(
                id: String,
                
                onResponse: @escaping (_ response: CreateAppPriceFactoryProductExportJobPollResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/priceFactory/\(id)/poll",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAppPriceFactoryProductExportJobPollResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get product prices
            * Description: This API allows to get product prices.
            **/
            public func getAppProductPrices(
                itemIds: [Int]?,
                factoryTypeIds: [String]?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: ProductPrices?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = itemIds {
    
    xQuery["item_ids"] = value
    
}


if let value = factoryTypeIds {
    
    xQuery["factory_type_ids"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/product-prices",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ProductPrices.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: List search synonyms for an application
            * Description: This view allows you to list down the available synonyms for an application
            **/
            public func getSynonyms(
                id: String?,
                name: String?,
                type: String?,
                
                onResponse: @escaping (_ response: SynonymListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = id {
    
    xQuery["id"] = value
    
}


if let value = name {
    
    xQuery["name"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonyms",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: create oneway/ twoway search synonyms for an application
            * Description: This view allows you to create search synonyms for an application
            **/
            public func createSynonyms(
                body: SynonymCreateRequestSchema,
                onResponse: @escaping (_ response: SynonymCreateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonyms",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymCreateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update synonym attributes for an application
            * Description: This view allows you to modify synonym attributes for a particular application
            **/
            public func updateSynonyms(
                id: String,
                body: SynonymCreateRequestSchema,
                onResponse: @escaping (_ response: SynonymUpdateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonym/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymUpdateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete synonym for an application.
            * Description: This view allows you to delete synonym for an application
            **/
            public func deleteSynonym(
                id: String,
                
                onResponse: @escaping (_ response: SynonymDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/synonym",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This API allows you to start a job creates a csv file containing all the synonyms for that application
            **/
            public func exportSynonyms(
                
                onResponse: @escaping (_ response: SynonymExportResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/export",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymExportResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: This api return you the sample file for bulk synonyms upload
            **/
            public func sampleBulkSynonymsFile(
                type: String,
                
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["type"] = type



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/sample",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "text/csv",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Upload csv/xls/xlsx file with synonyms
            * Description: This API allows you to upload a list of one-way/two-way synonyms
            **/
            public func uploadSynonyms(
                body: SynonymUploadRequestSchema,
                onResponse: @escaping (_ response: SynonymUploadResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymUploadResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Validate csv/xls/xlsx file with synonyms
            * Description: This view allows you to validate the file uploaded for synonyms
            **/
            public func validateBulkSynonyms(
                body: SynonymBulkValidateRequestSchema,
                onResponse: @escaping (_ response: SynonymBulkValidateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/validate",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymBulkValidateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: process csv/xls/xlsx file with synonyms and insert onto db
            * Description: This view allows you to process a list of one-way/two-way synonyms
            **/
            public func processBulkSynonyms(
                body: SynonymBulkProcessRequestSchema,
                onResponse: @escaping (_ response: SynonymBulkProcessResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/bulk/process",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymBulkProcessResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: poll a particular synonym bulk job for status
            * Description: This view allows you to poll for the status of the respective bulk upload job
            **/
            public func pollBulkSynonyms(
                id: String,
                
                onResponse: @escaping (_ response: SynonymBulkPollResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/catalog/v1.0/company/\(companyId)/application/\(applicationId)/search/poll/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SynonymBulkPollResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
        }
        
        
            
        public class Communication {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get event subscriptions.
            * Description: Retrieve a list of event subscriptions related to communication.
            **/
            public func getEventSubscriptions(
                pageNo: Int?,
                pageSize: Int?,
                populate: String?,
                
                onResponse: @escaping (_ response: EventSubscriptions?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = populate {
    
    xQuery["populate"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptions.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getEventSubscriptions
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getEventSubscriptionsPaginator(
                pageSize: Int?,
                populate: String?
                
                ) -> Paginator<EventSubscriptions> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<EventSubscriptions>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getEventSubscriptions(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            populate: populate
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func createEventSubscriptions(
                body: SubscriptionsObject,
                onResponse: @escaping (_ response: EventSubscriptionsBulkUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptionsBulkUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Trigger campaign job.
            * Description: Initiate a job to execute a communication campaign.
            **/
            public func triggerCampaignJob(
                body: TriggerJobRequest,
                onResponse: @escaping (_ response: TriggerJobResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/trigger-job",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TriggerJobResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email providers.
            * Description: Retrieve a list of email communication providers.
            **/
            public func getEmailProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: EmailProviders?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getEmailProviders
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getEmailProvidersPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?
                
                ) -> Paginator<EmailProviders> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<EmailProviders>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getEmailProviders(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create email provider.
            * Description: Generate and add a new email communication provider.
            **/
            public func createEmailProvider(
                body: EmailProviderReq,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email provider by ID.
            * Description: Retrieve detailed information about a specific email communication provider.
            **/
            public func getEmailProviderById(
                id: String,
                
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update email provider by ID.
            * Description: Modify the settings of a specific email communication provider.
            **/
            public func updateEmailProviderById(
                id: String,
                body: EmailProviderReq,
                onResponse: @escaping (_ response: EmailProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete email provider by ID.
            * Description: Remove a specific email communication provider from the platform.
            **/
            public func deleteEmailProviderById(
                id: String,
                
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get global providers.
            * Description: Retrieve a list of global communication providers.
            **/
            public func getGlobalProviders(
                
                onResponse: @escaping (_ response: GlobalProviders?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/global-providers",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get dummy data sources metadata.
            * Description: Retrieve metadata information about dummy data sources.
            **/
            public func getDummyDatasourcesMeta(
                id: Int,
                
                onResponse: @escaping (_ response: DummyDatasourcesMeta?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasource/dummy-data-source-meta",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyDatasourcesMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get dummy data sources.
            * Description: Retrieve a list of dummy data sources for testing.
            **/
            public func getDummyDatasources(
                
                onResponse: @escaping (_ response: [DummyDatasources]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasource/dummy-data-sources",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DummyDatasources].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default SMS providers.
            * Description: Retrieve the default SMS communication providers.
            **/
            public func getDefaultSmsProviders(
                
                onResponse: @escaping (_ response: [DefaultSmsProviders]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/default-providers",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([DefaultSmsProviders].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get audiences.
            * Description: Audience is used to import CSV files containing emails, phone numbers, and other variables in order to populate email/SMS templates for bulk delivery via a Campaign.
            **/
            public func getAudiences(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: Audiences?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audiences.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAudiences
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAudiencesPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?
                
                ) -> Paginator<Audiences> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<Audiences>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAudiences(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create audience.
            * Description: Add audience which is used to import CSV files containing emails, phone numbers, and other variables in order to populate email/SMS templates for bulk delivery via a Campaign. 
            **/
            public func createAudience(
                body: AudienceReq,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get audience by ID.
            * Description: Retrieve detailed information about a specific custom communication audience.
            **/
            public func getAudienceById(
                id: String,
                
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update audience by ID.
            * Description: Modify the settings of a specific custom communication audience.
            **/
            public func updateAudienceById(
                id: String,
                body: AudienceReq,
                onResponse: @escaping (_ response: Audience?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Audience.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete audience by ID.
            * Description: Remove a specific custom communication audience.
            **/
            public func deleteAudienceById(
                id: String,
                body: AudienceReq,
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/datasources/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application providers.
            * Description: Modify provider information for the platform.
            **/
            public func updateAppProviders(
                body: AppProviderReq,
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/update-provider",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application providers.
            * Description: Retrieve a list of providers associated with the platform.
            **/
            public func getAppProviders(
                
                onResponse: @escaping (_ response: AppProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/app-provider/get-provider",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get system email templates.
            * Description: Retrieve system-defined email communication templates.
            **/
            public func getSystemEmailTemplates(
                
                onResponse: @escaping (_ response: [SystemEmailTemplate]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/system-templates",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([SystemEmailTemplate].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get subscribed email templates.
            * Description: Retrieve email communication templates that are subscribed to.
            **/
            public func getSubscribedEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: String?,
                
                onResponse: @escaping (_ response: SubscribedEmailTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SubscribedEmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get system SMS templates.
            * Description: Retrieve system-defined SMS communication templates.
            **/
            public func getSystemSmsTemplates(
                
                onResponse: @escaping (_ response: [SystemSmsTemplates]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/system-templates",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([SystemSmsTemplates].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS templates.
            * Description: Retrieve a list of available SMS communication templates.
            **/
            public func getSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: SmsTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getSmsTemplates
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getSmsTemplatesPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?
                
                ) -> Paginator<SmsTemplates> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<SmsTemplates>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getSmsTemplates(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create SMS template.
            * Description: Add a new SMS communication template.
            **/
            public func createSmsTemplate(
                body: SmsTemplateReq,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get jobs.
            * Description: Retrieve a list of communication jobs.
            **/
            public func getJobs(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: Jobs?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Jobs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getJobs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getJobsPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?
                
                ) -> Paginator<Jobs> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<Jobs>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getJobs(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create jobs
            * Description: Create jobs
            **/
            public func createJobs(
                body: CreateJobsReq,
                onResponse: @escaping (_ response: CreateJobsRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/jobs",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateJobsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get job logs.
            * Description: Retrieve logs and details related to communication jobs.
            **/
            public func getJobLogs(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: JobLogs?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/jobs/logs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(JobLogs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getJobLogs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getJobLogsPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?
                
                ) -> Paginator<JobLogs> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<JobLogs>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getJobLogs(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get SMS providers.
            * Description: Retrieve a list of SMS communication providers.
            **/
            public func getSmsProviders(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: SmsProviders?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProviders.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create SMS provider.
            * Description: Add a new SMS communication provider.
            **/
            public func createSmsProvider(
                body: SmsProviderReq,
                onResponse: @escaping (_ response: SmsProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS provider by ID.
            * Description: Retrieve detailed information about a specific SMS communication provider.
            **/
            public func getSmsProviderById(
                id: String,
                
                onResponse: @escaping (_ response: SmsProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update SMS provider by ID.
            * Description: Modify specific SMS communication provider.
            **/
            public func updateSmsProviderById(
                id: String,
                body: SmsProviderReq,
                onResponse: @escaping (_ response: SmsProvider?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsProvider.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete SMS provider by ID.
            * Description: Remove a specific SMS communication provider.
            **/
            public func deleteSmsProviderById(
                id: String,
                
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/providers/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email templates.
            * Description: Retrieve a list of available email communication templates.
            **/
            public func getEmailTemplates(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: String?,
                
                onResponse: @escaping (_ response: EmailTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getEmailTemplates
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getEmailTemplatesPaginator(
                pageSize: Int?,
                sort: String?,
                query: String?
                
                ) -> Paginator<EmailTemplates> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<EmailTemplates>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getEmailTemplates(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create email template.
            * Description: Generate and add a new email communication template.
            **/
            public func createEmailTemplate(
                body: EmailTemplateReq,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get email template by ID.
            * Description: Retrieve detailed information about a specific email communication template.
            **/
            public func getEmailTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update email template by ID.
            * Description: Modify the content and settings of a specific email communication template.
            **/
            public func updateEmailTemplateById(
                id: String,
                body: EmailTemplateReq,
                onResponse: @escaping (_ response: EmailTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EmailTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete email template by ID.
            * Description: Email templates are predefined formats linked to various events for delivering messages to users. Remove a specific email communication template by its ID.
            **/
            public func deleteEmailTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/email/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SMS template by ID.
            * Description: Retrieve detailed information about a specific SMS communication template.
            **/
            public func getSmsTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update SMS template by ID.
            * Description: Modify the content and settings of a specific SMS communication template.
            **/
            public func updateSmsTemplateById(
                id: String,
                body: SmsTemplateReq,
                onResponse: @escaping (_ response: SmsTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SmsTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete SMS template by ID.
            * Description: Remove a specific SMS communication template.
            **/
            public func deleteSmsTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: BasicDelete?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/templates/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BasicDelete.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get campaigns.
            * Description: Retrieve a list of communication campaigns.
            **/
            public func getCampaigns(
                query: String?,
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                
                onResponse: @escaping (_ response: Campaigns?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = query {
    
    xQuery["query"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaigns.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create campaign.
            * Description: Add a new communication campaign.
            **/
            public func createCampaign(
                body: CampaignReq,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get campaign by ID.
            * Description: Retrieve detailed information about a specific communication campaign.
            **/
            public func getCampaignById(
                id: String,
                
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update campaign by ID.
            * Description: Modify the settings of a specific communication campaign.
            **/
            public func updateCampaignById(
                id: String,
                body: CampaignReq,
                onResponse: @escaping (_ response: Campaign?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/campaigns/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Campaign.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get campaign statistics by ID.
            * Description: Retrieve statistical data for a specific communication campaign.
            **/
            public func getStatsOfCampaignById(
                id: String,
                
                onResponse: @escaping (_ response: GetStats?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/campaigns/getStats/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStats.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions by bulk
            * Description: Create event subscriptions by bulk
            **/
            public func createEventSubscriptionsByBulk(
                body: EventSubscriptionsBulkUpdateRequest,
                onResponse: @escaping (_ response: [EventSubscriptionsBulkUpdateResponse]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/event-subscriptions/bulkUpdate",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([EventSubscriptionsBulkUpdateResponse].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get subscribed SMS templates.
            * Description: Retrieve SMS communication templates that are subscribed to.
            **/
            public func getSubscribedSmsTemplates(
                pageNo: Int?,
                pageSize: Int?,
                query: String?,
                
                onResponse: @escaping (_ response: SubscribedSmsTemplates?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sms/subscribedTemplates",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SubscribedSmsTemplates.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get global variables.
            * Description: Retrieve global variables used in communication.
            **/
            public func getGlobalVariables(
                
                onResponse: @escaping (_ response: GlobalVariablesGetResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Post global variables.
            * Description: Update and post global variables for communication.
            **/
            public func postGlobalVariables(
                body: GlobalVariablesReq,
                onResponse: @escaping (_ response: GlobalVariablesPostResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/global-variables",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GlobalVariablesPostResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Send OTP.
            * Description: Send a one-time password (OTP) for authentication or verification.
            **/
            public func sendOtp(
                ci: Bool?,
                body: SendOtpCommsReq,
                onResponse: @escaping (_ response: SendOtpCommsRes?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = ci {
    
    xQuery["ci"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/send-otp-comms",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendOtpCommsRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Verify OTP.
            * Description: Verify the one-time password (OTP) for authentication or verification.
            **/
            public func verfiyOtp(
                body: VerifyOtpCommsReq,
                onResponse: @escaping (_ response: VerifyOtpCommsSuccessRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/verify-otp-comms",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(VerifyOtpCommsSuccessRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get otp-configuration, if not present in db then return default settings
            * Description: Get otp-configuration
            **/
            public func getOtpConfiguration(
                
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update/insert otp configurations
            * Description: Update otp-configuration
            **/
            public func updateOtpConfiguration(
                
                onResponse: @escaping (_ response: OtpConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/otp/otp-configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OtpConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get communication logs.
            * Description: Retrieve logs and records of communication activities.
            **/
            public func getCommunicationLogs(
                pageNo: Int?,
                pageSize: Int?,
                sort: String?,
                query: [String: Any]?,
                
                onResponse: @escaping (_ response: Logs?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = sort {
    
    xQuery["sort"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/log",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Logs.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getCommunicationLogs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getCommunicationLogsPaginator(
                pageSize: Int?,
                sort: String?,
                query: [String: Any]?
                
                ) -> Paginator<Logs> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<Logs>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getCommunicationLogs(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            sort: sort,
                            query: query
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get event subscriptions by id
            * Description: Get event subscriptions by id
            **/
            public func getEventSubscriptionsById(
                populate: String?,
                id: String,
                
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = populate {
    
    xQuery["populate"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/eventSubscriptions/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func editEventSubscriptions(
                id: String,
                body: SubscriptionsObjectRequest,
                onResponse: @escaping (_ response: EventSubscriptionsBulkUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/eventSubscriptions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscriptionsBulkUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create event subscriptions
            * Description: Create event subscriptions
            **/
            public func deleteEventSubscriptionsById(
                id: String,
                
                onResponse: @escaping (_ response: EventSubscription?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/event/eventSubscriptions/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EventSubscription.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get N sample records in CSV 
            * Description: Retrieve a specified number of sample records from a CSV data source using a GET request.
            **/
            public func getNSampleRecordsFromCsvByGet(
                count: Int?,
                header: Bool?,
                url: String?,
                
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = count {
    
    xQuery["count"] = value
    
}


if let value = header {
    
    xQuery["header"] = value
    
}


if let value = url {
    
    xQuery["url"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get N sample records from CSV.
            * Description: Retrieve a specified number of sample records from a CSV data source.
            **/
            public func getNSampleRecordsFromCsv(
                body: GetNRecordsCsvReq,
                onResponse: @escaping (_ response: GetNRecordsCsvRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/sources/get-n-records",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetNRecordsCsvRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Send communication synchronously.
            * Description: Initiate and send communication in real-time.
            **/
            public func sendCommunicationSynchronously(
                body: EngineRequest,
                onResponse: @escaping (_ response: SendInstantResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-instant",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SendInstantResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Send communication asynchronously.
            * Description: Initiate and send communication with the option for asynchronous processing.
            **/
            public func sendCommunicationAsynchronously(
                body: EngineRequest,
                onResponse: @escaping (_ response: EngineResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/communication/v1.0/company/\(companyId)/application/\(applicationId)/engine/send-async",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EngineResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Configuration {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get build configuration.
            * Description: Retrieve latest build configuration, such as app name, landing page image, splash image used in a mobile build.
            **/
            public func getBuildConfig(
                platformType: String,
                
                onResponse: @escaping (_ response: MobileAppConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MobileAppConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update build configuration.
            * Description: Modify the existing build configuration, such as app name, landing page image, splash image used in a mobile build.
            **/
            public func updateBuildConfig(
                platformType: String,
                body: MobileAppConfigRequest,
                onResponse: @escaping (_ response: MobileAppConfiguration?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MobileAppConfiguration.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get previous versions.
            * Description: Retrieve version details of the app, this includes the build status, build date, version name, latest version, and a lot more.
            **/
            public func getPreviousVersions(
                platformType: String,
                
                onResponse: @escaping (_ response: BuildVersionHistory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/build/\(platformType)/versions",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BuildVersionHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application features.
            * Description: Shows feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func getAppFeatures(
                
                onResponse: @escaping (_ response: AppFeatureResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeatureResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application features.
            * Description: Modify the feature configuration of sales channel websites, such as product detail, landing page, options in the login/registration screen, home page, listing page, reward points, communication opt-in, cart options and many more.
            **/
            public func updateAppFeatures(
                body: AppFeatureRequest,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Modify application features.
            * Description: Update features of application
            **/
            public func modifyAppFeatures(
                body: AppFeatureRequest,
                onResponse: @escaping (_ response: AppFeature?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/feature",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppFeature.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application basic details.
            * Description: Shows basic sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func getAppBasicDetails(
                
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application basic details.
            * Description: Modify sales channel details like name, description, logo, domain, company ID, and other related information.
            **/
            public func updateAppBasicDetails(
                body: ApplicationDetail,
                onResponse: @escaping (_ response: ApplicationDetail?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/detail",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationDetail.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application contact information.
            * Description: Fetch data such as social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the application.
            **/
            public func getAppContactInfo(
                
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application contact information.
            * Description: Modify the social links, copyright text, business highlights, address and contact information of the company/seller/brand operating the application.
            **/
            public func updateAppContactInfo(
                body: ApplicationInformation,
                onResponse: @escaping (_ response: ApplicationInformation?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/information",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInformation.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application API tokens.
            * Description: Retrieve the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google, and Facebook auth.
            **/
            public func getAppApiTokens(
                
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application API tokens.
            * Description: Add or edit the tokens used for integrating Firebase, MoEngage, Segment, GTM, Freshchat, Safetynet, Google Map, Google and Facebook auth.
            **/
            public func updateAppApiTokens(
                body: TokenResponse,
                onResponse: @escaping (_ response: TokenResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/token",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TokenResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application companies.
            * Description: Retrieve info of all the companies (e.g. name, uid, and company type) whose inventory is fetched into the current sales channel application
            **/
            public func getAppCompanies(
                uid: Int?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: CompaniesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = uid {
    
    xQuery["uid"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/companies",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompaniesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppCompanies
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppCompaniesPaginator(
                uid: Int?,
                pageSize: Int?
                
                ) -> Paginator<CompaniesResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<CompaniesResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppCompanies(
                            
                            uid: uid,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get application stores.
            * Description: Retrieve information of all the companies (e.g. uid, name, display name, store type, store code and company id) whose inventory is fetched into the current sales channel application
            **/
            public func getAppStores(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: StoresResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/stores",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAppStores
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAppStoresPaginator(
                pageSize: Int?
                
                ) -> Paginator<StoresResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<StoresResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAppStores(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get inventory configuration.
            * Description: Retrieve configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func getInventoryConfig(
                
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update inventory configuration.
            * Description: Modify the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func updateInventoryConfig(
                body: ApplicationInventory,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Partially update inventory configuration.
            * Description: Partially update the configuration details of authentication, inventory, article assignment rules, reward points, cart, payment, order, logistics, etc.
            **/
            public func partiallyUpdateInventoryConfig(
                body: AppInventoryPartialUpdate,
                onResponse: @escaping (_ response: ApplicationInventory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationInventory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Application configuration.
            * Description: Retrieve configuration details of inventory pricing_strategy.
            **/
            public func getApplicationConfiguration(
                
                onResponse: @escaping (_ response: OwnerAppConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/ownerApplication/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OwnerAppConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application currency configuration.
            * Description: Retrieve a list of currencies supported in the current sales channel. Moreover, get the cuurency that is set as the default one in the application.
            **/
            public func getAppCurrencyConfig(
                
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update application currency configuration.
            * Description: Modify currency configuration settings for the application. Add and edit the currencies supported in the application. Initially, INR will be enabled by default.
            **/
            public func updateAppCurrencyConfig(
                body: AppSupportedCurrency,
                onResponse: @escaping (_ response: AppSupportedCurrency?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppSupportedCurrency.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get supported currencies.
            * Description: Retrieve a list of supported currencies for the application. A list of currencies allowed in the current application. Moreover, get the name, code, symbol, and the decimal digits of the currencies.
            **/
            public func getAppSupportedCurrency(
                
                onResponse: @escaping (_ response: AppCurrencyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/currency/supported",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppCurrencyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get ordering store by filter
            * Description: Use this API to use filters and retrieve the details of the deployment stores (the selling locations where the application will be utilised for placing orders).
            **/
            public func getOrderingStoresByFilter(
                pageNo: Int?,
                pageSize: Int?,
                body: FilterOrderingStoreRequest,
                onResponse: @escaping (_ response: OrderingStores?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v2.0/company/\(companyId)/application/\(applicationId)/ordering-store/stores/filter",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStores.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getOrderingStoresByFilter
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getOrderingStoresByFilterPaginator(
                pageSize: Int?,
                
                body: FilterOrderingStoreRequest) -> Paginator<OrderingStores> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<OrderingStores>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getOrderingStoresByFilter(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,body: body
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update ordering store configuration.
            * Description: Modify configuration settings for ordering stores. Edit the details of the deployment stores (the selling locations where the application will be utilised for placing orders)
            **/
            public func updateOrderingStoreConfig(
                body: OrderingStoreConfig,
                onResponse: @escaping (_ response: DeploymentMeta?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeploymentMeta.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get ordering store configuration.
            * Description: Retrieve configuration settings for ordering stores. Retrieve the details of the deployment stores (the selling locations where the application will be utilised for placing orders).
            **/
            public func getOrderingStoreConfig(
                
                onResponse: @escaping (_ response: OrderingStoreConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoreConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get deployment stores
            * Description: Use this API to retrieve the details of all stores access given to the staff member (the selling locations where the application will be utilized for placing orders).
            **/
            public func getStaffOrderingStores(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                
                onResponse: @escaping (_ response: OrderingStoresResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v2.0/company/\(companyId)/application/\(applicationId)/ordering-store/staff-stores",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderingStoresResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getStaffOrderingStores
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getStaffOrderingStoresPaginator(
                pageSize: Int?,
                q: String?
                
                ) -> Paginator<OrderingStoresResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<OrderingStoresResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getStaffOrderingStores(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            ,
                            q: q
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get an Ordering Store signed cookie on selection of ordering store.
            * Description: Use this API to get an Ordering Store signed cookie upon selecting an ordering store. This will be used by the cart service to verify a coupon against the selected ordering store in cart.
            **/
            public func getOrderingStoreCookie(
                body: OrderingStoreSelectRequest,
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Unset the Ordering Store signed cookie.
            * Description: Use this API to unset the Ordering Store cookie upon changing the sales channel, by its domain URL, in the Universal Fynd Store app.
            **/
            public func removeOrderingStoreCookie(
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/ordering-store/select",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get domains.
            * Description: Get list of domains. 
            **/
            public func getDomains(
                
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add domain.
            * Description: Add a new domain. Add a new domain to current sales channel, including pre-defined domain (free domain) or custom domain (owned by the brand)
            **/
            public func addDomain(
                body: DomainAddRequest,
                onResponse: @escaping (_ response: Domain?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Domain.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove domain by ID.
            * Description: Delete a specific domain from the application. Delete a domain (secondary or shortlink domain) added to a sales channel. It will disable user's access to website, shared links, and other features associated with this domain.
            **/
            public func removeDomainById(
                id: String,
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Change domain type.
            * Description: Modify the type of a specific domain. Primary domain is used as the URL of your website. Short link domain is comparatively smaller and used while generating short links.
            **/
            public func changeDomainType(
                body: UpdateDomainTypeRequest,
                onResponse: @escaping (_ response: DomainsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/set-domain",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get domain status.
            * Description: Retrieve the status of a specific domain. Shows if the A records and TXT records of the domain correctly points to appropriate IP on Fynd Servers.
            **/
            public func getDomainStatus(
                body: DomainStatusRequest,
                onResponse: @escaping (_ response: DomainStatusResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)/domain/domain-status",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DomainStatusResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get application by ID.
            * Description: Retrieve detailed information about a specific application. Use application ID to get the current sales channel details which includes channel name, description, banner, logo, favicon, domain details, token, etc.
            **/
            public func getApplicationById(
                
                onResponse: @escaping (_ response: Application?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/configuration/v1.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Application.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }
        
        
            
        public class Content {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get announcements list.
            * Description: Retrieve a list of announcements.
            **/
            public func getAnnouncementsList(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: GetAnnouncementListSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAnnouncementListSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getAnnouncementsList
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getAnnouncementsListPaginator(
                pageSize: Int?
                
                ) -> Paginator<GetAnnouncementListSchema> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<GetAnnouncementListSchema>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getAnnouncementsList(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create announcement.
            * Description: Generate and add a new announcement.
            **/
            public func createAnnouncement(
                body: AdminAnnouncementSchema,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get announcement by ID.
            * Description: Retrieve detailed information about a specific announcement.
            **/
            public func getAnnouncementById(
                announcementId: String,
                
                onResponse: @escaping (_ response: AdminAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AdminAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update announcement.
            * Description: Modify the content and settings of a specific announcement.
            **/
            public func updateAnnouncement(
                announcementId: String,
                body: AdminAnnouncementSchema,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update announcement schedule.
            * Description: Modify the scheduling of a specific announcement.
            **/
            public func updateAnnouncementSchedule(
                announcementId: String,
                body: ScheduleSchema,
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete announcement.
            * Description: Remove a specific announcement.
            **/
            public func deleteAnnouncement(
                announcementId: String,
                
                onResponse: @escaping (_ response: CreateAnnouncementSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/announcements/\(announcementId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateAnnouncementSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create blog.
            * Description: Generate and add a new blog.
            **/
            public func createBlog(
                body: BlogRequest,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get blogs.
            * Description: Retrieve a list of available blogs.
            **/
            public func getBlogs(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: BlogGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getBlogs
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getBlogsPaginator(
                pageSize: Int?
                
                ) -> Paginator<BlogGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<BlogGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getBlogs(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update blog.
            * Description: Modify the content and settings of a specific blog.
            **/
            public func updateBlog(
                id: String,
                body: BlogRequest,
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete blog.
            * Description: Remove a specific blog.
            **/
            public func deleteBlog(
                id: String,
                
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get components of a blog
            * Description: Use this API to retrieve the components of a blog, such as title, slug, feature image, content, schedule, publish status, author, etc.
            **/
            public func getComponentById(
                slug: String,
                
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add data loader.
            * Description: Create and add a new data loader.
            **/
            public func addDataLoader(
                body: DataLoaderSchema,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get data loaders.
            * Description: Retrieve a list of data loaders.
            **/
            public func getDataLoaders(
                
                onResponse: @escaping (_ response: DataLoadersSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoadersSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get data loaders api specs.
            * Description: Retrieve a list of data loaders api specs.
            **/
            public func getDataLoaderApiSpecs(
                dataLoader: String,
                
                onResponse: @escaping (_ response: DataLoadersApiSpecSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["data_loader"] = dataLoader



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/data-loader/api-spec",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoadersApiSpecSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete data loader.
            * Description: Remove a specific data loader.
            **/
            public func deleteDataLoader(
                dataLoaderId: String,
                
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(dataLoaderId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Edit data loader.
            * Description: Modify the settings of a specific data loader.
            **/
            public func editDataLoader(
                dataLoaderId: String,
                body: DataLoaderSchema,
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(dataLoaderId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all the data loaders in an application by service name
            * Description: Use this to get all data loaders of an application by service name
            **/
            public func getDataLoadersByService(
                serviceName: String,
                
                onResponse: @escaping (_ response: DataLoaderItemsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/service/\(serviceName)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderItemsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Select data loader.
            * Description: Choose and set a data loader for use.
            **/
            public func selectDataLoader(
                dataLoaderId: String,
                
                onResponse: @escaping (_ response: DataLoaderResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(dataLoaderId)/select",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Reset data loader.
            * Description: Clear and reset data loader settings.
            **/
            public func resetDataLoader(
                service: String,
                operationId: String,
                
                onResponse: @escaping (_ response: DataLoaderResetResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/dataLoader/\(service)/\(operationId)/reset",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DataLoaderResetResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQ categories.
            * Description: Retrieve a list of FAQ categories.
            **/
            public func getFaqCategories(
                
                onResponse: @escaping (_ response: GetFaqCategoriesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/categories",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoriesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQ category by slug or ID.
            * Description: Retrieve detailed information about a specific FAQ category.
            **/
            public func getFaqCategoryBySlugOrId(
                idOrSlug: String,
                
                onResponse: @escaping (_ response: GetFaqCategoryBySlugSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqCategoryBySlugSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create FAQ category.
            * Description: Generate and add a new FAQ category.
            **/
            public func createFaqCategory(
                body: CreateFaqCategoryRequestSchema,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update FAQ category.
            * Description: Modify the content and settings of a specific FAQ category.
            **/
            public func updateFaqCategory(
                id: String,
                body: UpdateFaqCategoryRequestSchema,
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete FAQ category.
            * Description: Remove a specific FAQ category.
            **/
            public func deleteFaqCategory(
                id: String,
                
                onResponse: @escaping (_ response: CreateFaqCategorySchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqCategorySchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQs by category ID or slug.
            * Description: Retrieve a list of FAQs within a specific category.
            **/
            public func getFaqsByCategoryIdOrSlug(
                idOrSlug: String,
                
                onResponse: @escaping (_ response: GetFaqSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(idOrSlug)/faqs",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetFaqSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add FAQ.
            * Description: Create and add a new FAQ.
            **/
            public func addFaq(
                categoryId: String,
                body: CreateFaqSchema,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update FAQ.
            * Description: Modify the content and settings of a specific FAQ.
            **/
            public func updateFaq(
                categoryId: String,
                faqId: String,
                body: CreateFaqSchema,
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete FAQ.
            * Description: Remove a specific FAQ.
            **/
            public func deleteFaq(
                categoryId: String,
                faqId: String,
                
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/category/\(categoryId)/faq/\(faqId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get FAQ by ID or slug.
            * Description: Retrieve detailed information about a specific FAQ.
            **/
            public func getFaqByIdOrSlug(
                idOrSlug: String,
                
                onResponse: @escaping (_ response: CreateFaqResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/faq/\(idOrSlug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateFaqResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Generate SEO title.
            * Description: Create an SEO-friendly title for content.
            **/
            public func generateSEOTitle(
                type: String,
                body: GenerateSEOContent,
                onResponse: @escaping (_ response: GeneratedSEOContent?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/generateSeo/\(type)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeneratedSEOContent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get landing pages.
            * Description: Retrieve a list of landing pages.
            **/
            public func getLandingPages(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: LandingPageGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getLandingPages
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getLandingPagesPaginator(
                pageSize: Int?
                
                ) -> Paginator<LandingPageGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<LandingPageGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getLandingPages(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create landing page.
            * Description: Generate and add a new landing page.
            **/
            public func createLandingPage(
                body: LandingPageSchema,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landing-page",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update landing page.
            * Description: Modify the content and settings of a specific landing page.
            **/
            public func updateLandingPage(
                id: String,
                body: LandingPageSchema,
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landingPage/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete landing page.
            * Description: Remove a specific landing page.
            **/
            public func deleteLandingPage(
                id: String,
                
                onResponse: @escaping (_ response: LandingPageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/landingPage/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(LandingPageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get legal related information for applicaiton
            * Description: Retrieve legal information and terms.
            **/
            public func getLegalInformation(
                
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update legal related information for application
            * Description: Modify legal information and terms.
            **/
            public func updateLegalInformation(
                body: ApplicationLegal,
                onResponse: @escaping (_ response: ApplicationLegal?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/legal",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationLegal.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get navigation items
            * Description: Retrieve a list of navigational elements.
            **/
            public func getNavigations(
                devicePlatform: String,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: NavigationGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["device_platform"] = devicePlatform



if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getNavigations
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getNavigationsPaginator(
                devicePlatform: String,
                pageSize: Int?
                
                ) -> Paginator<NavigationGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<NavigationGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getNavigations(
                            
                            devicePlatform: devicePlatform,
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create navigation items
            * Description: Generate and add a new navigation element.
            **/
            public func createNavigation(
                body: NavigationRequest,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default navigations.
            * Description: Retrieve default navigation elements.
            **/
            public func getDefaultNavigations(
                
                onResponse: @escaping (_ response: DefaultNavigationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/default",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultNavigationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get navigation by slug.
            * Description: Retrieve detailed information about a specific navigation element.
            **/
            public func getNavigationBySlug(
                slug: String,
                devicePlatform: String,
                
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["device_platform"] = devicePlatform



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(slug)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update navigation.
            * Description: Modify the content and settings of a specific navigation element.
            **/
            public func updateNavigation(
                id: String,
                body: NavigationRequest,
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete navigation.
            * Description: Remove a specific navigation element.
            **/
            public func deleteNavigation(
                id: String,
                
                onResponse: @escaping (_ response: NavigationSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/navigations/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(NavigationSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page meta.
            * Description: Retrieve metadata for a specific page.
            **/
            public func getPageMeta(
                
                onResponse: @escaping (_ response: PageMetaSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/meta",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageMetaSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page specification.
            * Description: Retrieve specifications and details for a specific page.
            **/
            public func getPageSpec(
                
                onResponse: @escaping (_ response: PageSpec?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/spec",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSpec.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create page preview.
            * Description: Generate and add a new page preview.
            **/
            public func createPagePreview(
                body: PageRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/preview",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update page preview.
            * Description: Modify the content and settings of a specific page preview.
            **/
            public func updatePagePreview(
                slug: String,
                body: PagePublishRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/publish/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update page.
            * Description: Modify and update the content of a page.
            **/
            public func updatePageV1(
                id: String,
                body: PageSchema,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete page.
            * Description: Remove a page from the platform.
            **/
            public func deletePage(
                id: String,
                
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add path redirection rules.
            * Description: Create and add rules for path redirection.
            **/
            public func addPathRedirectionRules(
                body: PathMappingSchema,
                onResponse: @escaping (_ response: CreatePathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get path redirection rules.
            * Description: Retrieve a list of path redirection rules.
            **/
            public func getPathRedirectionRules(
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: GetAllPathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/path-mappings",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetAllPathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get path redirection rule.
            * Description: Retrieve detailed information about a specific path redirection rule.
            **/
            public func getPathRedirectionRule(
                pathId: String,
                
                onResponse: @escaping (_ response: DeletPathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pathMappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeletPathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update path redirection rules.
            * Description: Modify settings for path redirection rules.
            **/
            public func updatePathRedirectionRules(
                pathId: String,
                body: PathMappingSchema,
                onResponse: @escaping (_ response: CreatePathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pathMappings/\(pathId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete path redirection rules.
            * Description: Remove specific path redirection rules.
            **/
            public func deletePathRedirectionRules(
                pathId: String,
                
                onResponse: @escaping (_ response: DeletPathMappingSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pathMappings/\(pathId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeletPathMappingSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SEO configuration for an application
            * Description: Retrieve configuration settings for SEO.
            **/
            public func getSEOConfiguration(
                
                onResponse: @escaping (_ response: SeoComponent?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update SEO configuration for an application
            * Description: Modify configuration settings for SEO.
            **/
            public func updateSEOConfiguration(
                body: SeoComponent,
                onResponse: @escaping (_ response: SeoSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Default SEO Markup schemas of an application
            * Description: Use this API to get the Default SEO Markup schema Templates setup for an application
            **/
            public func getDefaultSEOMarkupSchema(
                pageType: String?,
                
                onResponse: @escaping (_ response: DefaultSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageType {
    
    xQuery["page_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/default",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DefaultSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get SEO Markup schemas of an application
            * Description: Use this API to get all SEO Markup schema Templates setup for an application
            **/
            public func getSEOMarkupSchemas(
                title: String?,
                active: String?,
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: SeoSchemaComponent?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = title {
    
    xQuery["title"] = value
    
}


if let value = active {
    
    xQuery["active"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SeoSchemaComponent.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a SEO Markup schema Template of a page type for an application
            * Description: Use this API to create a SEO Markup schema Template inside an application
            **/
            public func createSEOMarkupSchema(
                body: SEOSchemaMarkupTemplateRequestBody,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a particular SEO Markup schema of an application using its id
            * Description: Use this API to get a existing SEO Markup schema an application
            **/
            public func getSEOMarkupSchema(
                schemaId: String,
                
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(schemaId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get a particular SEO Markup schema of an application using its id
            * Description: Use this API to edit an existing SEO Markup schema an application
            **/
            public func editSEOMarkupSchema(
                schemaId: String,
                body: SEOSchemaMarkupTemplateRequestBody,
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(schemaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete a particular SEO Markup schema of an application using its id
            * Description: Use this API to delete an existing SEO Markup schema an application
            **/
            public func deleteSEOMarkupSchema(
                schemaId: String,
                
                onResponse: @escaping (_ response: SEOSchemaMarkupTemplate?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/seo/schema/\(schemaId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SEOSchemaMarkupTemplate.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get support information.
            * Description: Retrieve information related to customer support.
            **/
            public func getSupportInformation(
                
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update support related info for an application
            * Description: Modify information related to customer support.
            **/
            public func updateSupportInformation(
                body: Support,
                onResponse: @escaping (_ response: Support?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/support",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Support.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create HTML tag.
            * Description: Create and add a new injectable tag.
            **/
            public func addInjectableTag(
                body: CreateTagRequestSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/add",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove HTML tag.
            * Description: Delete a specific injectable tag.
            **/
            public func removeInjectableTag(
                body: RemoveHandpickedSchema,
                onResponse: @escaping (_ response: TagDeleteSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/remove/handpicked",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagDeleteSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update HTML tag
            * Description: Modify settings for an injectable tag.
            **/
            public func editInjectableTag(
                tagId: String,
                body: UpdateHandpickedSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags/edit/handpicked/\(tagId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a tag
            * Description: Use this API to create the details of an tag. This includes the tag name, tag type (css/js), url and position of the tag.
            **/
            public func createInjectableTag(
                body: CreateTagRequestSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update a tag
            * Description: Use this API to edit the details of an existing tag. This includes the tag name, tag type (css/js), url and position of the tag.
            **/
            public func updateInjectableTag(
                body: CreateTagRequestSchema,
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete tags in application
            * Description: Use this API to delete all the existing tags at once.
            **/
            public func deleteAllInjectableTags(
                
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all the tags in an application
            * Description: Use this API to get all the CSS and JS injected in the application in the form of tags.
            **/
            public func getInjectableTags(
                
                onResponse: @escaping (_ response: TagsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/tags",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TagsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get blog by slug.
            * Description: Retrieve detailed information about a specific blog using its slug.
            **/
            public func getBlogBySlug(
                slug: String,
                
                onResponse: @escaping (_ response: BlogSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/blogs/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlogSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create page.
            * Description: Generate and add a new page to the platform.
            **/
            public func createPageV1(
                body: PageRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get pages.
            * Description: Retrieve a list of available pages.
            **/
            public func getPagesV1(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: PageGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getPagesV1
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getPagesV1Paginator(
                pageSize: Int?
                
                ) -> Paginator<PageGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<PageGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getPagesV1(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Create page.
            * Description: Generate and add a new page to the platform.
            **/
            public func createPage(
                body: PageRequest,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get pages.
            * Description: Retrieve a list of available pages.
            **/
            public func getPages(
                pageNo: Int?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: PageGetResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageGetResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getPages
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getPagesPaginator(
                pageSize: Int?
                
                ) -> Paginator<PageGetResponse> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<PageGetResponse>(pageSize: pageSize, type: "number")
                paginator.onPage = {
                    self.getPages(
                            
                            pageNo: paginator.pageNo
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageNo = (paginator.pageNo ?? 0) + 1
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Update page.
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                id: String,
                body: PageSchema,
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page by slug
            * Description: Use this API to retrieve the components of a page, such as its title, seo, publish status, feature image, tags, schedule, etc.
            **/
            public func getPageBySlugV1(
                slug: String,
                
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/pages/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page by slug
            * Description: Use this API to retrieve the components of a page, such as its title, seo, publish status, feature image, tags, schedule, etc.
            **/
            public func getPageBySlug(
                slug: String,
                
                onResponse: @escaping (_ response: PageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v2.0/company/\(companyId)/application/\(applicationId)/pages/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get custom field types
            * Description: Use this API to retrieve the custom field types 
            **/
            public func getAppCustomFieldTypes(
                
                onResponse: @escaping (_ response: MetafieldTypesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/types",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MetafieldTypesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get resources
            * Description: Use this API to retrieve the resources, such as products, collections, customers, selling locations, etc.
            **/
            public func getAppResources(
                
                onResponse: @escaping (_ response: ResourcesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/resources",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResourcesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom fields definitions
            * Description: Use this API to retrieve the definitions of custom fields.
            **/
            public func getAppCustomFieldDefinitions(
                pageNo: String,
                pageSize: String,
                resources: String?,
                types: String?,
                search: String?,
                
                onResponse: @escaping (_ response: ApplicationCustomFieldDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page_no"] = pageNo




    xQuery["page_size"] = pageSize



if let value = resources {
    
    xQuery["resources"] = value
    
}


if let value = types {
    
    xQuery["types"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationCustomFieldDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom field definition
            * Description: Use this API to create a custom field definition for your application.
            **/
            public func createAppCustomFieldDefinition(
                body: CustomFieldDefinitionRequestSchema,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom fields definition by id
            * Description: Use this API to retrieve the definitions of custom fields using definition_id.
            **/
            public func getAppCustomFieldDefinition(
                id: String,
                
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update custom field definition
            * Description: Use this API to update a custom field definition for your application.
            **/
            public func updateAppCustomFieldDefinition(
                id: String,
                body: CustomFieldDefinitionRequestSchema,
                onResponse: @escaping (_ response: CustomFieldDefinitionDetailResSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldDefinitionDetailResSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete custom fields definition.
            * Description: Use this API to delete the definitions of custom fields using definition_id. This will also delete related custom fields entries related to this definition.
            **/
            public func deleteAppCustomFieldDefinition(
                id: String,
                
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of custom fields of gives resource
            * Description: Use this API to retrieve the custom fields for given resource in param.
            **/
            public func getAppCustomFields(
                resource: String,
                
                onResponse: @escaping (_ response: CustomFieldsResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of custom fields of given resource and resource id
            * Description: Use this API to retrieve the custom fields for given resource in param.
            **/
            public func getAppCustomFieldsByResourceId(
                resource: String,
                resourceId: String,
                
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom field entries for gives resource and resource_id
            * Description: Use this API to create the custom field entry for given resource and resource_id in param.
            **/
            public func createAppCustomFieldByResourceId(
                resource: String,
                resourceId: String,
                body: CustomFieldRequestSchema,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom field entries for gives resource and resource_id
            * Description: Use this API to create the custom field entry for given resource and resource_id in param.
            **/
            public func updateAppCustomFieldByResourceId(
                resource: String,
                resourceId: String,
                body: CustomFieldRequestSchema,
                onResponse: @escaping (_ response: CustomFieldsResponseByResourceIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsResponseByResourceIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete custom fields of given resource and resource id
            * Description: Use this API to delete the custom fields for given resource in param.
            **/
            public func deleteAppCustomFieldsByResourceId(
                resource: String,
                resourceId: String,
                ids: String,
                
                onResponse: @escaping (_ response: CustomFieldsDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["ids"] = ids



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/\(resource)/\(resourceId)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldsDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch bulk import and export job list.
            * Description: Use this api to get list of jobs of bulk import and exports
            **/
            public func getAppCustomFieldJobs(
                page: String,
                pageSize: String,
                actionType: String,
                
                onResponse: @escaping (_ response: CustomFieldBulkEntry?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page"] = page




    xQuery["page_size"] = pageSize




    xQuery["action_type"] = actionType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metafields/jobs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFieldBulkEntry.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom object definition
            * Description: Use this API to create custom object defintion
            **/
            public func createAppCustomObjectDefinition(
                body: CustomObjectDefinitionRequestSchema,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom object definitions
            * Description: Use this API to retrieve the custom object definitions
            **/
            public func getAppCustomObjectDefinitions(
                pageNo: String,
                pageSize: String,
                search: String?,
                
                onResponse: @escaping (_ response: CustomObjectDefinitionsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page_no"] = pageNo




    xQuery["page_size"] = pageSize



if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get custom object definition by id
            * Description: Use this API to update a custom object definition for your application.
            **/
            public func getAppCustomObjectDefinition(
                id: String,
                
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update custom object definition
            * Description: Use this API to update a custom object definition for your application.
            **/
            public func updateAppCustomObjectDefinition(
                id: String,
                body: CustomObjectDefinitionUpdateRequestSchema,
                onResponse: @escaping (_ response: CustomObjectDefinitionSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete custom object definition by id
            * Description: Use this API to delete a custom object definition and related data for your application.
            **/
            public func deleteAppCustomObjectDefinition(
                id: String,
                
                onResponse: @escaping (_ response: CustomObjectDefinitionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/definitions/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectDefinitionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get list of custom objects
            * Description: Use this API to retrieve the custom objects.
            **/
            public func getAppCustomObjects(
                definitionId: String?,
                pageNo: String,
                pageSize: String,
                
                onResponse: @escaping (_ response: CustomObjectsSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = definitionId {
    
    xQuery["definition_id"] = value
    
}



    xQuery["page_no"] = pageNo




    xQuery["page_size"] = pageSize



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom object entries
            * Description: Use this API to create the custom object entry.
            **/
            public func createAppCustomObject(
                body: CustomObjectRequestSchema,
                onResponse: @escaping (_ response: CustomObjectSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom object details
            * Description: Use this API to retrieve the custom object details and their fields details and definitions and references.
            **/
            public func getAppCustomObject(
                id: String,
                
                onResponse: @escaping (_ response: CustomObjectByIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update custom object details
            * Description: Use this API to update a custom object detail for your application.
            **/
            public func updateAppCustomObject(
                id: String,
                body: CustomObjectRequestSchema,
                onResponse: @escaping (_ response: CustomObjectSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete custom object
            * Description: Use this API to delete the custom object entry by id. This will also delete related custom fields entries related to this custom object.
            **/
            public func deleteAppCustomObject(
                id: String,
                
                onResponse: @escaping (_ response: CustomDataDeleteSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomDataDeleteSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch bulk import and export job list.
            * Description: Use this api to get list of jobs of bulk import and exports
            **/
            public func getAppJobs(
                page: String,
                pageSize: String,
                actionType: String,
                
                onResponse: @escaping (_ response: CustomObjectBulkEntry?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page"] = page




    xQuery["page_size"] = pageSize




    xQuery["action_type"] = actionType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/jobs",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntry.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Bulk custom object entries upload
            * Description: Use this API to upload custom object entries
            **/
            public func importAppCustomObjectEntries(
                definitionId: String,
                body: CustomObjectBulkSchema,
                onResponse: @escaping (_ response: CustomObjectEntryBulkUploadResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/upload",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectEntryBulkUploadResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Initiate download for bulk custom object entries
            * Description: Use this api to initiate download of bulk entries
            **/
            public func exportAppCustomObjectEntries(
                definitionId: String,
                
                onResponse: @escaping (_ response: CustomObjectBulkEntryInitiateDownload?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/download",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomObjectBulkEntryInitiateDownload.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: download sample for custom object bulk entry
            * Description: Use this api to get sample csv file 
            **/
            public func sampleAppCustomObjectBulkEntry(
                definitionId: String,
                
                onResponse: @escaping (_ response: Data?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/content/v1.0/company/\(companyId)/application/\(applicationId)/metaobjects/bulk/\(definitionId)/sample",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "text/csv",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class FileStorage {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Application start upload.
            * Description: Start uploading a file from an application and returns a storage link in response.
            **/
            public func appStartUpload(
                namespace: String,
                body: StartRequest,
                onResponse: @escaping (_ response: StartResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/start",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StartResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Application complete upload.
            * Description: Finish uploading a file from an application.
            **/
            public func appCompleteUpload(
                namespace: String,
                body: StartResponse,
                onResponse: @escaping (_ response: CompleteResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/upload/complete",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CompleteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Application copy files.
            * Description: Copy files from an application to another location.
            **/
            public func appCopyFiles(
                sync: Bool?,
                body: CopyFiles,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = sync {
    
    xQuery["sync"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/uploads/copy",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Application browse files.
            * Description: Browse files within an application.
            **/
            public func appbrowse(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = page {
    
    xQuery["page"] = value
    
}


if let value = limit {
    
    xQuery["limit"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Browse Files
            * Description: Browse Files
            **/
            public func browsefiles(
                namespace: String,
                page: Int?,
                limit: Int?,
                search: String?,
                body: ExtensionSlug,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = page {
    
    xQuery["page"] = value
    
}


if let value = limit {
    
    xQuery["limit"] = value
    
}


if let value = search {
    
    xQuery["search"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/namespaces/\(namespace)/browse",
                    query: xQuery,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all the supported invoice pdf types
            * Description: Get all the supported invoice pdf types such as Invoice, Label, Delivery challan
            **/
            public func getPdfTypes(
                countryCode: String?,
                storeOs: Bool,
                
                onResponse: @escaping (_ response: InvoiceTypesResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = countryCode {
    
    xQuery["country_code"] = value
    
}



    xQuery["store_os"] = storeOs



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(InvoiceTypesResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all the supported invoice pdf types
            * Description: Get all the supported invoice pdf types such as Invoice, Label, Delivery challan
            **/
            public func savePdfTypes(
                body: UpdatePdfTypeRequest,
                onResponse: @escaping (_ response: PdfTypeIdResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfTypeIdResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get the pdf types of by id
            * Description: Get the pdf types of PDF formats for filter
            **/
            public func fetchPdfTypeById(
                id: String,
                
                onResponse: @escaping (_ response: PdfTypeIdResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfTypeIdResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: update the PDF type
            * Description: update the PDF type
            **/
            public func updatePdfTypeById(
                id: String,
                body: UpdatePdfTypeRequest,
                onResponse: @escaping (_ response: PdfTypeIdResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfTypeIdResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete Pdf Type
            * Description: Delete Pdf Type for invoice such as Invoice, Label, Deliver challan
            **/
            public func deletePdfType(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/types/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default PDF data.
            * Description: Retrieve default data for PDF generation.
            **/
            public func getDefaultPdfData(
                pdfTypeId: Int,
                countryCode: String?,
                
                onResponse: @escaping (_ response: DummyTemplateDataItems?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["pdf_type_id"] = pdfTypeId



if let value = countryCode {
    
    xQuery["country_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyTemplateDataItems.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: save Dummy pdf data for invoice or label
            * Description: Update Dummy pdf data for invoice or label
            **/
            public func savePdfPayloadData(
                body: savePdfPayload,
                onResponse: @escaping (_ response: DummyPayloadById?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyPayloadById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default PDF data.
            * Description: Retrieve default data for PDF generation.
            **/
            public func getPdfPayloadById(
                id: String,
                
                onResponse: @escaping (_ response: DummyPayloadById?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyPayloadById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Dummy pdf data for invoice or label
            * Description: Update Dummy pdf data for invoice or label
            **/
            public func updatePdfPayloadDataById(
                id: String,
                body: DummyPayloadById,
                onResponse: @escaping (_ response: DummyPayloadById?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyPayloadById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default PDF data.
            * Description: Retrieve default data for PDF generation.
            **/
            public func deletePdfPayloadById(
                id: String,
                
                onResponse: @escaping (_ response: DummyPayloadById?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/mapper/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DummyPayloadById.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update html template for invoice or label
            * Description: Update html template for invoice such as Invoice, Label, Deliver challan
            **/
            public func getConfigHtmlTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update HTML Template
            * Description: Update the HTML Template.
            **/
            public func updateHtmlTemplate(
                id: String,
                body: PdfConfig,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete html template for invoice or label
            * Description: delete html template for invoice such as Invoice, Label, Deliver challan
            **/
            public func deletePdfConfigTemplate(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get html template for sales channel
            * Description: Get default html template for invoice or label
            **/
            public func getDefaultHtmlTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                onResponse: @escaping (_ response: PdfConfigSuccess?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["pdf_type_id"] = pdfTypeId




    xQuery["format"] = format



if let value = countryCode {
    
    xQuery["country_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save HTML template.
            * Description: Store an HTML template.
            **/
            public func saveHtmlTemplate(
                body: PdfConfig,
                onResponse: @escaping (_ response: PdfConfigSaveSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigSaveSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get default PDF template.
            * Description: Retrieve the default PDF template.
            **/
            public func getDefaultPdfTemplate(
                pdfTypeId: Int,
                format: String,
                countryCode: String?,
                
                onResponse: @escaping (_ response: PdfDefaultTemplateSuccess?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["pdf_type_id"] = pdfTypeId




    xQuery["format"] = format



if let value = countryCode {
    
    xQuery["country_code"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/default-template",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfDefaultTemplateSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create HTML default template
            * Description: Create and save a new default HTML template
            **/
            public func createTemplate(
                body: CreateTemplate,
                onResponse: @escaping (_ response: PdfTemplateCreateSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/default-template",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfTemplateCreateSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Generate payment receipt.
            * Description: Generate Payment Receipt for Jiomart Digital
            **/
            public func generatePaymentReceipt(
                body: PaymentReceiptRequestBody,
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/payment-receipt",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get default html template for invoice or label
            * Description: get default html template for invoice such as Invoice, Label, Deliver challan
            **/
            public func fetchPdfDefaultTemplateById(
                id: String,
                
                onResponse: @escaping (_ response: PdfDefaultTemplateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/defaultTemplate/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfDefaultTemplateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update HTML default template
            * Description: Update and save default HTML template
            **/
            public func updateTemplate(
                id: String,
                body: UpdateTemplate,
                onResponse: @escaping (_ response: PdfConfigurationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/defaultTemplate/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PdfConfigurationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete html template for invoice or label
            * Description: delete html template for invoice such as Invoice, Label, Deliver challan
            **/
            public func deletePdfTemplate(
                id: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/assets/v1.0/company/\(companyId)/application/\(applicationId)/pdf/defaultTemplate/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
        }
        
        
            
        public class Lead {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Gets the list of Application level Tickets and/or ticket filters depending on query params
            * Description: Gets the list of Application level Tickets and/or ticket filters
            **/
            public func getNewTickets(
                items: Bool?,
                filters: Bool?,
                q: String?,
                status: String?,
                priority: String?,
                category: String?,
                
                onResponse: @escaping (_ response: TicketList?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = items {
    
    xQuery["items"] = value
    
}


if let value = filters {
    
    xQuery["filters"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


if let value = priority {
    
    xQuery["priority"] = value
    
}


if let value = category {
    
    xQuery["category"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Retreives ticket details of a application level ticket
            * Description: Retreives ticket details of a application level ticket with ticket ID
            **/
            public func getNewTicket(
                id: String,
                
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Edits ticket details of a application level ticket
            * Description: Edits ticket details of a application level ticket such as status, priority, category, tags, attachments, assigne & ticket content changes
            **/
            public func editNewTicket(
                id: String,
                body: EditTicketPayload,
                onResponse: @escaping (_ response: Ticket?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Ticket.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Create history for specific application level ticket
            * Description: Create history for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func createNewHistory(
                id: String,
                body: TicketHistoryPayload,
                onResponse: @escaping (_ response: TicketHistory?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistory.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Gets history list for specific application level ticket
            * Description: Gets history list for specific application level ticket, this history is seen on ticket detail page, this can be comment, log or rating.
            **/
            public func getNewTicketHistory(
                id: String,
                
                onResponse: @escaping (_ response: TicketHistoryList?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/ticket/\(id)/history",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(TicketHistoryList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom form.
            * Description: Retrieve information about a custom form which includes corresponding field details and any validation regex required against that field or not
            **/
            public func getCustomForm(
                slug: String,
                
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Edit custom form.
            * Description: Modify the content and assosciated settings of a custom form.
            **/
            public func editCustomForm(
                slug: String,
                body: EditCustomFormPayload,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a custom form
            * Description: Delete a custom form using it's slug
            **/
            public func deleteCustomForm(
                slug: String,
                
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form/\(slug)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get custom forms.
            * Description: Retrieve a list of available custom forms.
            **/
            public func getCustomForms(
                
                onResponse: @escaping (_ response: CustomFormList?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomFormList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create custom form.
            * Description: Create a new custom form for application users to fill
            **/
            public func createCustomForm(
                body: CreateCustomFormPayload,
                onResponse: @escaping (_ response: CustomForm?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/form",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomForm.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get Token to join a specific Video Room using it's unqiue name
            * Description: Get Token to join a specific Video Room using it's unqiue name, this Token is your ticket to Room and also creates your identity there.
            **/
            public func getNewTokenForVideoRoom(
                uniqueName: String,
                
                onResponse: @escaping (_ response: GetTokenForVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room/\(uniqueName)/token",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetTokenForVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get participants of a specific Video Room using it's unique name
            * Description: Get participants of a specific Video Room using it's unique name, this can be used to check if people are already there in the room and also to show their names.
            **/
            public func getNewVideoParticipants(
                uniqueName: String,
                
                onResponse: @escaping (_ response: GetParticipantsInsideVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room/\(uniqueName)/participants",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetParticipantsInsideVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Open video room.
            * Description: Initiate and open a video room.
            **/
            public func openVideoRoom(
                body: CreateVideoRoomPayload,
                onResponse: @escaping (_ response: CreateVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Close video room.
            * Description: Terminate and close an active video room.
            **/
            public func closeVideoRoom(
                uniqueName: String,
                
                onResponse: @escaping (_ response: CloseVideoRoomResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/lead/v1.0/company/\(companyId)/application/\(applicationId)/video/room/\(uniqueName)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CloseVideoRoomResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
        }
        
        
            
        public class Serviceability {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create zones defined at the application level
            * Description: Creates a list of zones defined at the application level.
            **/
            public func createZone(
                body: CreateZoneV2Data,
                onResponse: @escaping (_ response: ZoneResponseV2?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneResponseV2.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Shows zones defined at the application level
            * Description: Displays the list of zones defined at the application level.
            **/
            public func getZones(
                stage: String?,
                pageSize: Int?,
                zoneIds: String?,
                isActive: Bool?,
                q: String?,
                country: String?,
                countryIsoCode: String?,
                pincode: String?,
                state: String?,
                city: String?,
                sector: String?,
                
                onResponse: @escaping (_ response: ListViewResponseV2?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = stage {
    
    xQuery["stage"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = zoneIds {
    
    xQuery["zone_ids"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = country {
    
    xQuery["country"] = value
    
}


if let value = countryIsoCode {
    
    xQuery["country_iso_code"] = value
    
}


if let value = pincode {
    
    xQuery["pincode"] = value
    
}


if let value = state {
    
    xQuery["state"] = value
    
}


if let value = city {
    
    xQuery["city"] = value
    
}


if let value = sector {
    
    xQuery["sector"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ListViewResponseV2.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details of the Zone
            * Description: Retrieves the region, application, store mapping and other details in the Zone.
            **/
            public func getZone(
                zoneId: String,
                
                onResponse: @escaping (_ response: GetZoneByIdSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetZoneByIdSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update details of a Zone to enable or disable.
            * Description: Enable or Disable a Zone under that application.
            **/
            public func updateZone(
                zoneId: String,
                body: UpdateZoneDataV2,
                onResponse: @escaping (_ response: ZoneUpdateSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneUpdateSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete a Specific Zone.
            * Description: Delete a Zone under that application.
            **/
            public func deleteZone(
                zoneId: String,
                
                onResponse: @escaping (_ response: ZoneDeleteSuccessResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/logistics/v2.0/company/\(companyId)/application/\(applicationId)/zones/\(zoneId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ZoneDeleteSuccessResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Update pincode MOP (Mode of Payment) view.
            * Description: Modify and update views related to pincode MOP.
            **/
            public func updatePincodeMopView(
                body: PincodeMopData,
                onResponse: @escaping (_ response: PincodeMOPresponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-update",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMOPresponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update pincode bulk view.
            * Description: Modify and update views related to bulk operations on pincode.
            **/
            public func updatePincodeBulkView(
                body: PincodeMopBulkData,
                onResponse: @escaping (_ response: PincodeBulkViewResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-bulk-update",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeBulkViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update pincode CoD (Cash on Delivery) listing.
            * Description: Modify and update listings for CoD based on pincode.
            **/
            public func updatePincodeCoDListing(
                body: PincodeCodStatusListingRequest,
                onResponse: @escaping (_ response: PincodeCodStatusListingResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/pincode-mop-data",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeCodStatusListingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update pincode audit history.
            * Description: Modify and update audit history records for pincode-related activities.
            **/
            public func updatePincodeAuditHistory(
                body: PincodeMopUpdateAuditHistoryRequest,
                onResponse: @escaping (_ response: PincodeMopUpdateAuditHistoryResponseData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/history",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PincodeMopUpdateAuditHistoryResponseData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Creation of GeoArea
            * Description: Allows to create and manage GeoAreas, representing groups of geographic regions.
            **/
            public func createGeoArea(
                body: GeoAreaRequestBody,
                onResponse: @escaping (_ response: GeoAreaResponseBody?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaResponseBody.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all geoareas in the current application.
            * Description: Retrieves a listing view of created GeoAreas.
            **/
            public func getGeoAreas(
                pageSize: Int?,
                isActive: Bool?,
                q: String?,
                countryIsoCode: String?,
                state: String?,
                city: String?,
                pincode: String?,
                sector: String?,
                
                onResponse: @escaping (_ response: GeoAreaGetResponseBody?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = countryIsoCode {
    
    xQuery["country_iso_code"] = value
    
}


if let value = state {
    
    xQuery["state"] = value
    
}


if let value = city {
    
    xQuery["city"] = value
    
}


if let value = pincode {
    
    xQuery["pincode"] = value
    
}


if let value = sector {
    
    xQuery["sector"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaGetResponseBody.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details of the specific geoarea
            * Description: This API Returns the data of the specific GeoArea which exists on the platform.
            **/
            public func getGeoArea(
                geoareaId: String,
                
                onResponse: @escaping (_ response: GeoAreaResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/\(geoareaId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update the details of existing GeoArea
            * Description: Updates the GeoArea with a new name, regions, etc.
            **/
            public func updateGeoArea(
                geoareaId: String,
                body: GeoAreaRequestBody,
                onResponse: @escaping (_ response: GeoAreaPutResponseBody?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/geoareas/\(geoareaId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GeoAreaPutResponseBody.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Updating of Courier Rule.
            * Description: This API updates and returns Courier Rule.
            **/
            public func updateCourierRule(
                ruleId: String,
                body: CourierPartnerRule,
                onResponse: @escaping (_ response: CourierPartnerRule?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courierPartner/rules/\(ruleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRule.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch of Courier Rule.
            * Description: This API returns Courier Rule.
            **/
            public func getCourierPartnerRule(
                ruleId: String,
                
                onResponse: @escaping (_ response: CourierPartnerRule?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courierPartner/rules/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRule.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Courier Rules.
            * Description: Creates Courier Rules with rule configuration and dp priority
            **/
            public func createCourierPartnerRule(
                body: CourierPartnerRule,
                onResponse: @escaping (_ response: CourierPartnerRule?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRule.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Fetch Courier Rules List
            * Description: This API returns Courier Rules List
            **/
            public func getCourierPartnerRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                onResponse: @escaping (_ response: CourierPartnerRulesListResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CourierPartnerRulesListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Apply configuration to an application
            * Description: Apply configuration to application to set DP rules and Zone configuration
            **/
            public func updateApplicationConfiguration(
                body: ApplicationConfig,
                onResponse: @escaping (_ response: ApplicationConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get All Courier Rules applied to application
            * Description: This API returns all the Courier Rules applied to an application
            **/
            public func getApplicationConfiguration(
                
                onResponse: @escaping (_ response: ApplicationConfig?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfig.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: To patch any config which can be applied to application.
            * Description: Apply configs to application and for reference, refer to examples
            **/
            public func patchApplicationConfiguration(
                body: ApplicationConfigPatchRequest,
                onResponse: @escaping (_ response: ApplicationConfigPatchResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationConfigPatchResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            /**
            *
            * Summary: Self-ship configuration of application.
            * Description: This API updates Self-ship configuration of the application.
            **/
            public func patchApplicationServiceabilitySelfShipment(
                body: SelfShipResponse,
                onResponse: @escaping (_ response: ApplicationSelfShipConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/selfship",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationSelfShipConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Self-ship configuration of application.
            * Description: This API returns Self-ship configuration of the application.
            **/
            public func getApplicationServiceabilitySelfShipment(
                
                onResponse: @escaping (_ response: ApplicationSelfShipConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/selfship",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ApplicationSelfShipConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Application Configuration
            * Description: Get Application Configuration
            **/
            public func getApplicationConfig(
                
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Insert Application Configuration
            * Description: Insert Application Configuration
            **/
            public func insertApplicationConfig(
                body: StoreRuleConfigData,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Store Rule Configuration
            * Description: Update Store Rule Configuration
            **/
            public func updateStoreRulesConfig(
                body: StoreRuleConfigData,
                onResponse: @escaping (_ response: StoreRuleConfigData?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleConfigData.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Multiple Store Rules
            * Description: Get Multiple Store Rules
            **/
            public func getStoreRules(
                pageNo: Int?,
                pageSize: Int?,
                status: String?,
                
                onResponse: @escaping (_ response: GetStoreRulesApiResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetStoreRulesApiResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Store Rule
            * Description: Create Store Rule
            **/
            public func createStoreRules(
                body: CreateStoreRuleRequestSchema,
                onResponse: @escaping (_ response: StoreRuleResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get Single Store Rule
            * Description: Get Single Store Rule
            **/
            public func getStoreRule(
                ruleUid: String,
                
                onResponse: @escaping (_ response: StoreRuleDataSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleDataSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Store Rule
            * Description: Update Store Rule
            **/
            public func updateStoreRules(
                ruleUid: String,
                body: CreateStoreRuleRequestSchema,
                onResponse: @escaping (_ response: StoreRuleUpdateResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/store/rules/\(ruleUid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(StoreRuleUpdateResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Updates Courier Partner Rules Priority for a sales channel
            * Description: Updates Courier Partner Rules Priority for a sales channel
            **/
            public func updateCourierPartnerRulePriority(
                body: RulePriorityRequest,
                onResponse: @escaping (_ response: RulePriorityResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/logistics/v1.0/company/\(companyId)/application/\(applicationId)/courier-partner/rules/priority",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RulePriorityResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Order {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Get all questions of that cluster
            **/
            public func getQuestions(
                pageNo: Int?,
                pageSize: Int?,
                q: String?,
                isActive: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = q {
    
    xQuery["q"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/question/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Retrieve rule lane configurations
            **/
            public func getRuleLaneConfig(
                searchValue: String?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = searchValue {
    
    xQuery["search_value"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule-lane-config",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Create a new rule
            **/
            public func createRule(
                body: RuleRequest,
                onResponse: @escaping (_ response: CreateRuleResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateRuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Get a specific rule by ID
            **/
            public func getRuleById(
                ruleId: String,
                
                onResponse: @escaping (_ response: RuleResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Update a specific rule by ID
            **/
            public func updateRule(
                ruleId: String,
                body: RuleUpdateRequest,
                onResponse: @escaping (_ response: RuleUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule/\(ruleId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Delete a specific rule by ID
            **/
            public func deleteRule(
                ruleId: String,
                
                onResponse: @escaping (_ response: DeleteRuleResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule/\(ruleId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteRuleResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Update the position of a rule
            **/
            public func updateRulePosition(
                body: UpdateRulePositionRequest,
                onResponse: @escaping (_ response: UpdateRulePositionResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule-position/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UpdateRulePositionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Get available rule parameters
            **/
            public func getRuleParameters(
                
                onResponse: @escaping (_ response: RuleParametersResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule-parameters/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleParametersResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Get a list of rules
            **/
            public func getRuleList(
                body: RuleListRequest,
                onResponse: @escaping (_ response: RuleListResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/order-manage/v1.0/company/\(companyId)/application/\(applicationId)/rule_list",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RuleListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get reasons behind full or partial cancellation of a shipment
            * Description: Use this API to retrieve the issues that led to the cancellation of bags within a shipment.
            **/
            public func getShipmentBagReasons(
                shipmentId: String,
                lineNumber: Int,
                
                onResponse: @escaping (_ response: ShipmentBagReasons?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/lineNumber/\(lineNumber)/reasons",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentBagReasons.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: 
            * Description: Get cross selling platform shipments
            **/
            public func getApplicationShipments(
                lane: String?,
                searchType: String?,
                searchId: String?,
                fromDate: String?,
                toDate: String?,
                dpIds: String?,
                orderingCompanyId: String?,
                stores: String?,
                salesChannel: String?,
                requestByExt: String?,
                pageNo: Int?,
                pageSize: Int?,
                customerId: String?,
                isPrioritySort: Bool?,
                excludeLockedShipments: Bool?,
                
                onResponse: @escaping (_ response: ShipmentInternalPlatformViewResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = lane {
    
    xQuery["lane"] = value
    
}


if let value = searchType {
    
    xQuery["search_type"] = value
    
}


if let value = searchId {
    
    xQuery["search_id"] = value
    
}


if let value = fromDate {
    
    xQuery["from_date"] = value
    
}


if let value = toDate {
    
    xQuery["to_date"] = value
    
}


if let value = dpIds {
    
    xQuery["dp_ids"] = value
    
}


if let value = orderingCompanyId {
    
    xQuery["ordering_company_id"] = value
    
}


if let value = stores {
    
    xQuery["stores"] = value
    
}


if let value = salesChannel {
    
    xQuery["sales_channel"] = value
    
}


if let value = requestByExt {
    
    xQuery["request_by_ext"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = customerId {
    
    xQuery["customer_id"] = value
    
}


if let value = isPrioritySort {
    
    xQuery["is_priority_sort"] = value
    
}


if let value = excludeLockedShipments {
    
    xQuery["exclude_locked_shipments"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/shipments",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentInternalPlatformViewResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Track shipment on the platform.
            * Description: Track shipment by Shipment ID for application based on application Id
            **/
            public func trackShipmentPlatform(
                shipmentId: String,
                
                onResponse: @escaping (_ response: PlatformShipmentTrack?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/\(shipmentId)/track",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformShipmentTrack.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get platform shipment reasons.
            * Description: Retrieve reasons behind full or partial cancellation of a shipment
            **/
            public func getPlatformShipmentReasons(
                action: String,
                
                onResponse: @escaping (_ response: ShipmentReasonsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/order/v1.0/company/\(companyId)/application/\(applicationId)/orders/shipments/reasons/\(action)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentReasonsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
        }
        
        
            
        public class Partner {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Add proxy path.
            * Description: Create and add a new proxy path.
            **/
            public func addProxyPath(
                extensionId: String,
                body: AddProxyReq,
                onResponse: @escaping (_ response: AddProxyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AddProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Remove proxy path.
            * Description: Delete a proxy path from the platform.
            **/
            public func removeProxyPath(
                extensionId: String,
                attachedPath: String,
                
                onResponse: @escaping (_ response: RemoveProxyResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/partners/v1.0/company/\(companyId)/application/\(applicationId)/proxy/\(extensionId)/\(attachedPath)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RemoveProxyResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Payment {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get brand payment gateway config
            * Description: Retrieve configuration settings for brand payment gateways.
            **/
            public func getBrandPaymentGatewayConfig(
                aggregator: String,
                configType: String?,
                
                onResponse: @escaping (_ response: PaymentGatewayConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["aggregator"] = aggregator



if let value = configType {
    
    xQuery["config_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save brand payment gateway config.
            * Description: Store and update configuration settings for brand payment gateways.
            **/
            public func saveBrandPaymentGatewayConfig(
                body: PaymentGatewayConfigRequest,
                onResponse: @escaping (_ response: PaymentGatewayToBeReviewed?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/aggregator/request",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentGatewayToBeReviewed.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment mode routes.
            * Description: Retrieve routes and options for payment modes.
            **/
            public func getPaymentModeRoutes(
                refresh: Bool,
                amount: Int,
                requestType: String,
                orderId: String?,
                shipmentId: String?,
                
                onResponse: @escaping (_ response: PaymentOptionsResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["refresh"] = refresh




    xQuery["amount"] = amount




    xQuery["request_type"] = requestType



if let value = orderId {
    
    xQuery["order_id"] = value
    
}


if let value = shipmentId {
    
    xQuery["shipment_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOptionsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get bank account details.
            * Description: Retrieve bank account information using an open API.
            **/
            public func getBankAccountDetailsOpenAPI(
                orderId: String,
                requestHash: String?,
                
                onResponse: @escaping (_ response: GetRefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["order_id"] = orderId



if let value = requestHash {
    
    xQuery["request_hash"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetRefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add refund bank account using OTP.
            * Description: Register a refund bank account with OTP verification.
            **/
            public func addRefundBankAccountUsingOTP(
                body: AddBeneficiaryDetailsOTPRequest,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: Get user order beneficiaries.
            * Description: Retrieve beneficiaries associated with a user orders.
            **/
            public func getUserOrderBeneficiaries(
                orderId: String,
                
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["order_id"] = orderId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/order",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user beneficiaries.
            * Description: Retrieve beneficiaries associated with a user.
            **/
            public func getUserBeneficiaries(
                orderId: String,
                
                onResponse: @escaping (_ response: OrderBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["order_id"] = orderId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/accounts/user",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Confirm payment.
            * Description: Authenticate and confirm a payment.
            **/
            public func confirmPayment(
                body: PaymentConfirmationRequest,
                onResponse: @escaping (_ response: PaymentConfirmationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentConfirmationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user COD limit routes.
            * Description: Retrieve routes and limits for user cash-on-delivery (COD) transactions.
            **/
            public func getUserCODlimitRoutes(
                merchantUserId: String,
                mobileNo: String,
                
                onResponse: @escaping (_ response: GetUserCODLimitResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["merchant_user_id"] = merchantUserId




    xQuery["mobile_no"] = mobileNo



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetUserCODLimitResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Set user COD limit routes.
            * Description: Configure routes and limits for user COD transactions.
            **/
            public func setUserCODlimitRoutes(
                body: SetCODForUserRequest,
                onResponse: @escaping (_ response: GetUserCODLimitResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/user-cod",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetUserCODLimitResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: EDC aggregators and model list.
            * Description: Retrieve a list of EDC (Electronic Data Capture) aggregators and models.
            **/
            public func edcAggregatorsAndModelList(
                
                onResponse: @escaping (_ response: EdcAggregatorAndModelListResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-aggregator-list",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcAggregatorAndModelListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: EDC device stats.
            * Description: Get statistics and data related to EDC devices.
            **/
            public func edcDeviceStats(
                
                onResponse: @escaping (_ response: EdcDeviceStatsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-stats",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceStatsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update EDC device.
            * Description: Modify the settings and details of an EDC device.
            **/
            public func updateEdcDevice(
                body: EdcAddRequest,
                onResponse: @escaping (_ response: EdcDeviceAddResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceAddResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get EDC device.
            * Description: Retrieve detailed information about an EDC device.
            **/
            public func getEdcDevice(
                terminalUniqueIdentifier: String,
                
                onResponse: @escaping (_ response: EdcDeviceDetailsResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edcDevice/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceDetailsResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add EDC device.
            * Description: Register and add a new EDC device.
            **/
            public func addEdcDevice(
                terminalUniqueIdentifier: String,
                body: EdcUpdateRequest,
                onResponse: @escaping (_ response: EdcDeviceUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edcDevice/\(terminalUniqueIdentifier)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: EDC device list.
            * Description: Retrieve a list of available EDC devices.
            **/
            public func edcDeviceList(
                pageNo: Int?,
                pageSize: Int?,
                isActive: Bool?,
                storeId: Int?,
                deviceTag: String?,
                
                onResponse: @escaping (_ response: EdcDeviceListResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = isActive {
    
    xQuery["is_active"] = value
    
}


if let value = storeId {
    
    xQuery["store_id"] = value
    
}


if let value = deviceTag {
    
    xQuery["device_tag"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/edc-device-list",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(EdcDeviceListResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get POS payment mode routes.
            * Description: Retrieve payment options and aggregator for point-of-sale (POS).
            **/
            public func getPosPaymentModeRoutes(
                amount: Int,
                cartId: String?,
                pincode: String,
                checkoutMode: String?,
                refresh: Bool?,
                orderId: String?,
                cardReference: String?,
                orderType: String,
                userDetails: String?,
                displaySplit: Bool?,
                advancePayment: Bool?,
                shipmentId: String?,
                
                onResponse: @escaping (_ response: PaymentModeRouteResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["amount"] = amount



if let value = cartId {
    
    xQuery["cart_id"] = value
    
}



    xQuery["pincode"] = pincode



if let value = checkoutMode {
    
    xQuery["checkout_mode"] = value
    
}


if let value = refresh {
    
    xQuery["refresh"] = value
    
}


if let value = orderId {
    
    xQuery["order_id"] = value
    
}


if let value = cardReference {
    
    xQuery["card_reference"] = value
    
}



    xQuery["order_type"] = orderType



if let value = userDetails {
    
    xQuery["user_details"] = value
    
}


if let value = displaySplit {
    
    xQuery["display_split"] = value
    
}


if let value = advancePayment {
    
    xQuery["advance_payment"] = value
    
}


if let value = shipmentId {
    
    xQuery["shipment_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/pos",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentModeRouteResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Initialize payment.
            * Description: Start the payment initiation process for UPI and QR code.
            **/
            public func initialisePayment(
                body: PaymentInitializationRequest,
                onResponse: @escaping (_ response: PaymentInitializationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/request",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentInitializationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Check and update payment status.
            * Description: Verify and modify the status of a payment.
            **/
            public func checkAndUpdatePaymentStatus(
                body: PaymentStatusUpdateRequest,
                onResponse: @escaping (_ response: PaymentStatusUpdateResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/confirm/polling",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusUpdateResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Resend or cancel payment.
            * Description: Resend or cancel a payment link.
            **/
            public func resendOrCancelPayment(
                body: ResendOrCancelPaymentRequest,
                onResponse: @escaping (_ response: ResendOrCancelPaymentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/cancel",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendOrCancelPaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Payment status bulk.
            * Description: Retrieve the status of multiple payments in bulk.
            **/
            public func paymentStatusBulk(
                body: PaymentStatusBulkHandlerRequest,
                onResponse: @escaping (_ response: PaymentStatusBulkHandlerResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/payment-status-bulk",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentStatusBulkHandlerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get OAuth URL.
            * Description: Retrieve an OAuth URL for PG API authentication.
            **/
            public func oauthGetUrl(
                aggregator: String,
                successRedirectUrl: String?,
                failureRedirectUrl: String?,
                
                onResponse: @escaping (_ response: GetOauthUrlResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = successRedirectUrl {
    
    xQuery["success_redirect_url"] = value
    
}


if let value = failureRedirectUrl {
    
    xQuery["failure_redirect_url"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/onboard/\(aggregator)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetOauthUrlResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Revoke OAuth token.
            * Description: Invalidate an OAuth token.
            **/
            public func revokeOauthToken(
                aggregator: String,
                
                onResponse: @escaping (_ response: RevokeOAuthToken?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/revoke/\(aggregator)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RevokeOAuthToken.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Repayment details for BNPL.
            * Description: Retrieve information about repayment transactions.
            **/
            public func repaymentDetails(
                body: RepaymentDetailsSerialiserPayAll,
                onResponse: @escaping (_ response: RepaymentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/repayment-details",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RepaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Merchant onboarding for BNPL.
            * Description: Initiate the onboarding process for a merchant.
            **/
            public func merchantOnBoarding(
                body: MerchantOnBoardingRequest,
                onResponse: @escaping (_ response: MerchantOnBoardingResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/merchant-onboarding",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(MerchantOnBoardingResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Verify customer for payment.
            * Description: Retrieve a link for making payments.
            **/
            public func verifyCustomerForPayment(
                body: ValidateCustomerRequest,
                onResponse: @escaping (_ response: ValidateCustomerResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/customer/validation",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ValidateCustomerResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment link.
            * Description: Retrieve a link for making payments.
            **/
            public func getPaymentLink(
                paymentLinkId: String,
                
                onResponse: @escaping (_ response: GetPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["payment_link_id"] = paymentLinkId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create payment link.
            * Description: Generate a new link for accepting payments.
            **/
            public func createPaymentLink(
                body: CreatePaymentLinkRequest,
                onResponse: @escaping (_ response: CreatePaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/create-payment-link",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreatePaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment link
            * Description: Use this API to get a payment link
            **/
            public func getPaymentLinkId(
                id: String,
                paymentLinkId: String,
                
                onResponse: @escaping (_ response: GetPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["payment_link_id"] = paymentLinkId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/createPaymentLink/\(id)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Used for polling if payment successful or not
            * Description: Use this API to poll if payment through payment was successful or not
            **/
            public func pollingPaymentLink(
                paymentLinkId: String?,
                
                onResponse: @escaping (_ response: PollingPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = paymentLinkId {
    
    xQuery["payment_link_id"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/polling-payment-link",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PollingPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Resend payment link
            * Description: Use this API to resend a payment link for the customer
            **/
            public func resendPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                onResponse: @escaping (_ response: ResendPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/resend-payment-link",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ResendPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Cancel payment link.
            * Description: Deactivate and cancel a payment link.
            **/
            public func cancelPaymentLink(
                body: CancelOrResendPaymentLinkRequest,
                onResponse: @escaping (_ response: CancelPaymentLinkResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/cancel-payment-link",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CancelPaymentLinkResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details for the given  payment mode for merchant
            * Description: Use this API to get details for the given payment mode for merchant
            **/
            public func getPaymentModeSequencing(
                businessUnit: String,
                device: String,
                
                onResponse: @escaping (_ response: PaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["business_unit"] = businessUnit




    xQuery["device"] = device



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment_modes/sequencing",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update offline payment mode details for the merchant
            * Description: Use this API to update  payment mode sequence details for the merchant
            **/
            public func patchPaymentModeSequencing(
                body: PlatformPaymentModeRequest,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment_modes/sequencing",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details for the given offline / advance payment mode for merchant
            * Description: Use this API to get details for the given offline / advance payment mode for merchant
            **/
            public func getPaymentModeControlRoutes(
                mode: String,
                
                onResponse: @escaping (_ response: PlatformOfflineAdvanceResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformOfflineAdvanceResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update offline payment mode details for the merchant
            * Description: Use this API to update given offline / advance payment mode details for the merchant
            **/
            public func setMerchantModeControlRoutes(
                mode: String,
                body: PlatformOfflineAdvanceRequest,
                onResponse: @escaping (_ response: PlatformOfflineAdvanceResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformOfflineAdvanceResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get details of advance payment custom configurations of merchant
            * Description: Use this API to Get details of advance payment custom configurations of merchant
            **/
            public func getPaymentModeCustomConfig(
                mode: String,
                
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update details of advance payment custom configurations of merchant
            * Description: Use this API to update given details of advance payment custom configurations of merchant
            **/
            public func setPaymentModeCustomConfig(
                mode: String,
                body: PaymentCustomConfigRequestSchema,
                onResponse: @escaping (_ response: PaymentCustomConfigResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/modes/\(mode)/custom-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentCustomConfigResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            /**
            *
            * Summary: List Payment Options Method Codes
            * Description: Get all active List Payment Options Method Codes
            **/
            public func getPaymentCodeOption(
                
                onResponse: @escaping (_ response: GetPaymentCodeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/codes",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentCodeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get payment session data
            * Description: Get payment session data
            **/
            public func getPaymentSession(
                gid: String,
                
                onResponse: @escaping (_ response: GetPaymentSessionResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetPaymentSessionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update payment session.
            * Description: Modify the details of a payment session.
            **/
            public func updatePaymentSession(
                gid: String,
                body: PaymentSessionRequestSerializer,
                onResponse: @escaping (_ response: PaymentSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/session/\(gid)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update refund session.
            * Description: Modify the details of a refund session.
            **/
            public func updateRefundSession(
                gid: String,
                requestId: String,
                body: RefundSessionRequestSerializer,
                onResponse: @escaping (_ response: RefundSessionResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/\(gid)/refund/session/\(requestId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundSessionResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get merchant payment option
            * Description: Retrieve all the available Paymet Gateways for merchant and its offline payment mode details.
            **/
            public func getMerchantPaymentOption(
                paymentOptionType: String?,
                
                onResponse: @escaping (_ response: PlatformOnlineOfflinePaymentResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = paymentOptionType {
    
    xQuery["payment_option_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformOnlineOfflinePaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Patch merchant payment option
            * Description: To updated online payment as active/inactive or offline payment configuration like cod charges, anonymous cod allowed flags.
            **/
            public func patchMerchantPaymentOption(
                body: MerchantPaymentModeRequest,
                onResponse: @escaping (_ response: PatchPlatformOnlineOfflinePaymentResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PatchPlatformOnlineOfflinePaymentResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get all business units and it's devices.
            * Description: This method returns an object containing the details of a single aggregator as per the id.
            **/
            public func getDevices(
                
                onResponse: @escaping (_ response: GetDeviceResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/all-devices",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GetDeviceResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get merchant aggregator payment mode details.
            * Description: swagger not found. so operationId not found
            **/
            public func getMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                
                onResponse: @escaping (_ response: AggregatorPlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["business_unit"] = businessUnit




    xQuery["device"] = device



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorPlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Patch merchant aggregator payment mode details.
            * Description: swagger not found. so operationId not found
            **/
            public func patchMerchantAggregatorPaymentModeDetails(
                aggregatorId: Int,
                body: PlatformPaymentModeRequest,
                onResponse: @escaping (_ response: PlatformPaymentModeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformPaymentModeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get PG (Payment Gateway) config aggregators.
            * Description: swagger not found. so operationId not found
            **/
            public func getPGConfigAggregators(
                
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get merchant refund priority
            * Description: Get merchant refund priority.
            **/
            public func getAggregatorCredentialHistory(
                aggregator: String,
                configType: String,
                
                onResponse: @escaping (_ response: AggregatorHistoryResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["aggregator"] = aggregator




    xQuery["config_type"] = configType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator/credential/history",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorHistoryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to get merchant refund priority
            * Description: API to get merchant refund priority
            **/
            public func getAggregatorCredential(
                aggregator: String,
                configType: String,
                
                onResponse: @escaping (_ response: AggregatorCredentialResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["aggregator"] = aggregator




    xQuery["config_type"] = configType



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator/credential",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorCredentialResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Aggregator Credentials
            * Description: 
            **/
            public func updateAggregatorCredential(
                body: AggregatorCredentialRequest,
                onResponse: @escaping (_ response: PatchAggregatorCredentialResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/configuration/aggregator/credential",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PatchAggregatorCredentialResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to get merchant refund priority
            * Description: API to get merchant refund priority
            **/
            public func getMerchantRefundPriority(
                configType: String,
                
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refundPriority/config/\(configType)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to create merchant refund priority
            * Description: API to update merchant refund priority
            **/
            public func createMerchantRefundPriority(
                configType: String,
                body: RefundPriorityRequestSerializer,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refundPriority/config/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to update merchant refund priority
            * Description: API to update merchant refund priority
            **/
            public func updateMerchantRefundPriority(
                configType: String,
                body: RefundPriorityRequestSerializer,
                onResponse: @escaping (_ response: RefundPriorityResponseSerializer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refundPriority/config/\(configType)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundPriorityResponseSerializer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create Order
            * Description: Use this API to create a order and payment on aggregator side
            **/
            public func createPaymentOrder(
                body: PaymentOrderRequest,
                onResponse: @escaping (_ response: PaymentOrderResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment-orders",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PaymentOrderResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Copy payment mode config of onc device to another.
            * Description: Copy aggregator config like Wallet, NB, paylater from one device of an aggregator like razorpay to another device.
            **/
            public func copyConfigPaymentModes(
                body: PlatformPaymentModeCopyConfigRequest,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment_modes/sequencing/copy-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Copy aggregator config of onc device to another.
            * Description: Copy aggregator config like Wallet, NB, paylater from one device of an aggregator like razorpay to another device.
            **/
            public func copyConfigAggPaymentModes(
                aggregatorId: String,
                body: PlatformPaymentModeCopyConfigRequest,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/copy-config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get app version required for Payment Mode.
            * Description: This api provide read operations on the app version required for Payment Mode or sub payment mode for an Aggregator.
            **/
            public func getMerchantAggregatorAppVersion(
                aggregatorId: Int,
                businessUnit: String,
                device: String,
                paymentModeId: Int?,
                subPaymentMode: String?,
                
                onResponse: @escaping (_ response: AggregatorVersionResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["business_unit"] = businessUnit




    xQuery["device"] = device



if let value = paymentModeId {
    
    xQuery["payment_mode_id"] = value
    
}


if let value = subPaymentMode {
    
    xQuery["sub_payment_mode"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorVersionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update app version required for Payment Mode.
            * Description: This api provide wrote operations on the app version required for Payment Mode or sub payment mode for an Aggregator.
            **/
            public func patchMerchantPaymentOptionVersion(
                aggregatorId: Int,
                body: AggregatorControlRequest,
                onResponse: @escaping (_ response: AggregatorConfigResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/options/aggregators/\(aggregatorId)/version",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AggregatorConfigResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save bank details for cancelled/returned order
            * Description: Use this API to save bank details for returned/cancelled order to refund amount in his account.
            **/
            public func addRefundBankAccount(
                body: AddBeneficiaryDetailsOTPRequest,
                onResponse: @escaping (_ response: RefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account_create",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(RefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete saved beneficiary details of customers
            * Description: Use this API to delete the saved beneficiary details provided beneficiary Id.
            **/
            public func deleteBeneficiaryDetails(
                beneficiaryId: String,
                
                onResponse: @escaping (_ response: DeleteRefundAccountResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/account/\(beneficiaryId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(DeleteRefundAccountResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Refund Options Handler to fetch available refund options.
            * Description: Refund Options Handler to fetch available refund options
            **/
            public func getRefundOptions(
                configuration: String,
                productType: String?,
                amount: Int?,
                optinAppId: String?,
                optinCompanyId: String?,
                orderType: String?,
                
                onResponse: @escaping (_ response: ShipmentRefundResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["configuration"] = configuration



if let value = productType {
    
    xQuery["product_type"] = value
    
}


if let value = amount {
    
    xQuery["amount"] = value
    
}


if let value = optinAppId {
    
    xQuery["optin_app_id"] = value
    
}


if let value = optinCompanyId {
    
    xQuery["optin_company_id"] = value
    
}


if let value = orderType {
    
    xQuery["order_type"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/refundoptions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentRefundResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save refund source against shipment and order
            * Description: Save refund source against shipment and order
            **/
            public func setRefundOptionforShipment(
                body: ShipmentRefundRequest,
                onResponse: @escaping (_ response: ShipmentRefundResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/refundoptions",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShipmentRefundResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to get the selected refund options for shipment id
            * Description: API to get the selected refund options for shipment id
            **/
            public func getSelectedRefundOption(
                shipmentId: String,
                orderId: String,
                
                onResponse: @escaping (_ response: SelectedRefundOptionResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["shipment_id"] = shipmentId




    xQuery["order_id"] = orderId



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/payment/selected_refund_options",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SelectedRefundOptionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Lists the beneficiary of a refund
            * Description: Use this API to get the details of all active beneficiary added by a user for refund.
            **/
            public func getUserBeneficiariesDetailV2(
                orderId: String?,
                shipmentId: String?,
                mop: String?,
                
                onResponse: @escaping (_ response: OrderBeneficiaryResponseSchemaV2?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = orderId {
    
    xQuery["order_id"] = value
    
}


if let value = shipmentId {
    
    xQuery["shipment_id"] = value
    
}


if let value = mop {
    
    xQuery["mop"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v2.0/company/\(companyId)/application/\(applicationId)/refund/user/beneficiary",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(OrderBeneficiaryResponseSchemaV2.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to Validate UPI ID and IFSC code
            * Description: API to Validate UPI ID and IFSC code
            **/
            public func validateBeneficiaryAddress(
                body: ValidateValidateAddressRequest,
                onResponse: @escaping (_ response: ValidateValidateAddressResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/validate/beneficiary-address",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ValidateValidateAddressResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Set a default beneficiary for a refund
            * Description: Use this API to set a default beneficiary for getting a refund.
            **/
            public func updateDefaultBeneficiary(
                body: SetDefaultBeneficiaryRequest,
                onResponse: @escaping (_ response: SetDefaultBeneficiaryResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/refund/beneficiary/default",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetDefaultBeneficiaryResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to get pennydrop validation flag
            * Description: API to get pennydrop validation flag
            **/
            public func getPennyDropValidation(
                
                onResponse: @escaping (_ response: PennyDropValidationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/pennydrop/validation",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PennyDropValidationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: API to update penny drop validation for application ID
            * Description: API to update penny drop validation for application ID
            **/
            public func updatePennyDropValidation(
                body: UpdatePennyDropValidationRequest,
                onResponse: @escaping (_ response: PennyDropValidationResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/payment/v1.0/company/\(companyId)/application/\(applicationId)/pennydrop/validation",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PennyDropValidationResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Rewards {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Display giveaways.
            * Description: Retrieve and display available giveaways.
            **/
            public func showGiveaways(
                pageId: String,
                pageSize: Int,
                
                onResponse: @escaping (_ response: GiveawayResponse?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["page_id"] = pageId




    xQuery["page_size"] = pageSize



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(GiveawayResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Save giveaway.
            * Description: Store and manage details of a giveaway.
            **/
            public func saveGiveAway(
                body: Giveaway,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get giveaway by ID.
            * Description: Retrieve specific giveaway details by its unique identifier.
            **/
            public func getGiveawayById(
                id: String,
                
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update giveaway.
            * Description: Modify and update information about a giveaway.
            **/
            public func updateGiveAway(
                id: String,
                body: Giveaway,
                onResponse: @escaping (_ response: Giveaway?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/giveaways/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Giveaway.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Show offers.
            * Description: Display available offers for users.
            **/
            public func showOffers(
                
                onResponse: @escaping (_ response: [Offer]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([Offer].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get offer by name.
            * Description: Retrieve an offer by its name.
            **/
            public func getOfferByName(
                name: String,
                
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update offer by name.
            * Description: Modify and manage an offer using its name.
            **/
            public func updateOfferByName(
                name: String,
                body: Offer,
                onResponse: @escaping (_ response: Offer?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/offers/\(name)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(Offer.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update user status.
            * Description: Change and update the status of a user in the rewards system.
            **/
            public func updateUserStatus(
                userId: String,
                body: AppUser,
                onResponse: @escaping (_ response: AppUser?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AppUser.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user details.
            * Description: Retrieve comprehensive details about a user in the rewards program.
            **/
            public func getUserDetails(
                userId: String,
                
                onResponse: @escaping (_ response: UserRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user points history.
            * Description: Retrieve the history of points earned and redeemed by a user.
            **/
            public func getUserPointsHistory(
                userId: String,
                pageId: String?,
                pageSize: Int?,
                
                onResponse: @escaping (_ response: HistoryRes?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageId {
    
    xQuery["page_id"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/users/\(userId)/points/history/",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(HistoryRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: get paginator for getUserPointsHistory
            * Description: fetch the next page by calling .next(...) function
            **/
            public func getUserPointsHistoryPaginator(
                userId: String,
                pageSize: Int?
                
                ) -> Paginator<HistoryRes> {
                let pageSize = pageSize ?? 20
                let paginator = Paginator<HistoryRes>(pageSize: pageSize, type: "cursor")
                paginator.onPage = {
                    self.getUserPointsHistory(
                            
                            userId: userId,
                            pageId: paginator.pageId
                            ,
                            pageSize: paginator.pageSize
                            
                        ) { response, error in                    
                        if let response = response {
                            paginator.hasNext = response.page?.hasNext ?? false
                            paginator.pageId = response.page?.nextId
                            
                        }
                        paginator.onNext?(response, error)
                    }
                }
                return paginator
            }
            
            
            
            
            /**
            *
            * Summary: Get rewards configuration.
            * Description: Retrieve the configuration settings for the rewards program.
            **/
            public func getRewardsConfiguration(
                
                onResponse: @escaping (_ response: ConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Set rewards configuration.
            * Description: Configure and modify the settings for the rewards program.
            **/
            public func setRewardsConfiguration(
                body: ConfigurationRequest,
                onResponse: @escaping (_ response: SetConfigurationRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/rewards/v1.0/company/\(companyId)/application/\(applicationId)/configuration/",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SetConfigurationRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Share {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Create short link.
            * Description: Generate a shortened URL link for sharing.
            **/
            public func createShortLink(
                body: ShortLinkReq,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get short links.
            * Description: Retrieve a list of all generated short links.
            **/
            public func getShortLinks(
                pageNo: Int?,
                pageSize: Int?,
                createdBy: String?,
                active: String?,
                shortUrl: String?,
                originalUrl: String?,
                title: String?,
                
                onResponse: @escaping (_ response: ShortLinkList?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = createdBy {
    
    xQuery["created_by"] = value
    
}


if let value = active {
    
    xQuery["active"] = value
    
}


if let value = shortUrl {
    
    xQuery["short_url"] = value
    
}


if let value = originalUrl {
    
    xQuery["original_url"] = value
    
}


if let value = title {
    
    xQuery["title"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/short-link",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkList.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get short link by hash.
            * Description: Retrieve a specific short link by its unique hash.
            **/
            public func getShortLinkByHash(
                hash: String,
                
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/shortLink/\(hash)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update short link by ID.
            * Description: Update details of a specific short link by its ID.
            **/
            public func updateShortLinkById(
                id: String,
                body: ShortLinkReq,
                onResponse: @escaping (_ response: ShortLinkRes?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/share/v1.0/company/\(companyId)/application/\(applicationId)/links/shortLink/\(id)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ShortLinkRes.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
            
        public class Theme {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get all pages.
            * Description: Retrieve a list of all available pages.
            **/
            public func getAllPages(
                themeId: String,
                
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create page.
            * Description: Generate and add a new page to the platform.
            **/
            public func createPage(
                themeId: String,
                body: AvailablePageSchema,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update multiple pages.
            * Description: Modify multiple pages simultaneously.
            **/
            public func updateMultiplePages(
                themeId: String,
                body: AllAvailablePageSchema,
                onResponse: @escaping (_ response: AllAvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/page",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AllAvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get page.
            * Description: Retrieve detailed information about a specific page.
            **/
            public func getPage(
                themeId: String,
                pageValue: String,
                
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update page.
            * Description: Modify and update the content of a page.
            **/
            public func updatePage(
                themeId: String,
                pageValue: String,
                body: AvailablePageSchema,
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete page.
            * Description: Remove a page from the platform.
            **/
            public func deletePage(
                themeId: String,
                pageValue: String,
                
                onResponse: @escaping (_ response: AvailablePageSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/\(themeId)/\(pageValue)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(AvailablePageSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get fonts.
            * Description: Retrieve a list of available fonts.
            **/
            public func getFonts(
                
                onResponse: @escaping (_ response: FontsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v1.0/company/\(companyId)/application/\(applicationId)/fonts",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FontsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get fonts.
            * Description: Retrieve a list of available fonts.
            **/
            public func getFontsV2(
                
                onResponse: @escaping (_ response: FontsSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/fonts",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(FontsSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            
            
            
            
            /**
            *
            * Summary: Get application themes.
            * Description: Retrieve themes available for an application.
            **/
            public func getApplicationThemes(
                
                onResponse: @escaping (_ response: [ThemesSchema]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/themes",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([ThemesSchema].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get application themes count.
            * Description: Count the number of themes available for an application.
            **/
            public func getApplicationThemesCount(
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/application_themes_count",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme by ID.
            * Description: Retrieve a theme by its unique identifier.
            **/
            public func getThemeById(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update theme.
            * Description: Modify and update the content and settings of a theme
            **/
            public func updateTheme(
                themeId: String,
                body: ThemesSchema,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete theme.
            * Description: Remove a theme from the platform.
            **/
            public func deleteTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update theme name.
            * Description: Modify the name of a theme.
            **/
            public func updateThemeName(
                themeId: String,
                body: UpdateThemeNameRequestBody,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/name",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Apply theme.
            * Description: Set and apply a theme to an application or page.
            **/
            public func applyTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/apply",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Duplicate theme.
            * Description: Create a copy of an existing theme.
            **/
            public func duplicateTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/duplicate",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get applied theme.
            * Description: Retrieve the currently applied theme.
            **/
            public func getAppliedTheme(
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add a theme to an application
            * Description: Add a theme to an application by providing the marketplace theme ID.
            **/
            public func addThemeToApplication(
                body: ThemesSchema,
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme for preview.
            * Description: Retrieve a theme for previewing before application.
            **/
            public func getThemeForPreview(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/preview",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get theme last modified.
            * Description: Retrieve the last modification of a theme.
            **/
            public func getThemeLastModified(
                themeId: String,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "HEAD",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/polling",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Is upgradable.
            * Description: Determine if a theme is eligible for an upgrade.
            **/
            public func isUpgradable(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemeUpgradableResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgradable",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemeUpgradableResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Upgrade theme.
            * Description: Enhance and update a theme to a new version.
            **/
            public func upgradeTheme(
                themeId: String,
                
                onResponse: @escaping (_ response: ThemesSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/\(themeId)/upgrade",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ThemesSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get latest version of theme by slug.
            * Description: Retrieve the most recent version of a theme using its slug.
            **/
            public func getLatestVersionOfThemeBySlug(
                slugName: String,
                
                onResponse: @escaping (_ response: [MarketplaceTheme]?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/theme/v2.0/company/\(companyId)/application/\(applicationId)/slug/\(slugName)/latest",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode([MarketplaceTheme].self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
        }
        
        
            
        public class User {        
            var config: PlatformConfig
            var companyId: String
            var applicationId: String

            init(config: PlatformConfig, applicationId: String) {
                self.config = config
                self.companyId = config.companyId
                self.applicationId = applicationId
            }
            
            
            
            
            /**
            *
            * Summary: Get customers.
            * Description: Retrieve a list of customer profiles.
            **/
            public func getCustomers(
                q: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: CustomerListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/list",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomerListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Search users.
            * Description: Search and filter user profiles.
            **/
            public func searchUsers(
                q: String?,
                query: [String]?,
                
                onResponse: @escaping (_ response: UserSearchResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = q {
    
    xQuery["q"] = value
    
}


if let value = query {
    
    xQuery["query"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/search",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserSearchResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create user.
            * Description: Register and add a new user to the platform.
            **/
            public func createUser(
                body: CreateUserRequestSchema,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Block/unblock users.
            * Description: Control user access by blocking or unblocking their accounts.
            **/
            public func blockOrUnblockUsers(
                body: BlockUserRequestSchema,
                onResponse: @escaping (_ response: BlockUserSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/activation",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(BlockUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Undelete user.
            * Description: Restore a previously deleted user account.
            **/
            public func unDeleteUser(
                body: UnDeleteUserRequestSchema,
                onResponse: @escaping (_ response: UnDeleteUserSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/undelete",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UnDeleteUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update user.
            * Description: Modify and update user profile information.
            **/
            public func updateUser(
                userId: String,
                body: UpdateUserRequestSchema,
                onResponse: @escaping (_ response: CreateUserResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create user session.
            * Description: Establish a session for user interactions.
            **/
            public func createUserSession(
                body: CreateUserSessionRequestSchema,
                onResponse: @escaping (_ response: CreateUserSessionResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CreateUserSessionResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete session.
            * Description: Terminate an active user session.
            **/
            public func deleteSession(
                id: String,
                sessionId: String,
                reason: String,
                
                onResponse: @escaping (_ response: SessionDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id




    xQuery["session_id"] = sessionId




    xQuery["reason"] = reason



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/session",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get active sessions.
            * Description: Retrieve a list of currently active user sessions.
            **/
            public func getActiveSessions(
                id: String,
                
                onResponse: @escaping (_ response: SessionListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete active sessions.
            * Description: End multiple active user sessions.
            **/
            public func deleteActiveSessions(
                id: String,
                reason: String,
                
                onResponse: @escaping (_ response: SessionsDeleteResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 


    xQuery["id"] = id




    xQuery["reason"] = reason



 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/sessions",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SessionsDeleteResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: archive user
            * Description: archive user
            **/
            public func archiveUser(
                body: ArchiveUserRequestSchema,
                onResponse: @escaping (_ response: ArchiveUserSuccess?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/customers/archive",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(ArchiveUserSuccess.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get platform config.
            * Description: Retrieve configuration settings for the platform.
            **/
            public func getPlatformConfig(
                
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update platform config.
            * Description: Modify and update platform configuration settings.
            **/
            public func updatePlatformConfig(
                body: PlatformSchema,
                onResponse: @escaping (_ response: PlatformSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/platform/config",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(PlatformSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create user group.
            * Description: Form and add a new user group.
            **/
            public func createUserGroup(
                body: CreateUserGroup,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user groups.
            * Description: Retrieve a list of user groups.
            **/
            public func getUserGroups(
                pageNo: String?,
                pageSize: String?,
                name: String?,
                type: String?,
                status: String?,
                groupUid: Int?,
                
                onResponse: @escaping (_ response: UserGroupListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = name {
    
    xQuery["name"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = status {
    
    xQuery["status"] = value
    
}


if let value = groupUid {
    
    xQuery["group_uid"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_group",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update user group.
            * Description: Modify and update user group details.
            **/
            public func updateUserGroup(
                groupId: String,
                body: UpdateUserGroupSchema,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get user group by ID.
            * Description: Retrieve a user group by its unique identifier.
            **/
            public func getUserGroupById(
                groupId: String,
                
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Add or Remove an user from particular user group and update user group details
            * Description: Update user group partially on the platform.
            **/
            public func updateUserGroupPartially(
                groupId: String,
                body: PartialUserGroupUpdateSchema,
                onResponse: @escaping (_ response: UserGroupResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PATCH",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserGroupResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get users belonging to user group by Id
            * Description: Use this API to users belonging to user Group
            **/
            public func getUsersByByGroupId(
                groupId: String,
                
                onResponse: @escaping (_ response: CustomerListResponseSchema?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userGroup/\(groupId)/users",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(CustomerListResponseSchema.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Create a User Attribute Definition
            * Description: Use this API to areate a new User Attribute Definition
            **/
            public func createUserAttributeDefinition(
                body: CreateUserAttributeDefinition,
                onResponse: @escaping (_ response: UserAttributeDefinitionResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "POST",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinitionResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attribute Definitions
            * Description: Retrieve user attribute definitions.
            **/
            public func getUserAttributeDefinitions(
                excludingIds: String?,
                slug: String?,
                type: String?,
                customerEditable: Bool?,
                encrypted: Bool?,
                pinned: Bool?,
                pinOrder: Int?,
                isLocked: Bool?,
                name: String?,
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = excludingIds {
    
    xQuery["excluding_ids"] = value
    
}


if let value = slug {
    
    xQuery["slug"] = value
    
}


if let value = type {
    
    xQuery["type"] = value
    
}


if let value = customerEditable {
    
    xQuery["customer_editable"] = value
    
}


if let value = encrypted {
    
    xQuery["encrypted"] = value
    
}


if let value = pinned {
    
    xQuery["pinned"] = value
    
}


if let value = pinOrder {
    
    xQuery["pin_order"] = value
    
}


if let value = isLocked {
    
    xQuery["is_locked"] = value
    
}


if let value = name {
    
    xQuery["name"] = value
    
}


if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/user_attribute/definition",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update User Attribute Definition
            * Description: Update an existing user attribute definition.
            **/
            public func updateUserAttributeDefinition(
                attributeDefId: String,
                body: CreateUserAttributeDefinition,
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Delete User Attribute Definition
            * Description: Delete a user attribute definition by its unique identifier.
            **/
            public func deleteUserAttributeDefinitionById(
                attributeDefId: String,
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attribute Definition
            * Description: Get a user attribute definition by its unique identifier.
            **/
            public func getUserAttributeDefinitionById(
                attributeDefId: String,
                
                onResponse: @escaping (_ response: UserAttributeDefinition?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeDefinition.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Update Or Create User Attribute
            * Description: Update Or Create User Attribute
            **/
            public func updateUserAttribute(
                attributeDefId: String,
                userId: String,
                body: CreateUserAttributeRequest,
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "PUT",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: body.dictionary,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: get User Attribute
            * Description: get User Attribute
            **/
            public func getUserAttribute(
                attributeDefId: String,
                userId: String,
                
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: delete User Attribute
            * Description: delete User Attribute
            **/
            public func deleteUserAttribute(
                attributeDefId: String,
                userId: String,
                
                onResponse: @escaping (_ response: SuccessMessageResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "DELETE",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/definition/\(attributeDefId)/user/\(userId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(SuccessMessageResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attributes for user
            * Description: Get all user attributes for user
            **/
            public func getUserAttributesForUser(
                userId: String,
                pageSize: Int?,
                pageNo: Int?,
                
                onResponse: @escaping (_ response: [String: Any]?, _ error: FDKError?) -> Void
            ) {
                
var xQuery: [String: Any] = [:] 

if let value = pageSize {
    
    xQuery["page_size"] = value
    
}


if let value = pageNo {
    
    xQuery["page_no"] = value
    
}


 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/user/\(userId)",
                    query: xQuery,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = data.dictionary
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
            
            
            
            /**
            *
            * Summary: Get User Attribute
            * Description: Get User Attribute details by id
            **/
            public func getUserAttributeById(
                attributeId: String,
                
                onResponse: @escaping (_ response: UserAttributeResponse?, _ error: FDKError?) -> Void
            ) {
                
 

 


                PlatformAPIClient.execute(
                    config: config,
                    method: "GET",
                    url: "/service/platform/user/v1.0/company/\(companyId)/application/\(applicationId)/userAttribute/attribute/\(attributeId)",
                    query: nil,
                    body: nil,
                    headers: [],
                    responseType: "application/json",
                    onResponse: { (responseData, error, responseCode) in
                        if let _ = error, let data = responseData {
                            var err = Utility.decode(FDKError.self, from: data)
                            if err?.status == nil {
                                err?.status = responseCode
                            }
                            onResponse(nil, err)
                        } else if let data = responseData {
                            
                            let response = Utility.decode(UserAttributeResponse.self, from: data)
                            
                            onResponse(response, nil)
                        } else {
                            let userInfo: [String: Any] =  [ NSLocalizedDescriptionKey :  NSLocalizedString("Unidentified", value: "Please try after sometime", comment: "") ,
                                                 NSLocalizedFailureReasonErrorKey : NSLocalizedString("Unidentified", value: "Something went wrong", comment: "")]
                            let err = FDKError(message: "Something went wrong", status: 502, code: "Unidentified", exception: nil, info: "Please try after sometime", requestID: nil, stackTrace: nil, meta: userInfo)
                            onResponse(nil, err)
                        }
                });
            }
            
            
        }
        
        
    }
}